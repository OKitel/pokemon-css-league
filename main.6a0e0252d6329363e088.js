(()=>{var e={5339:(e,t,i)=>{"use strict";i.d(t,{A:()=>b});var n=i(4991),r=i.n(n),o=i(6314),s=i.n(o),a=i(4417),l=i.n(a),h=i(1910),c=i(8934),d=i(4836),u=i(4234),f=s()(r()),p=l()(h),O=l()(c),m=l()(d),g=l()(u);f.push([e.id,'/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}button,[type=button],[type=reset],[type=submit]{-webkit-appearance:button}button::-moz-focus-inner,[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}body{font-family:"Ysabeau Infant",sans-serif}.reset-btn,.modal-btn,.footer__link,.btn{transition:all .3s ease-out}html{font-size:10px}body{font-size:1.6rem;font-style:normal;font-weight:normal;line-height:2.6rem}.container{display:flex;flex-direction:column;height:100vh}#root{background-color:#2f8bcc;color:#111042;text-shadow:0px 0px 3px hsla(0,0%,100%,.5)}.background{display:flex;flex-direction:column;flex:1 0 auto;background-image:url('+p+');background-size:cover;background-repeat:no-repeat}.btn{border:2px solid #111042;border-radius:1rem;background-color:rgba(0,0,0,0);cursor:pointer;font-size:larger}.btn:hover{background-color:#111042;color:#fff}*,*:before,*:after{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}.pokeball__container{z-index:10;margin:0 3rem}.pokeball{position:relative;width:200px;height:200px;background:#fff;border:10px solid #000;border-radius:50%;overflow:hidden;box-shadow:inset -10px 10px 0 10px #ccc;animation:fall .25s ease-in-out,shake 1.25s cubic-bezier(0.36, 0.07, 0.19, 0.97) 2}.finish{animation:activeAnimation 1s infinite ease-in-out}.pokeball::before,.pokeball::after{content:"";position:absolute}.pokeball::before{background:red;width:100%;height:50%}.pokeball::after{top:calc(50% - 10px);width:100%;height:20px;background:#000}.pokeball__button{position:absolute;top:calc(50% - 30px);left:calc(50% - 30px);width:60px;height:60px;background:#7f8c8d;border:10px solid #fff;border-radius:50%;z-index:10;box-shadow:0 0 0 10px #000;animation:blink .5s alternate 5}@keyframes blink{from{background:#eee}to{background:#e74c3c}}@keyframes shake{0%{transform:translate(0, 0) rotate(0)}20%{transform:translate(-10px, 0) rotate(-20deg)}30%{transform:translate(10px, 0) rotate(20deg)}50%{transform:translate(-10px, 0) rotate(-10deg)}60%{transform:translate(10px, 0) rotate(10deg)}100%{transform:translate(0, 0) rotate(0)}}@keyframes fall{0%{top:-200px}60%{top:0}80%{top:-20px}100%{top:0}}::-webkit-scrollbar{width:1.5rem;height:1.5rem}::-webkit-scrollbar-track{background:#fff}::-webkit-scrollbar-thumb{background:#2f8bcc;border:.5rem solid #fff}::-webkit-scrollbar-thumb:hover{background:rgb(37.4501992032,110.7569721116,162.5498007968)}::-webkit-scrollbar-corner{background:#111042}.header{display:flex;flex-direction:column;justify-content:center;align-items:center;flex-shrink:0;padding:1rem 0 0 0}.header__logo{width:20rem;height:7rem;background-image:url('+O+");background-size:contain;background-repeat:no-repeat}.header__title{margin:0;font-size:2.5rem;font-style:normal;font-weight:bold;line-height:2.6rem}.header__link{cursor:pointer}.main{display:flex;flex-direction:column;align-items:center;flex-grow:1}.task-title{font-size:7rem;line-height:7rem;text-align:center}.pokemons{display:flex;justify-content:space-around;align-items:center;padding:2rem 0;flex-grow:1}.pokemon{width:20rem}@media screen and (max-height: 800px){.task-title{font-size:5rem;line-height:6rem}.pokemon{width:15rem}}@media screen and (max-width: 780px){.pokemon{width:10rem}.task-title{font-size:5rem;line-height:6rem}}.editor{display:flex;min-width:80%;backdrop-filter:blur(3px);box-shadow:4px 4px 10px 0px rgba(17,16,66,.5);padding:1rem}.editor__header{background-color:#fff;margin:0;text-align:center;color:#111042}#css-editor,#html-viewer{flex:1 1 50%;position:relative}.cm-editor{background-color:#fff;width:100%;height:30rem}@keyframes shakeEditor{0%{transform:translateX(0)}20%{transform:translateX(-10px)}40%{transform:translateX(10px)}60%{transform:translateX(-10px)}80%{transform:translateX(10px)}100%{transform:translateX(0)}}.shake{animation:shakeEditor .5s infinite}.enter-btn{position:absolute;bottom:1rem;right:1rem;width:8rem;height:3rem}@media screen and (max-height: 800px){.cm-editor{height:20rem}}.footer{flex-shrink:0;color:#111042;display:flex;justify-content:space-around;align-items:center;box-shadow:0 -1px 10px 5px rgba(17,16,66,.5);backdrop-filter:blur(3px)}.footer__link{cursor:pointer}.footer__link:hover{transform:scale(1.05)}.github-icon{width:4rem;height:4rem;background-image:url("+m+");background-size:contain}.rss-icon{width:8rem;height:4rem;background-image:url("+g+");background-size:contain;background-repeat:no-repeat}.footer__year{text-shadow:0px 0px 3px hsla(0,0%,100%,.5)}.overlay-modal{display:flex;align-items:center;justify-content:center;backdrop-filter:blur(3px);width:100%;height:100%;position:fixed;z-index:-2;top:0;left:0;transition:all .5s ease;opacity:0}.overlay-modal.active{opacity:1;z-index:2}.modal{width:70%;height:80vh;overflow-y:scroll;box-shadow:4px 4px 10px 0px rgba(17,16,66,.5)}.modal-content{display:flex;flex-direction:column;align-items:center;background-color:#fff;padding:1rem}.modal-btn-container{padding:2rem}.modal-btn{width:25rem;height:4rem;border:2px solid #111042;border-radius:1rem;background-color:rgba(0,0,0,0);cursor:pointer;font-size:larger}.modal-btn:hover{background-color:#111042;color:#fff}.modal-content__image{padding-top:1rem}.modal-content__info{display:flex;flex-direction:column;align-items:center;padding-top:1rem;width:80%}.modal-content__info-title{font-weight:bold;font-size:larger}.modal-content__info-text{text-align:justify}.burger{display:flex;cursor:pointer;flex-direction:column;height:22px;justify-content:space-between;position:fixed;top:35px;right:20px;width:29px;z-index:2;transition:all .4s ease}.burger .bar{width:100%;height:2px;background-color:#111042}.burger.active{transform:rotate(90deg) translate(14px, 0)}.nav-links{display:flex;list-style:none;padding:0;margin:0}.nav-links li{margin-bottom:1rem}.nav-links__item{font-size:larger;cursor:pointer;transition:.3s}.nav-links__item:hover{color:#2f8bcc;text-decoration:underline}.nav-links__item-active{color:#2f8bcc;font-weight:bold;padding-bottom:3px;cursor:default}.menu-container{display:flex;flex-direction:column;justify-content:space-evenly;align-items:center;width:25rem;height:100%;position:fixed;right:-25rem;top:0;transition:all .5s ease;z-index:1;background:#fff;padding:0 5rem}.menu-container.active{right:0;box-shadow:-1px 0px 5px 0px #111042}.menu{flex-direction:column}.overlay{backdrop-filter:blur(3px);width:100%;height:100%;position:fixed;z-index:-1;top:0;left:0;transition:all .5s ease;opacity:0}.overlay.active{opacity:1;z-index:1}.body-overflow{overflow:hidden}.menu-title{text-align:center}.reset-btn{width:15rem;height:4rem;border:2px solid #111042;border-radius:1rem;background-color:rgba(0,0,0,0);cursor:pointer;font-size:larger}.reset-btn:hover{background-color:#111042;color:#fff}.active-image{animation:activeAnimation 1s infinite ease-in-out}@keyframes activeAnimation{0%{transform:scale(1)}50%{transform:scale(1.1)}100%{transform:scale(1)}}.active{animation-play-state:running}.tiny{width:10rem;margin:0 2rem}@media screen and (max-width: 780px){.tiny{width:7rem;margin:0 1rem}}","",{version:3,sources:["webpack://./src/sass/styles.scss","webpack://./node_modules/normalize.css/normalize.css","webpack://./src/sass/abstract/_placeholders.scss","webpack://./src/sass/base/_base.scss","webpack://./src/sass/abstract/_mixins.scss","webpack://./src/sass/abstract/_constants.scss","webpack://./src/sass/items/_pokeball.scss","webpack://./src/sass/items/_scrollbar.scss","webpack://./src/sass/layouts/_header.scss","webpack://./src/sass/layouts/_main.scss","webpack://./src/sass/layouts/_editor.scss","webpack://./src/sass/layouts/_footer.scss","webpack://./src/sass/layouts/_modal.scss","webpack://./src/sass/layouts/_menu.scss","webpack://./src/sass/layouts/_pokemon.scss"],names:[],mappings:"AAAA,2ECAA,CAAA,KAUA,gBACE,CAAA,6BACA,CAAA,KAUF,QACE,CAAA,KAOF,aACE,CAAA,GAQF,aACE,CAAA,cACA,CAAA,GAWF,sBACE,CAAA,QACA,CAAA,gBACA,CAAA,IAQF,+BACE,CAAA,aACA,CAAA,EAUF,4BACE,CAAA,YAQF,kBACE,CAAA,yBACA,CAAA,gCACA,CAAA,SAOF,kBAEE,CAAA,cAQF,+BAGE,CAAA,aACA,CAAA,MAOF,aACE,CAAA,QAQF,aAEE,CAAA,aACA,CAAA,iBACA,CAAA,uBACA,CAAA,IAGF,cACE,CAAA,IAGF,UACE,CAAA,IAUF,iBACE,CAAA,sCAWF,mBAKE,CAAA,cACA,CAAA,gBACA,CAAA,QACA,CAAA,aAQF,gBAEE,CAAA,cAQF,mBAEE,CAAA,gDAOF,yBAIE,CAAA,wHAOF,iBAIE,CAAA,SACA,CAAA,4GAOF,6BAIE,CAAA,SAOF,0BACE,CAAA,OAUF,qBACE,CAAA,aACA,CAAA,aACA,CAAA,cACA,CAAA,SACA,CAAA,kBACA,CAAA,SAOF,uBACE,CAAA,SAOF,aACE,CAAA,6BAQF,qBAEE,CAAA,SACA,CAAA,kFAOF,WAEE,CAAA,cAQF,4BACE,CAAA,mBACA,CAAA,yCAOF,uBACE,CAAA,6BAQF,yBACE,CAAA,YACA,CAAA,QAUF,aACE,CAAA,QAOF,iBACE,CAAA,SAUF,YACE,CAAA,SAOF,YACE,CAAA,KC3VF,uCACE,CAAA,yCAGF,2BACE,CAAA,KCLF,cACE,CAAA,KAGF,gBAEuB,CAAA,iBCNoC,CAAA,kBDMF,CAAA,kBAAjB,CAAA,WAGxC,YACE,CAAA,qBACA,CAAA,YACA,CAAA,MAGF,wBEdY,CAAA,aACC,CAAA,0CFgBX,CAAA,YAGF,YACE,CAAA,qBACA,CAAA,aACA,CAAA,wDAEA,CAAA,qBACA,CAAA,2BACA,CAAA,KAGF,wBACE,CAAA,kBACA,CAAA,8BACA,CAAA,cAEA,CAAA,gBACA,CAAA,WAGF,wBEtCa,CAAA,UAFC,CAAA,mBAAA,6BCGZ,CAAA,0BACA,CAAA,qBACA,CAAA,qBAGF,UACE,CAAA,aACA,CAAA,UAIF,iBACE,CAAA,WACA,CAAA,YACA,CAAA,eACA,CAAA,sBACA,CAAA,iBACA,CAAA,eACA,CAAA,uCACA,CAAA,kFACA,CAAA,QAIF,iDACE,CAAA,mCAGF,UAEE,CAAA,iBACA,CAAA,kBAGF,cACE,CAAA,UACA,CAAA,UACA,CAAA,iBAGF,oBACE,CAAA,UACA,CAAA,WACA,CAAA,eACA,CAAA,kBAGF,iBACE,CAAA,oBACA,CAAA,qBACA,CAAA,UACA,CAAA,WACA,CAAA,kBACA,CAAA,sBACA,CAAA,iBACA,CAAA,UACA,CAAA,0BACA,CAAA,+BACA,CAAA,iBAIF,KACE,eACE,CAAA,GAGF,kBACE,CAAA,CAAA,iBAIJ,GACE,mCACE,CAAA,IAGF,4CACE,CAAA,IAGF,0CACE,CAAA,IAGF,4CACE,CAAA,IAGF,0CACE,CAAA,KAGF,mCACE,CAAA,CAAA,gBAIJ,GACE,UACE,CAAA,IAGF,KACE,CAAA,IAGF,SACE,CAAA,KAGF,KACE,CAAA,CAAA,oBCnHJ,YACE,CAAA,aACA,CAAA,0BAGF,eFLc,CAAA,0BESd,kBFRY,CAAA,uBEUV,CAAA,gCAGF,2DACE,CAAA,2BAGF,kBFhBa,CAAA,QGFb,YACE,CAAA,qBACA,CAAA,sBACA,CAAA,kBACA,CAAA,aACA,CAAA,kBACA,CAAA,cAGF,WACE,CAAA,WACA,CAAA,wDACA,CAAA,uBACA,CAAA,2BACA,CAAA,eAGF,QACE,CAAA,gBACqB,CAAA,iBJnBoC,CAAA,gBImBF,CAAA,kBAAjB,CAAA,cAGxC,cACE,CAAA,MCvBF,YACE,CAAA,qBACA,CAAA,kBACA,CAAA,WACA,CAAA,YAGF,cACE,CAAA,gBACA,CAAA,iBACA,CAAA,UAGF,YACE,CAAA,4BACA,CAAA,kBACA,CAAA,cACA,CAAA,WACA,CAAA,SAGF,WACE,CAAA,sCAGF,YACE,cACE,CAAA,gBACA,CAAA,SAIF,WACE,CAAA,CAAA,qCAKJ,SACE,WACE,CAAA,YAGF,cACE,CAAA,gBACA,CAAA,CAAA,QC7CJ,YACE,CAAA,aACA,CAAA,yBACA,CAAA,6CACA,CAAA,YACA,CAAA,gBAEA,qBLPY,CAAA,QKSV,CAAA,iBACA,CAAA,aLRS,CAAA,yBKab,YAEE,CAAA,iBACA,CAAA,WAGF,qBLrBc,CAAA,UKuBZ,CAAA,YACA,CAAA,uBAGF,GACE,uBACE,CAAA,IAGF,2BACE,CAAA,IAGF,0BACE,CAAA,IAGF,2BACE,CAAA,IAGF,0BACE,CAAA,KAGF,uBACE,CAAA,CAAA,OAIJ,kCACE,CAAA,WAGF,iBACE,CAAA,WACA,CAAA,UACA,CAAA,UACA,CAAA,WACA,CAAA,sCAGF,WACE,YACE,CAAA,CAAA,QCnEJ,aACE,CAAA,aNCW,CAAA,YMGX,CAAA,4BACA,CAAA,kBACA,CAAA,4CACA,CAAA,yBACA,CAAA,cAGF,cACE,CAAA,oBAIA,qBACE,CAAA,aAIJ,UACE,CAAA,WACA,CAAA,wDACA,CAAA,uBACA,CAAA,UAGF,UACE,CAAA,WACA,CAAA,wDACA,CAAA,uBACA,CAAA,2BACA,CAAA,cAGF,0CACE,CAAA,eCtCF,YACE,CAAA,kBACA,CAAA,sBACA,CAAA,yBACA,CAAA,UACA,CAAA,WACA,CAAA,cACA,CAAA,UACA,CAAA,KACA,CAAA,MACA,CAAA,uBACA,CAAA,SACA,CAAA,sBAEA,SACE,CAAA,SACA,CAAA,OAIJ,SACE,CAAA,WACA,CAAA,iBACA,CAAA,6CACA,CAAA,eAGF,YACE,CAAA,qBACA,CAAA,kBACA,CAAA,qBP9BY,CAAA,YOgCZ,CAAA,qBAGF,YACE,CAAA,WAGF,WACE,CAAA,WACA,CAAA,wBACA,CAAA,kBACA,CAAA,8BACA,CAAA,cAEA,CAAA,gBACA,CAAA,iBAGF,wBPhDa,CAAA,UAFC,CAAA,sBOuDd,gBACE,CAAA,qBAGF,YACE,CAAA,qBACA,CAAA,kBACA,CAAA,gBACA,CAAA,SACA,CAAA,2BAGF,gBACE,CAAA,gBACA,CAAA,0BAGF,kBACE,CAAA,QCzEF,YACE,CAAA,cACA,CAAA,qBACA,CAAA,WACA,CAAA,6BACA,CAAA,cACA,CAAA,QACA,CAAA,UACA,CAAA,UACA,CAAA,SACA,CAAA,uBACA,CAAA,aAEA,UACE,CAAA,UACA,CAAA,wBRbS,CAAA,eQiBX,0CACE,CAAA,WAIJ,YACE,CAAA,eACA,CAAA,SACA,CAAA,QACA,CAAA,cAEA,kBACE,CAAA,iBAIF,gBACE,CAAA,cACA,CAAA,cACA,CAAA,uBAEA,aRvCQ,CAAA,yBQyCN,CAAA,wBAGF,aR5CQ,CAAA,gBQ8CN,CAAA,kBACA,CAAA,cACA,CAAA,gBAKN,YACE,CAAA,qBACA,CAAA,4BACA,CAAA,kBACA,CAAA,WACA,CAAA,WACA,CAAA,cACA,CAAA,YACA,CAAA,KACA,CAAA,uBACA,CAAA,SACA,CAAA,eRjEY,CAAA,cQmEZ,CAAA,uBAGF,OACE,CAAA,mCACA,CAAA,MAGF,qBACE,CAAA,SAIF,yBACE,CAAA,UACA,CAAA,WACA,CAAA,cACA,CAAA,UACA,CAAA,KACA,CAAA,MACA,CAAA,uBACA,CAAA,SACA,CAAA,gBAEA,SACE,CAAA,SACA,CAAA,eAIJ,eACE,CAAA,YAGF,iBACE,CAAA,WAGF,WACE,CAAA,WACA,CAAA,wBACA,CAAA,kBACA,CAAA,8BACA,CAAA,cAEA,CAAA,gBACA,CAAA,iBAGF,wBRlHa,CAAA,UAFC,CAAA,cAAA,iDSCZ,CAAA,2BAGF,GACE,kBACE,CAAA,IAGF,oBACE,CAAA,KAGF,kBACE,CAAA,CAAA,QAIJ,4BACE,CAAA,MAGF,WACE,CAAA,aACA,CAAA,qCAGF,MACE,UACE,CAAA,aACA,CAAA",sourcesContent:['/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}button,[type=button],[type=reset],[type=submit]{-webkit-appearance:button}button::-moz-focus-inner,[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}body{font-family:"Ysabeau Infant",sans-serif}.reset-btn,.modal-btn,.footer__link,.btn{transition:all .3s ease-out}html{font-size:10px}body{font-size:1.6rem;font-style:normal;font-weight:normal;line-height:2.6rem}.container{display:flex;flex-direction:column;height:100vh}#root{background-color:#2f8bcc;color:#111042;text-shadow:0px 0px 3px hsla(0,0%,100%,.5)}.background{display:flex;flex-direction:column;flex:1 0 auto;background-image:url("../assets/landscape.jpg");background-size:cover;background-repeat:no-repeat}.btn{border:2px solid #111042;border-radius:1rem;background-color:rgba(0,0,0,0);cursor:pointer;font-size:larger}.btn:hover{background-color:#111042;color:#fff}*,*:before,*:after{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}.pokeball__container{z-index:10;margin:0 3rem}.pokeball{position:relative;width:200px;height:200px;background:#fff;border:10px solid #000;border-radius:50%;overflow:hidden;box-shadow:inset -10px 10px 0 10px #ccc;animation:fall .25s ease-in-out,shake 1.25s cubic-bezier(0.36, 0.07, 0.19, 0.97) 2}.finish{animation:activeAnimation 1s infinite ease-in-out}.pokeball::before,.pokeball::after{content:"";position:absolute}.pokeball::before{background:red;width:100%;height:50%}.pokeball::after{top:calc(50% - 10px);width:100%;height:20px;background:#000}.pokeball__button{position:absolute;top:calc(50% - 30px);left:calc(50% - 30px);width:60px;height:60px;background:#7f8c8d;border:10px solid #fff;border-radius:50%;z-index:10;box-shadow:0 0 0 10px #000;animation:blink .5s alternate 5}@keyframes blink{from{background:#eee}to{background:#e74c3c}}@keyframes shake{0%{transform:translate(0, 0) rotate(0)}20%{transform:translate(-10px, 0) rotate(-20deg)}30%{transform:translate(10px, 0) rotate(20deg)}50%{transform:translate(-10px, 0) rotate(-10deg)}60%{transform:translate(10px, 0) rotate(10deg)}100%{transform:translate(0, 0) rotate(0)}}@keyframes fall{0%{top:-200px}60%{top:0}80%{top:-20px}100%{top:0}}::-webkit-scrollbar{width:1.5rem;height:1.5rem}::-webkit-scrollbar-track{background:#fff}::-webkit-scrollbar-thumb{background:#2f8bcc;border:.5rem solid #fff}::-webkit-scrollbar-thumb:hover{background:rgb(37.4501992032,110.7569721116,162.5498007968)}::-webkit-scrollbar-corner{background:#111042}.header{display:flex;flex-direction:column;justify-content:center;align-items:center;flex-shrink:0;padding:1rem 0 0 0}.header__logo{width:20rem;height:7rem;background-image:url("../assets/pokémon_logo.png");background-size:contain;background-repeat:no-repeat}.header__title{margin:0;font-size:2.5rem;font-style:normal;font-weight:bold;line-height:2.6rem}.header__link{cursor:pointer}.main{display:flex;flex-direction:column;align-items:center;flex-grow:1}.task-title{font-size:7rem;line-height:7rem;text-align:center}.pokemons{display:flex;justify-content:space-around;align-items:center;padding:2rem 0;flex-grow:1}.pokemon{width:20rem}@media screen and (max-height: 800px){.task-title{font-size:5rem;line-height:6rem}.pokemon{width:15rem}}@media screen and (max-width: 780px){.pokemon{width:10rem}.task-title{font-size:5rem;line-height:6rem}}.editor{display:flex;min-width:80%;backdrop-filter:blur(3px);box-shadow:4px 4px 10px 0px rgba(17,16,66,.5);padding:1rem}.editor__header{background-color:#fff;margin:0;text-align:center;color:#111042}#css-editor,#html-viewer{flex:1 1 50%;position:relative}.cm-editor{background-color:#fff;width:100%;height:30rem}@keyframes shakeEditor{0%{transform:translateX(0)}20%{transform:translateX(-10px)}40%{transform:translateX(10px)}60%{transform:translateX(-10px)}80%{transform:translateX(10px)}100%{transform:translateX(0)}}.shake{animation:shakeEditor .5s infinite}.enter-btn{position:absolute;bottom:1rem;right:1rem;width:8rem;height:3rem}@media screen and (max-height: 800px){.cm-editor{height:20rem}}.footer{flex-shrink:0;color:#111042;display:flex;justify-content:space-around;align-items:center;box-shadow:0 -1px 10px 5px rgba(17,16,66,.5);backdrop-filter:blur(3px)}.footer__link{cursor:pointer}.footer__link:hover{transform:scale(1.05)}.github-icon{width:4rem;height:4rem;background-image:url("../assets/mystic-logo.png");background-size:contain}.rss-icon{width:8rem;height:4rem;background-image:url("../assets/rss.svg");background-size:contain;background-repeat:no-repeat}.footer__year{text-shadow:0px 0px 3px hsla(0,0%,100%,.5)}.overlay-modal{display:flex;align-items:center;justify-content:center;backdrop-filter:blur(3px);width:100%;height:100%;position:fixed;z-index:-2;top:0;left:0;transition:all .5s ease;opacity:0}.overlay-modal.active{opacity:1;z-index:2}.modal{width:70%;height:80vh;overflow-y:scroll;box-shadow:4px 4px 10px 0px rgba(17,16,66,.5)}.modal-content{display:flex;flex-direction:column;align-items:center;background-color:#fff;padding:1rem}.modal-btn-container{padding:2rem}.modal-btn{width:25rem;height:4rem;border:2px solid #111042;border-radius:1rem;background-color:rgba(0,0,0,0);cursor:pointer;font-size:larger}.modal-btn:hover{background-color:#111042;color:#fff}.modal-content__image{padding-top:1rem}.modal-content__info{display:flex;flex-direction:column;align-items:center;padding-top:1rem;width:80%}.modal-content__info-title{font-weight:bold;font-size:larger}.modal-content__info-text{text-align:justify}.burger{display:flex;cursor:pointer;flex-direction:column;height:22px;justify-content:space-between;position:fixed;top:35px;right:20px;width:29px;z-index:2;transition:all .4s ease}.burger .bar{width:100%;height:2px;background-color:#111042}.burger.active{transform:rotate(90deg) translate(14px, 0)}.nav-links{display:flex;list-style:none;padding:0;margin:0}.nav-links li{margin-bottom:1rem}.nav-links__item{font-size:larger;cursor:pointer;transition:.3s}.nav-links__item:hover{color:#2f8bcc;text-decoration:underline}.nav-links__item-active{color:#2f8bcc;font-weight:bold;padding-bottom:3px;cursor:default}.menu-container{display:flex;flex-direction:column;justify-content:space-evenly;align-items:center;width:25rem;height:100%;position:fixed;right:-25rem;top:0;transition:all .5s ease;z-index:1;background:#fff;padding:0 5rem}.menu-container.active{right:0;box-shadow:-1px 0px 5px 0px #111042}.menu{flex-direction:column}.overlay{backdrop-filter:blur(3px);width:100%;height:100%;position:fixed;z-index:-1;top:0;left:0;transition:all .5s ease;opacity:0}.overlay.active{opacity:1;z-index:1}.body-overflow{overflow:hidden}.menu-title{text-align:center}.reset-btn{width:15rem;height:4rem;border:2px solid #111042;border-radius:1rem;background-color:rgba(0,0,0,0);cursor:pointer;font-size:larger}.reset-btn:hover{background-color:#111042;color:#fff}.active-image{animation:activeAnimation 1s infinite ease-in-out}@keyframes activeAnimation{0%{transform:scale(1)}50%{transform:scale(1.1)}100%{transform:scale(1)}}.active{animation-play-state:running}.tiny{width:10rem;margin:0 2rem}@media screen and (max-width: 780px){.tiny{width:7rem;margin:0 1rem}}','/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Render the `main` element consistently in IE.\n */\n\nmain {\n  display: block;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n',"%font-prim {\r\n  font-family: 'Ysabeau Infant', sans-serif;\r\n}\r\n\r\n%transition {\r\n  transition: all .3s ease-out;\r\n}","html {\r\n  font-size: 10px;\r\n}\r\n\r\nbody {\r\n  @extend %font-prim;\r\n  @include font($size: 1.6rem, $height: 2.6rem, $weight: normal);\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n}\r\n\r\n#root {\r\n  background-color: $color-sky;\r\n  color: $color-dark;\r\n  text-shadow: 0px 0px 3px rgba(255, 255, 255, 0.5);\r\n}\r\n\r\n.background {\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1 0 auto;\r\n\r\n  background-image: url('../assets/landscape.jpg');\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\n.btn {\r\n  border: 2px solid $color-dark;\r\n  border-radius: 1rem;\r\n  background-color: transparent;\r\n  @extend %transition;\r\n  cursor: pointer;\r\n  font-size: larger;\r\n}\r\n\r\n.btn:hover {\r\n  background-color: $color-dark;\r\n  color: $color-light;\r\n}","@mixin font ($size, $height: $size, $weight: bold, $style: normal) {\r\n  font-size: $size;\r\n  font-style: $style;\r\n  font-weight: $weight;\r\n  line-height: $height;\r\n}\r\n\r\n@mixin gridSize($size) {\r\n  grid-template-columns: repeat($size, 3rem);\r\n}","$color-light: #ffffff;\r\n$color-sky: #2f8bcc;\r\n$color-dark: #111042;",'*,\r\n*:before,\r\n*:after {\r\n  -webkit-box-sizing: border-box;\r\n  -moz-box-sizing: border-box;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.pokeball__container {\r\n  z-index: 10;\r\n  margin: 0 3rem;\r\n}\r\n\r\n/* Poké Styles */\r\n.pokeball {\r\n  position: relative;\r\n  width: 200px;\r\n  height: 200px;\r\n  background: #fff;\r\n  border: 10px solid #000;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n  box-shadow: inset -10px 10px 0 10px #ccc;\r\n  animation: fall .25s ease-in-out,\r\n    shake 1.25s cubic-bezier(.36, .07, .19, .97) 2;\r\n}\r\n\r\n.finish {\r\n  animation: activeAnimation 1s infinite ease-in-out;\r\n}\r\n\r\n.pokeball::before,\r\n.pokeball::after {\r\n  content: "";\r\n  position: absolute;\r\n}\r\n\r\n.pokeball::before {\r\n  background: red;\r\n  width: 100%;\r\n  height: 50%;\r\n}\r\n\r\n.pokeball::after {\r\n  top: calc(50% - 10px);\r\n  width: 100%;\r\n  height: 20px;\r\n  background: #000;\r\n}\r\n\r\n.pokeball__button {\r\n  position: absolute;\r\n  top: calc(50% - 30px);\r\n  left: calc(50% - 30px);\r\n  width: 60px;\r\n  height: 60px;\r\n  background: #7f8c8d;\r\n  border: 10px solid #fff;\r\n  border-radius: 50%;\r\n  z-index: 10;\r\n  box-shadow: 0 0 0 10px black;\r\n  animation: blink .5s alternate 5;\r\n}\r\n\r\n/* Animation */\r\n@keyframes blink {\r\n  from {\r\n    background: #eee;\r\n  }\r\n\r\n  to {\r\n    background: #e74c3c;\r\n  }\r\n}\r\n\r\n@keyframes shake {\r\n  0% {\r\n    transform: translate(0, 0) rotate(0);\r\n  }\r\n\r\n  20% {\r\n    transform: translate(-10px, 0) rotate(-20deg);\r\n  }\r\n\r\n  30% {\r\n    transform: translate(10px, 0) rotate(20deg);\r\n  }\r\n\r\n  50% {\r\n    transform: translate(-10px, 0) rotate(-10deg);\r\n  }\r\n\r\n  60% {\r\n    transform: translate(10px, 0) rotate(10deg);\r\n  }\r\n\r\n  100% {\r\n    transform: translate(0, 0) rotate(0);\r\n  }\r\n}\r\n\r\n@keyframes fall {\r\n  0% {\r\n    top: -200px\r\n  }\r\n\r\n  60% {\r\n    top: 0\r\n  }\r\n\r\n  80% {\r\n    top: -20px\r\n  }\r\n\r\n  100% {\r\n    top: 0\r\n  }\r\n}',"::-webkit-scrollbar {\r\n  width: 1.5rem;\r\n  height: 1.5rem;\r\n}\r\n\r\n::-webkit-scrollbar-track {\r\n  background: $color-light;\r\n}\r\n\r\n::-webkit-scrollbar-thumb {\r\n  background: $color-sky;\r\n  border: .5rem solid $color-light;\r\n}\r\n\r\n::-webkit-scrollbar-thumb:hover {\r\n  background: darken($color-sky, 10%);\r\n}\r\n\r\n::-webkit-scrollbar-corner {\r\n  background: $color-dark;\r\n}",".header {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-shrink: 0;\r\n  padding: 1rem 0 0 0;\r\n}\r\n\r\n.header__logo {\r\n  width: 20rem;\r\n  height: 7rem;\r\n  background-image: url('../assets/pokémon_logo.png');\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\n.header__title {\r\n  margin: 0;\r\n  @include font($size: 2.5rem, $height: 2.6rem, $weight: bold);\r\n}\r\n\r\n.header__link {\r\n  cursor: pointer;\r\n}",".main {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  flex-grow: 1;\r\n}\r\n\r\n.task-title {\r\n  font-size: 7rem;\r\n  line-height: 7rem;\r\n  text-align: center;\r\n}\r\n\r\n.pokemons {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  padding: 2rem 0;\r\n  flex-grow: 1;\r\n}\r\n\r\n.pokemon {\r\n  width: 20rem;\r\n}\r\n\r\n@media screen and (max-height: 800px) {\r\n  .task-title {\r\n    font-size: 5rem;\r\n    line-height: 6rem;\r\n  }\r\n\r\n\r\n  .pokemon {\r\n    width: 15rem;\r\n  }\r\n\r\n}\r\n\r\n@media screen and (max-width: 780px) {\r\n  .pokemon {\r\n    width: 10rem;\r\n  }\r\n\r\n  .task-title {\r\n    font-size: 5rem;\r\n    line-height: 6rem;\r\n  }\r\n}",".editor {\r\n  display: flex;\r\n  min-width: 80%;\r\n  backdrop-filter: blur(3px);\r\n  box-shadow: 4px 4px 10px 0px rgba(17, 16, 66, 0.5);\r\n  padding: 1rem;\r\n\r\n  &__header {\r\n    background-color: $color-light;\r\n    margin: 0;\r\n    text-align: center;\r\n    color: $color-dark;\r\n  }\r\n}\r\n\r\n#css-editor,\r\n#html-viewer {\r\n  flex: 1 1 50%;\r\n  position: relative;\r\n}\r\n\r\n.cm-editor {\r\n  background-color: $color-light;\r\n  width: 100%;\r\n  height: 30rem;\r\n}\r\n\r\n@keyframes shakeEditor {\r\n  0% {\r\n    transform: translateX(0);\r\n  }\r\n\r\n  20% {\r\n    transform: translateX(-10px);\r\n  }\r\n\r\n  40% {\r\n    transform: translateX(10px);\r\n  }\r\n\r\n  60% {\r\n    transform: translateX(-10px);\r\n  }\r\n\r\n  80% {\r\n    transform: translateX(10px);\r\n  }\r\n\r\n  100% {\r\n    transform: translateX(0);\r\n  }\r\n}\r\n\r\n.shake {\r\n  animation: shakeEditor 0.5s infinite;\r\n}\r\n\r\n.enter-btn {\r\n  position: absolute;\r\n  bottom: 1rem;\r\n  right: 1rem;\r\n  width: 8rem;\r\n  height: 3rem;\r\n}\r\n\r\n@media screen and (max-height: 800px) {\r\n  .cm-editor {\r\n    height: 20rem;\r\n  }\r\n}",'.footer {\r\n  flex-shrink: 0;\r\n\r\n  color: $color-dark;\r\n\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  box-shadow: 0 -1px 10px 5px rgba(17, 16, 66, 0.5);\r\n  backdrop-filter: blur(3px);\r\n}\r\n\r\n.footer__link {\r\n  cursor: pointer;\r\n  @extend %transition;\r\n\r\n\r\n  &:hover {\r\n    transform: scale(1.05);\r\n  }\r\n}\r\n\r\n.github-icon {\r\n  width: 4rem;\r\n  height: 4rem;\r\n  background-image: url("../assets/mystic-logo.png");\r\n  background-size: contain;\r\n}\r\n\r\n.rss-icon {\r\n  width: 8rem;\r\n  height: 4rem;\r\n  background-image: url("../assets/rss.svg");\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\n.footer__year {\r\n  text-shadow: 0px 0px 3px rgba(255, 255, 255, 0.5);\r\n}',".overlay-modal {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  backdrop-filter: blur(3px);\r\n  width: 100%;\r\n  height: 100%;\r\n  position: fixed;\r\n  z-index: -2;\r\n  top: 0;\r\n  left: 0;\r\n  transition: all 0.5s ease;\r\n  opacity: 0;\r\n\r\n  &.active {\r\n    opacity: 1;\r\n    z-index: 2;\r\n  }\r\n}\r\n\r\n.modal {\r\n  width: 70%;\r\n  height: 80vh;\r\n  overflow-y: scroll;\r\n  box-shadow: 4px 4px 10px 0px rgba(17, 16, 66, 0.5);\r\n}\r\n\r\n.modal-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background-color: $color-light;\r\n  padding: 1rem;\r\n}\r\n\r\n.modal-btn-container {\r\n  padding: 2rem;\r\n}\r\n\r\n.modal-btn {\r\n  width: 25rem;\r\n  height: 4rem;\r\n  border: 2px solid $color-dark;\r\n  border-radius: 1rem;\r\n  background-color: transparent;\r\n  @extend %transition;\r\n  cursor: pointer;\r\n  font-size: larger;\r\n}\r\n\r\n.modal-btn:hover {\r\n  background-color: $color-dark;\r\n  color: $color-light;\r\n}\r\n\r\n.modal-content__image {\r\n  padding-top: 1rem;\r\n}\r\n\r\n.modal-content__info {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding-top: 1rem;\r\n  width: 80%;\r\n}\r\n\r\n.modal-content__info-title {\r\n  font-weight: bold;\r\n  font-size: larger;\r\n}\r\n\r\n.modal-content__info-text {\r\n  text-align: justify;\r\n}",".burger {\r\n  display: flex;\r\n  cursor: pointer;\r\n  flex-direction: column;\r\n  height: 22px;\r\n  justify-content: space-between;\r\n  position: fixed;\r\n  top: 35px;\r\n  right: 20px;\r\n  width: 29px;\r\n  z-index: 2;\r\n  transition: all 0.4s ease;\r\n\r\n  .bar {\r\n    width: 100%;\r\n    height: 2px;\r\n    background-color: $color-dark;\r\n  }\r\n\r\n  &.active {\r\n    transform: rotate(90deg) translate(14px, 0);\r\n  }\r\n}\r\n\r\n.nav-links {\r\n  display: flex;\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n\r\n  li {\r\n    margin-bottom: 1rem;\r\n  }\r\n\r\n\r\n  &__item {\r\n    font-size: larger;\r\n    cursor: pointer;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n      color: $color-sky;\r\n      text-decoration: underline;\r\n    }\r\n\r\n    &-active {\r\n      color: $color-sky;\r\n      font-weight: bold;\r\n      padding-bottom: 3px;\r\n      cursor: default;\r\n    }\r\n  }\r\n}\r\n\r\n.menu-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  width: 25rem;\r\n  height: 100%;\r\n  position: fixed;\r\n  right: -25rem;\r\n  top: 0;\r\n  transition: all 0.5s ease;\r\n  z-index: 1;\r\n  background: $color-light;\r\n  padding: 0 5rem;\r\n}\r\n\r\n.menu-container.active {\r\n  right: 0;\r\n  box-shadow: -1px 0px 5px 0px $color-dark;\r\n}\r\n\r\n.menu {\r\n  flex-direction: column;\r\n}\r\n\r\n//Overlay menu\r\n.overlay {\r\n  backdrop-filter: blur(3px);\r\n  width: 100%;\r\n  height: 100%;\r\n  position: fixed;\r\n  z-index: -1;\r\n  top: 0;\r\n  left: 0;\r\n  transition: all 0.5s ease;\r\n  opacity: 0;\r\n\r\n  &.active {\r\n    opacity: 1;\r\n    z-index: 1;\r\n  }\r\n}\r\n\r\n.body-overflow {\r\n  overflow: hidden;\r\n}\r\n\r\n.menu-title {\r\n  text-align: center;\r\n}\r\n\r\n.reset-btn {\r\n  width: 15rem;\r\n  height: 4rem;\r\n  border: 2px solid $color-dark;\r\n  border-radius: 1rem;\r\n  background-color: transparent;\r\n  @extend %transition;\r\n  cursor: pointer;\r\n  font-size: larger;\r\n}\r\n\r\n.reset-btn:hover {\r\n  background-color: $color-dark;\r\n  color: $color-light;\r\n}",".active-image {\r\n  animation: activeAnimation 1s infinite ease-in-out;\r\n}\r\n\r\n@keyframes activeAnimation {\r\n  0% {\r\n    transform: scale(1);\r\n  }\r\n\r\n  50% {\r\n    transform: scale(1.1);\r\n  }\r\n\r\n  100% {\r\n    transform: scale(1);\r\n  }\r\n}\r\n\r\n.active {\r\n  animation-play-state: running;\r\n}\r\n\r\n.tiny {\r\n  width: 10rem;\r\n  margin: 0 2rem;\r\n}\r\n\r\n@media screen and (max-width: 780px) {\r\n  .tiny {\r\n    width: 7rem;\r\n    margin: 0 1rem;\r\n  }\r\n}"],sourceRoot:""}]);const b=f},6314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var i=e(t);return t[2]?"@media ".concat(t[2]," {").concat(i,"}"):i})).join("")},t.i=function(e,i,n){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(n)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(r[s]=!0)}for(var a=0;a<e.length;a++){var l=[].concat(e[a]);n&&r[l[0]]||(i&&(l[2]?l[2]="".concat(i," and ").concat(l[2]):l[2]=i),t.push(l))}},t}},4991:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var i=0,n=new Array(t);i<t;i++)n[i]=e[i];return n}e.exports=function(e){var i,n,r=(n=4,function(e){if(Array.isArray(e))return e}(i=e)||function(e,t){var i=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=i){var n,r,o=[],s=!0,a=!1;try{for(i=i.call(e);!(s=(n=i.next()).done)&&(o.push(n.value),!t||o.length!==t);s=!0);}catch(e){a=!0,r=e}finally{try{s||null==i.return||i.return()}finally{if(a)throw r}}return o}}(i,n)||function(e,i){if(e){if("string"==typeof e)return t(e,i);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?t(e,i):void 0}}(i,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[1],s=r[3];if(!s)return o;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),h="/*# ".concat(l," */"),c=s.sources.map((function(e){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(e," */")}));return[o].concat(c).concat([h]).join("\n")}return[o].join("\n")}},4417:e=>{"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},6412:(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>s});var n=i(5072),r=i.n(n),o=i(5339);r()(o.A,{insert:"head",singleton:!1});const s=o.A.locals||{}},5072:(e,t,i)=>{"use strict";var n,r=function(){var e={};return function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}e[t]=i}return e[t]}}(),o=[];function s(e){for(var t=-1,i=0;i<o.length;i++)if(o[i].identifier===e){t=i;break}return t}function a(e,t){for(var i={},n=[],r=0;r<e.length;r++){var a=e[r],l=t.base?a[0]+t.base:a[0],h=i[l]||0,c="".concat(l," ").concat(h);i[l]=h+1;var d=s(c),u={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(o[d].references++,o[d].updater(u)):o.push({identifier:c,updater:O(u,t),references:1}),n.push(c)}return n}function l(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var o=i.nc;o&&(n.nonce=o)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var s=r(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(t)}return t}var h,c=(h=[],function(e,t){return h[e]=t,h.filter(Boolean).join("\n")});function d(e,t,i,n){var r=i?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=c(t,r);else{var o=document.createTextNode(r),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(o,s[t]):e.appendChild(o)}}function u(e,t,i){var n=i.css,r=i.media,o=i.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var f=null,p=0;function O(e,t){var i,n,r;if(t.singleton){var o=p++;i=f||(f=l(t)),n=d.bind(null,i,o,!1),r=d.bind(null,i,o,!0)}else i=l(t),n=u.bind(null,i,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(i)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n));var i=a(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<i.length;n++){var r=s(i[n]);o[r].references--}for(var l=a(e,t),h=0;h<i.length;h++){var c=s(i[h]);0===o[c].references&&(o[c].updater(),o.splice(c,1))}i=l}}}},8066:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.APP_INVITE_TEXT=t.APP_DESCRIPTION=t.APP_MODAL_TITLE=t.POKEMON_COM_LINK=t.RSS_LINK=t.GITHUB_LINK=void 0,t.GITHUB_LINK="https://github.com/OKitel",t.RSS_LINK="https://rs.school/js/",t.POKEMON_COM_LINK="https://www.pokemon.com/us",t.APP_MODAL_TITLE="🔥 Calling all aspiring trainers and CSS enthusiasts! 🔥",t.APP_DESCRIPTION="Dive into the world of Pokemon and sharpen your web styling abilities in an exciting new way. With this immersive simulator, you'll embark on a breath-catching journey where your CSS selectors are your ultimate Pokemon-catching tools!",t.APP_INVITE_TEXT="Are you ready to take your CSS selector skills to the next level?"},8156:function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),i(6412);const r=i(7331),o=n(i(4183)),s=i(6337),a=n(i(5195)),l=n(i(8249)),h=i(9684),c=n(i(9668));(()=>{const e=document.getElementById("root"),t=document.createElement("div");t.classList.add("container");const i=(0,s.createHeaderView)();t.appendChild(i);const n=(0,l.default)(),h=(0,a.default)(),c=document.createElement("div");c.className="background",c.appendChild(n),c.appendChild(h),t.appendChild(c),e&&e.appendChild(t),(0,r.initMenu)(),"read"!==localStorage.getItem("start")&&(0,o.default)()})();const d=(0,h.getCurrentLevel)();(0,c.default)(d)},4937:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.shakeEditor=t.initHtmlEditor=t.getEditorValue=t.initCssEditor=void 0;const n=i(70),r=i(1506),o=i(2697),s=i(6239),a=i(9684),l=r.keymap.of([{key:"Enter",run:e=>{const t=e.state.doc.toString();return(0,a.checkAnswer)(t),!0},preventDefault:!0}]);let h,c;t.initCssEditor=e=>{h=new n.EditorView({extensions:[l,n.basicSetup,(0,o.css)(),(0,r.placeholder)("Type your CSS here and hit Enter")],parent:e})},t.getEditorValue=()=>h.state.doc.toString(),t.initHtmlEditor=(e,t)=>(c=new n.EditorView({doc:t,extensions:[n.basicSetup,(0,s.html)()],parent:e}),c),t.shakeEditor=()=>{const e=document.querySelector(".editor");e&&(e.classList.add("shake"),setTimeout((()=>{e.classList.remove("shake")}),500))}},5195:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=i(8066);t.default=()=>{const e=document.createElement("footer");e.className="footer";const t=document.createElement("a");t.className="footer__link",t.href=n.GITHUB_LINK,t.target="_blank";const i=document.createElement("div");i.className="github-icon",t.appendChild(i);const r=document.createElement("h3");r.className="footer__year",r.textContent="2023";const o=document.createElement("a");o.className="footer__link",o.href=n.RSS_LINK,o.target="_blank";const s=document.createElement("div");return s.className="rss-icon",o.appendChild(s),e.appendChild(t),e.appendChild(r),e.appendChild(o),e}},6337:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createHeaderView=t.createLogoWithLink=void 0;const n=i(8066);t.createLogoWithLink=()=>{const e=document.createElement("a");e.className="header__link",e.href=n.POKEMON_COM_LINK,e.target="_blank";const t=document.createElement("div");return t.className="header__logo",e.appendChild(t),e},t.createHeaderView=()=>{const e=document.createElement("header");e.className="header";const i=(0,t.createLogoWithLink)(),n=document.createElement("h1");n.className="header__title",n.textContent="CSS League";const r=document.createElement("div");r.className="burger";for(let e=0;e<3;e+=1){const e=document.createElement("div");e.className="bar",r.appendChild(e)}return e.appendChild(i),e.appendChild(n),e.appendChild(r),e}},9684:function(e,t,i){"use strict";var n,r=this&&this.__createBinding||(Object.create?function(e,t,i,n){void 0===n&&(n=i);var r=Object.getOwnPropertyDescriptor(t,i);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,n,r)}:function(e,t,i,n){void 0===n&&(n=i),e[n]=t[i]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||(n=function(e){return n=Object.getOwnPropertyNames||function(e){var t=[];for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[t.length]=i);return t},n(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i=n(e),s=0;s<i.length;s++)"default"!==i[s]&&r(t,e,i[s]);return o(t,e),t}),a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.checkAnswer=t.setLevel=t.getCurrentLevel=t.levels=t.createLevels=void 0;const l=i(8320),h=s(i(7749)),c=a(i(9668)),d=a(i(872)),u=a(i(6376)),f=i(4937),p=a(i(8249)),O=h;t.createLevels=e=>e.levels.map((e=>{const t=(0,l.getPokemonsByIds)(e.pokemons),i=e.correctAnswers.map((({css:e,pokemons:t})=>({css:e,pokemons:(0,l.getPokemonsByIds)(t)}))),n=e.wrongAnswers?.map((({css:e,pokemons:t})=>({css:e,pokemons:(0,l.getPokemonsByIds)(t)})));return{...e,pokemons:t,correctAnswers:i,wrongAnswers:n}})),t.levels=(0,t.createLevels)(O),t.getCurrentLevel=()=>{const e=localStorage.getItem("level")||"0";return t.levels[+e]},t.setLevel=e=>{if(e<t.levels.length){localStorage.setItem("level",`${e}`);const i=t.levels[e];(0,c.default)(i)}else(()=>{const e=document.querySelector(".main");if(e){e.innerHTML="";const i=document.createElement("img");i.src=u.default,i.className="finish",e.appendChild(i),setTimeout((()=>{const i=e.parentElement,n=(0,p.default)();i&&i.replaceChild(n,e),(0,c.default)(t.levels[0])}),3e3)}})()},t.checkAnswer=e=>{const i=(0,t.getCurrentLevel)(),{correctAnswers:n}=i,r=n.find((t=>t.css===e.trim())),o=r?.pokemons,s=i.pokemons.filter((e=>!o?.includes(e)));return o?(document.querySelectorAll(".active-image").forEach((e=>{if(e){const t=e.parentElement,i=(0,d.default)();t&&t.replaceChild(i,e)}})),i.done=!0,setTimeout((()=>(()=>{const e=+(localStorage.getItem("level")||"0");localStorage.setItem(`level ${e}`,"done"),(0,t.setLevel)(e+1)})()),3e3),!0):(s&&(0,f.shakeEditor)(),!1)}},8249:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=i(4937),r=i(9684);t.default=()=>{const e=document.createElement("main");e.className="main";const t=document.createElement("div");t.className="editor";const i=(()=>{const e=document.createElement("div");e.id="css-editor";const t=document.createElement("h3");t.className="editor__header",t.textContent="CSS Editor";const i=document.createElement("div");i.className="css-viewer__container";const o=document.createElement("button");return o.className="enter-btn btn",o.textContent="Enter",o.addEventListener("click",(()=>{const e=(0,n.getEditorValue)();(0,r.checkAnswer)(e)})),e.appendChild(t),e.appendChild(i),e.appendChild(o),e})(),o=(()=>{const e=document.createElement("div");e.id="html-viewer";const t=document.createElement("h3");t.className="editor__header",t.textContent="HTML Viewer";const i=document.createElement("div");return i.className="html-viewer__container",e.appendChild(t),e.appendChild(i),e})();t.appendChild(i),t.appendChild(o);const s=document.createElement("div");return s.className="pokemons",e.appendChild(t),e.appendChild(s),e}},7331:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initMenu=t.createMenu=t.createUl=void 0;const n=i(9684);t.createUl=()=>{const e=document.createElement("ul");return e.className="nav-links menu",n.levels.forEach((({menuTitle:t},i)=>{const r=document.createElement("li"),o=document.createElement("a");o.className="nav-links__item";const s=localStorage.getItem(`level ${i}`)?"✔️":"";o.textContent=`${t} ${s}`,o.addEventListener("click",(()=>{(0,n.setLevel)(i)})),r.appendChild(o),e.appendChild(r)})),e},t.createMenu=()=>{const e=document.createElement("div");e.className="overlay";const i=document.createElement("div");i.className="menu-container";const r=document.createElement("nav"),o=document.createElement("h3");o.className="menu-title",o.textContent="Choose a level";const s=(0,t.createUl)();r.appendChild(o),r.appendChild(s),i.appendChild(r);const a=document.createElement("button");return a.textContent="Reset progress",a.className="reset-btn",a.addEventListener("click",(()=>{localStorage.clear(),(0,n.setLevel)(0)})),i.appendChild(a),e.appendChild(i),e},t.initMenu=()=>{const e=document.getElementById("root");e&&e.appendChild((0,t.createMenu)());const{body:i}=document,n=document.querySelector(".menu-container"),r=document.querySelector(".overlay"),o=document.querySelector(".burger");if(n){const e=Array.from(n.querySelectorAll(".nav-links__item")),t=t=>{const s=t.target;if(s&&o&&r){const t=s.closest(".burger")===o,a=!n.contains(s),l=s===o||t;(a&&!l||e.includes(s))&&(o.classList.remove("active"),r.classList.remove("active"),n.classList.remove("active"),i.classList.remove("body-overflow")),l&&(o.classList.toggle("active"),r.classList.toggle("active"),n.classList.toggle("active"),i.classList.toggle("body-overflow"))}};o&&o.addEventListener("click",t),r&&r.addEventListener("click",t)}}},4183:function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=i(8066),o=n(i(2080)),s=i(6337);t.default=()=>{const e=document.getElementById("root");e&&e.appendChild((()=>{const e=document.createElement("div");e.className="overlay-modal";const t=document.createElement("div");t.className="modal";const i=document.createElement("div");i.className="modal-content";const n=(0,s.createLogoWithLink)(),a=document.createElement("div");a.className="modal-content__image";const l=document.createElement("img");l.src=o.default,a.appendChild(l);const h=(()=>{const e=document.createElement("div");e.className="modal-content__info";const t=document.createElement("h3");t.className="modal-content__info-title",t.textContent=r.APP_MODAL_TITLE;const i=document.createElement("h4");i.className="modal-content__info-text",i.textContent=r.APP_DESCRIPTION;const n=document.createElement("h4");n.className="modal-content__info-text",n.textContent=r.APP_INVITE_TEXT;const o=document.createElement("div");o.className="modal-btn-container";const s=document.createElement("button");return s.className="modal-btn",s.textContent="Start your adventure now!",s.addEventListener("click",(()=>{localStorage.setItem("start","read")})),o.appendChild(s),e.appendChild(t),e.appendChild(i),e.appendChild(n),e.appendChild(o),e})();return i.appendChild(n),i.appendChild(a),i.appendChild(h),t.appendChild(i),e.appendChild(t),e})());const{body:t}=document,i=document.querySelector(".modal-btn"),n=document.querySelector(".overlay-modal"),a=document.querySelector(".modal-content");if(n&&t&&a){n.classList.add("active"),t.classList.add("body-overflow");const e=()=>{t.classList.remove("body-overflow"),n.classList.remove("active")},r=t=>{const n=t.target;(!a.contains(n)||n===i)&&e()};i&&i.addEventListener("click",r),n&&n.addEventListener("click",r)}}},872:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=()=>{const e=document.createElement("div");e.className="pokeball__container";const t=document.createElement("div");t.className="pokeball";const i=document.createElement("div");return i.className="pokeball__button",t.appendChild(i),e.appendChild(t),e}},9668:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=i(4937),r=i(7331);t.default=e=>{(e=>{const t=document.querySelector(".task-title");if(t instanceof HTMLElement)t.innerText=e.title;else{const t=document.querySelector(".main"),i=document.createElement("h2");i.className="task-title",i.innerText=e.title,t&&t.prepend(i)}})(e),(()=>{if(document.querySelector(".editor")){const e=document.querySelector(".css-viewer__container");e instanceof HTMLElement&&(e.innerHTML="",(0,n.initCssEditor)(e))}})(),(e=>{const t=document.querySelector(".html-viewer__container");t instanceof HTMLElement&&(t.innerHTML="",(0,n.initHtmlEditor)(t,e.html))})(e),(e=>{const t=document.querySelector(".pokemons"),i=e.correctAnswers.flatMap((e=>e.pokemons.map((e=>e.id))));if(t){t.innerHTML="";const{pokemons:n}=e;n.forEach((e=>{const n=document.createElement("img");n.src=e.src,n.classList.add("pokemon"),i.includes(e.id)&&n.classList.add("active-image"),e.attrClass&&n.classList.add("tiny"),t.appendChild(n)}))}})(e),(()=>{const e=document.querySelector(".nav-links"),t=(0,r.createUl)();if(e){const i=e.parentElement;i&&i.replaceChild(t,e)}const i=document.querySelectorAll(".nav-links__item");i&&(i.forEach((e=>{e.classList.remove("nav-links__item-active")})),i[+(localStorage.getItem("level")||"0")].classList.add("nav-links__item-active"))})()}},8320:function(e,t,i){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getPokemonsByIds=t.getPokemonById=void 0;const r=n(i(40)),o=n(i(962)),s=n(i(2080)),a=n(i(5756)),l=n(i(130)),h=n(i(8011)),c=n(i(3850)),d=n(i(3139)),u=[new h.default({id:1,name:"pikachu",src:s.default}),new h.default({id:2,name:"bulbasaur",src:o.default}),new h.default({id:3,name:"charmander",src:r.default}),new h.default({id:4,name:"squirtle",src:a.default}),new h.default({id:5,name:"lapras",src:l.default}),new h.default({id:6,name:"charmander",src:c.default}),new h.default({id:7,name:"pikachu",src:d.default}),new h.default({id:8,name:"bulbasaur",src:o.default,attrClass:"tiny"}),new h.default({id:9,name:"charmander",src:r.default,attrClass:"tiny"}),new h.default({id:10,name:"pikachu",src:s.default,attrClass:"tiny"}),new h.default({id:11,name:"pikachu",src:d.default,attrClass:"tiny"}),new h.default({id:12,name:"squirtle",src:a.default,attrClass:"tiny"}),new h.default({id:13,name:"pikachu",src:s.default}),new h.default({id:14,name:"bulbasaur",src:o.default})];t.getPokemonById=e=>u.find((t=>t.id===e)),t.getPokemonsByIds=e=>{const i=[];return e.forEach((e=>{const n=(0,t.getPokemonById)(e);n&&i.push(n)})),i}},8011:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.id=e.id,this.name=e.name,this.src=e.src,this.attrId=e.attrId,this.attrClass=e.attrClass}}},962:(e,t,i)=>{"use strict";e.exports=i.p+"assets/1926caa07921400533e0.png"},40:(e,t,i)=>{"use strict";e.exports=i.p+"assets/8255a116e4b4511f0bee.png"},6376:(e,t,i)=>{"use strict";e.exports=i.p+"assets/15533ffcaf473f8e783e.png"},1910:(e,t,i)=>{"use strict";e.exports=i.p+"assets/6cdc05aae32677ca2885.jpg"},130:(e,t,i)=>{"use strict";e.exports=i.p+"assets/af6cb36e98bf98272255.png"},4836:(e,t,i)=>{"use strict";e.exports=i.p+"assets/5d06da1adc9cfde60042.png"},2080:(e,t,i)=>{"use strict";e.exports=i.p+"assets/b319e26b7c96f39af9d5.png"},8934:(e,t,i)=>{"use strict";e.exports=i.p+"assets/afb67588740de820ff68.png"},4234:(e,t,i)=>{"use strict";e.exports=i.p+"assets/7dac27ebf3179035b223.svg"},3139:(e,t,i)=>{"use strict";e.exports=i.p+"assets/593dab521f3f51f3d5f0.png"},3850:(e,t,i)=>{"use strict";e.exports=i.p+"assets/f9aba7c36583160456fd.png"},5756:(e,t,i)=>{"use strict";e.exports=i.p+"assets/d4d8920e6e64393ba98d.png"},591:(e,t,i)=>{"use strict";var n=i(9064),r=i(1506),o=i(2533);class s{constructor(e,t,i,n){this.state=e,this.pos=t,this.explicit=i,this.view=n,this.abortListeners=[],this.abortOnDocChange=!1}tokenBefore(e){let t=o.syntaxTree(this.state).resolveInner(this.pos,-1);for(;t&&e.indexOf(t.name)<0;)t=t.parent;return t?{from:t.from,to:this.pos,text:this.state.sliceDoc(t.from,this.pos),type:t.type}:null}matchBefore(e){let t=this.state.doc.lineAt(this.pos),i=Math.max(t.from,this.pos-250),n=t.text.slice(i-t.from,this.pos-t.from),r=n.search(d(e,!1));return r<0?null:{from:i+r,to:this.pos,text:n.slice(r)}}get aborted(){return null==this.abortListeners}addEventListener(e,t,i){"abort"==e&&this.abortListeners&&(this.abortListeners.push(t),i&&i.onDocChange&&(this.abortOnDocChange=!0))}}function a(e){let t=Object.keys(e).join(""),i=/\w/.test(t);return i&&(t=t.replace(/\w/g,"")),`[${i?"\\w":""}${t.replace(/[^\w\s]/g,"\\$&")}]`}function l(e){let t=e.map((e=>"string"==typeof e?{label:e}:e)),[i,n]=t.every((e=>/^\w+$/.test(e.label)))?[/\w*$/,/\w+$/]:function(e){let t=Object.create(null),i=Object.create(null);for(let{label:n}of e){t[n[0]]=!0;for(let e=1;e<n.length;e++)i[n[e]]=!0}let n=a(t)+a(i)+"*$";return[new RegExp("^"+n),new RegExp(n)]}(t);return e=>{let r=e.matchBefore(n);return r||e.explicit?{from:r?r.from:e.pos,options:t,validFor:i}:null}}class h{constructor(e,t,i,n){this.completion=e,this.source=t,this.match=i,this.score=n}}function c(e){return e.selection.main.from}function d(e,t){var i;let{source:n}=e,r=t&&"^"!=n[0],o="$"!=n[n.length-1];return r||o?new RegExp(`${r?"^":""}(?:${n})${o?"$":""}`,null!==(i=e.flags)&&void 0!==i?i:e.ignoreCase?"i":""):e}const u=n.Annotation.define();function f(e,t,i,r){let{main:o}=e.selection,s=i-o.from,a=r-o.from;return Object.assign(Object.assign({},e.changeByRange((l=>{if(l!=o&&i!=r&&e.sliceDoc(l.from+s,l.from+a)!=e.sliceDoc(i,r))return{range:l};let h=e.toText(t);return{changes:{from:l.from+s,to:r==o.from?l.to:l.from+a,insert:h},range:n.EditorSelection.cursor(l.from+s+h.length)}}))),{scrollIntoView:!0,userEvent:"input.complete"})}const p=new WeakMap;function O(e){if(!Array.isArray(e))return e;let t=p.get(e);return t||p.set(e,t=l(e)),t}const m=n.StateEffect.define(),g=n.StateEffect.define();class b{constructor(e){this.pattern=e,this.chars=[],this.folded=[],this.any=[],this.precise=[],this.byWord=[],this.score=0,this.matched=[];for(let t=0;t<e.length;){let i=n.codePointAt(e,t),r=n.codePointSize(i);this.chars.push(i);let o=e.slice(t,t+r),s=o.toUpperCase();this.folded.push(n.codePointAt(s==o?o.toLowerCase():s,0)),t+=r}this.astral=e.length!=this.chars.length}ret(e,t){return this.score=e,this.matched=t,this}match(e){if(0==this.pattern.length)return this.ret(-100,[]);if(e.length<this.pattern.length)return null;let{chars:t,folded:i,any:r,precise:o,byWord:s}=this;if(1==t.length){let r=n.codePointAt(e,0),o=n.codePointSize(r),s=o==e.length?0:-100;if(r==t[0]);else{if(r!=i[0])return null;s+=-200}return this.ret(s,[0,o])}let a=e.indexOf(this.pattern);if(0==a)return this.ret(e.length==this.pattern.length?0:-100,[0,this.pattern.length]);let l=t.length,h=0;if(a<0){for(let o=0,s=Math.min(e.length,200);o<s&&h<l;){let s=n.codePointAt(e,o);s!=t[h]&&s!=i[h]||(r[h++]=o),o+=n.codePointSize(s)}if(h<l)return null}let c=0,d=0,u=!1,f=0,p=-1,O=-1,m=/[a-z]/.test(e),g=!0;for(let r=0,h=Math.min(e.length,200),b=0;r<h&&d<l;){let h=n.codePointAt(e,r);a<0&&(c<l&&h==t[c]&&(o[c++]=r),f<l&&(h==t[f]||h==i[f]?(0==f&&(p=r),O=r+1,f++):f=0));let w,y=h<255?h>=48&&h<=57||h>=97&&h<=122?2:h>=65&&h<=90?1:0:(w=n.fromCodePoint(h))!=w.toLowerCase()?1:w!=w.toUpperCase()?2:0;(!r||1==y&&m||0==b&&0!=y)&&(t[d]==h||i[d]==h&&(u=!0)?s[d++]=r:s.length&&(g=!1)),b=y,r+=n.codePointSize(h)}return d==l&&0==s[0]&&g?this.result((u?-200:0)-100,s,e):f==l&&0==p?this.ret(-200-e.length+(O==e.length?0:-100),[0,O]):a>-1?this.ret(-700-e.length,[a,a+this.pattern.length]):f==l?this.ret(-900-e.length,[p,O]):d==l?this.result((u?-200:0)-100-700+(g?0:-1100),s,e):2==t.length?null:this.result((r[0]?-700:0)-200-1100,r,e)}result(e,t,i){let r=[],o=0;for(let e of t){let t=e+(this.astral?n.codePointSize(n.codePointAt(i,e)):1);o&&r[o-1]==e?r[o-1]=t:(r[o++]=e,r[o++]=t)}return this.ret(e-i.length,r)}}class w{constructor(e){this.pattern=e,this.matched=[],this.score=0,this.folded=e.toLowerCase()}match(e){if(e.length<this.pattern.length)return null;let t=e.slice(0,this.pattern.length),i=t==this.pattern?0:t.toLowerCase()==this.folded?-200:null;return null==i?null:(this.matched=[0,t.length],this.score=i+(e.length==this.pattern.length?0:-100),this)}}const y=n.Facet.define({combine:e=>n.combineConfig(e,{activateOnTyping:!0,activateOnCompletion:()=>!1,activateOnTypingDelay:100,selectOnOpen:!0,override:null,closeOnBlur:!0,maxRenderedOptions:100,defaultKeymap:!0,tooltipClass:()=>"",optionClass:()=>"",aboveCursor:!1,icons:!0,addToOptions:[],positionInfo:x,filterStrict:!1,compareCompletions:(e,t)=>e.label.localeCompare(t.label),interactionDelay:75,updateSyncTime:100},{defaultKeymap:(e,t)=>e&&t,closeOnBlur:(e,t)=>e&&t,icons:(e,t)=>e&&t,tooltipClass:(e,t)=>i=>v(e(i),t(i)),optionClass:(e,t)=>i=>v(e(i),t(i)),addToOptions:(e,t)=>e.concat(t),filterStrict:(e,t)=>e||t})});function v(e,t){return e?t?e+" "+t:e:t}function x(e,t,i,n,o,s){let a,l,h=e.textDirection==r.Direction.RTL,c=h,d=!1,u="top",f=t.left-o.left,p=o.right-t.right,O=n.right-n.left,m=n.bottom-n.top;if(c&&f<Math.min(O,p)?c=!1:!c&&p<Math.min(O,f)&&(c=!0),O<=(c?f:p))a=Math.max(o.top,Math.min(i.top,o.bottom-m))-t.top,l=Math.min(400,c?f:p);else{d=!0,l=Math.min(400,(h?t.right:o.right-t.left)-30);let e=o.bottom-t.bottom;e>=m||e>t.top?a=i.bottom-t.top:(u="bottom",a=t.bottom-i.top)}return{style:`${u}: ${a/((t.bottom-t.top)/s.offsetHeight)}px; max-width: ${l/((t.right-t.left)/s.offsetWidth)}px`,class:"cm-completionInfo-"+(d?h?"left-narrow":"right-narrow":c?"left":"right")}}function S(e,t,i){if(e<=i)return{from:0,to:e};if(t<0&&(t=0),t<=e>>1){let e=Math.floor(t/i);return{from:e*i,to:(e+1)*i}}let n=Math.floor((e-t)/i);return{from:e-(n+1)*i,to:e-n*i}}class k{constructor(e,t,i){this.view=e,this.stateField=t,this.applyCompletion=i,this.info=null,this.infoDestroy=null,this.placeInfoReq={read:()=>this.measureInfo(),write:e=>this.placeInfo(e),key:this},this.space=null,this.currentClass="";let n=e.state.field(t),{options:r,selected:o}=n.open,s=e.state.facet(y);this.optionContent=function(e){let t=e.addToOptions.slice();return e.icons&&t.push({render(e){let t=document.createElement("div");return t.classList.add("cm-completionIcon"),e.type&&t.classList.add(...e.type.split(/\s+/g).map((e=>"cm-completionIcon-"+e))),t.setAttribute("aria-hidden","true"),t},position:20}),t.push({render(e,t,i,n){let r=document.createElement("span");r.className="cm-completionLabel";let o=e.displayLabel||e.label,s=0;for(let e=0;e<n.length;){let t=n[e++],i=n[e++];t>s&&r.appendChild(document.createTextNode(o.slice(s,t)));let a=r.appendChild(document.createElement("span"));a.appendChild(document.createTextNode(o.slice(t,i))),a.className="cm-completionMatchedText",s=i}return s<o.length&&r.appendChild(document.createTextNode(o.slice(s))),r},position:50},{render(e){if(!e.detail)return null;let t=document.createElement("span");return t.className="cm-completionDetail",t.textContent=e.detail,t},position:80}),t.sort(((e,t)=>e.position-t.position)).map((e=>e.render))}(s),this.optionClass=s.optionClass,this.tooltipClass=s.tooltipClass,this.range=S(r.length,o,s.maxRenderedOptions),this.dom=document.createElement("div"),this.dom.className="cm-tooltip-autocomplete",this.updateTooltipClass(e.state),this.dom.addEventListener("mousedown",(i=>{let{options:n}=e.state.field(t).open;for(let t,r=i.target;r&&r!=this.dom;r=r.parentNode)if("LI"==r.nodeName&&(t=/-(\d+)$/.exec(r.id))&&+t[1]<n.length)return this.applyCompletion(e,n[+t[1]]),void i.preventDefault()})),this.dom.addEventListener("focusout",(t=>{let i=e.state.field(this.stateField,!1);i&&i.tooltip&&e.state.facet(y).closeOnBlur&&t.relatedTarget!=e.contentDOM&&e.dispatch({effects:g.of(null)})})),this.showOptions(r,n.id)}mount(){this.updateSel()}showOptions(e,t){this.list&&this.list.remove(),this.list=this.dom.appendChild(this.createListBox(e,t,this.range)),this.list.addEventListener("scroll",(()=>{this.info&&this.view.requestMeasure(this.placeInfoReq)}))}update(e){var t;let i=e.state.field(this.stateField),n=e.startState.field(this.stateField);if(this.updateTooltipClass(e.state),i!=n){let{options:r,selected:o,disabled:s}=i.open;n.open&&n.open.options==r||(this.range=S(r.length,o,e.state.facet(y).maxRenderedOptions),this.showOptions(r,i.id)),this.updateSel(),s!=(null===(t=n.open)||void 0===t?void 0:t.disabled)&&this.dom.classList.toggle("cm-tooltip-autocomplete-disabled",!!s)}}updateTooltipClass(e){let t=this.tooltipClass(e);if(t!=this.currentClass){for(let e of this.currentClass.split(" "))e&&this.dom.classList.remove(e);for(let e of t.split(" "))e&&this.dom.classList.add(e);this.currentClass=t}}positioned(e){this.space=e,this.info&&this.view.requestMeasure(this.placeInfoReq)}updateSel(){let e=this.view.state.field(this.stateField),t=e.open;if((t.selected>-1&&t.selected<this.range.from||t.selected>=this.range.to)&&(this.range=S(t.options.length,t.selected,this.view.state.facet(y).maxRenderedOptions),this.showOptions(t.options,e.id)),this.updateSelectedOption(t.selected)){this.destroyInfo();let{completion:i}=t.options[t.selected],{info:n}=i;if(!n)return;let o="string"==typeof n?document.createTextNode(n):n(i);if(!o)return;"then"in o?o.then((t=>{t&&this.view.state.field(this.stateField,!1)==e&&this.addInfoPane(t,i)})).catch((e=>r.logException(this.view.state,e,"completion info"))):this.addInfoPane(o,i)}}addInfoPane(e,t){this.destroyInfo();let i=this.info=document.createElement("div");if(i.className="cm-tooltip cm-completionInfo",null!=e.nodeType)i.appendChild(e),this.infoDestroy=null;else{let{dom:t,destroy:n}=e;i.appendChild(t),this.infoDestroy=n||null}this.dom.appendChild(i),this.view.requestMeasure(this.placeInfoReq)}updateSelectedOption(e){let t=null;for(let i=this.list.firstChild,n=this.range.from;i;i=i.nextSibling,n++)"LI"==i.nodeName&&i.id?n==e?i.hasAttribute("aria-selected")||(i.setAttribute("aria-selected","true"),t=i):i.hasAttribute("aria-selected")&&i.removeAttribute("aria-selected"):n--;return t&&function(e,t){let i=e.getBoundingClientRect(),n=t.getBoundingClientRect(),r=i.height/e.offsetHeight;n.top<i.top?e.scrollTop-=(i.top-n.top)/r:n.bottom>i.bottom&&(e.scrollTop+=(n.bottom-i.bottom)/r)}(this.list,t),t}measureInfo(){let e=this.dom.querySelector("[aria-selected]");if(!e||!this.info)return null;let t=this.dom.getBoundingClientRect(),i=this.info.getBoundingClientRect(),n=e.getBoundingClientRect(),r=this.space;if(!r){let e=this.dom.ownerDocument.defaultView||window;r={left:0,top:0,right:e.innerWidth,bottom:e.innerHeight}}return n.top>Math.min(r.bottom,t.bottom)-10||n.bottom<Math.max(r.top,t.top)+10?null:this.view.state.facet(y).positionInfo(this.view,t,n,i,r,this.dom)}placeInfo(e){this.info&&(e?(e.style&&(this.info.style.cssText=e.style),this.info.className="cm-tooltip cm-completionInfo "+(e.class||"")):this.info.style.cssText="top: -1e6px")}createListBox(e,t,i){const n=document.createElement("ul");n.id=t,n.setAttribute("role","listbox"),n.setAttribute("aria-expanded","true"),n.setAttribute("aria-label",this.view.state.phrase("Completions"));let r=null;for(let o=i.from;o<i.to;o++){let{completion:s,match:a}=e[o],{section:l}=s;if(l){let e="string"==typeof l?l:l.name;e!=r&&(o>i.from||0==i.from)&&(r=e,"string"!=typeof l&&l.header?n.appendChild(l.header(l)):n.appendChild(document.createElement("completion-section")).textContent=e)}const h=n.appendChild(document.createElement("li"));h.id=t+"-"+o,h.setAttribute("role","option");let c=this.optionClass(s);c&&(h.className=c);for(let e of this.optionContent){let t=e(s,this.view.state,this.view,a);t&&h.appendChild(t)}}return i.from&&n.classList.add("cm-completionListIncompleteTop"),i.to<e.length&&n.classList.add("cm-completionListIncompleteBottom"),n}destroyInfo(){this.info&&(this.infoDestroy&&this.infoDestroy(),this.info.remove(),this.info=null)}destroy(){this.destroyInfo()}}function A(e){return 100*(e.boost||0)+(e.apply?10:0)+(e.info?5:0)+(e.type?1:0)}class Q{constructor(e,t,i,n,r,o){this.options=e,this.attrs=t,this.tooltip=i,this.timestamp=n,this.selected=r,this.disabled=o}setSelected(e,t){return e==this.selected||e>=this.options.length?this:new Q(this.options,Z(t,e),this.tooltip,this.timestamp,e,this.disabled)}static build(e,t,i,n,r,o){if(n&&!o&&e.some((e=>e.isPending)))return n.setDisabled();let s=function(e,t){let i=[],n=null,r=e=>{i.push(e);let{section:t}=e.completion;if(t){n||(n=[]);let e="string"==typeof t?t:t.name;n.some((t=>t.name==e))||n.push("string"==typeof t?{name:e}:t)}},o=t.facet(y);for(let n of e)if(n.hasResult()){let e=n.result.getMatch;if(!1===n.result.filter)for(let t of n.result.options)r(new h(t,n.source,e?e(t):[],1e9-i.length));else{let i,s=t.sliceDoc(n.from,n.to),a=o.filterStrict?new w(s):new b(s);for(let t of n.result.options)if(i=a.match(t.label)){let o=t.displayLabel?e?e(t,i.matched):[]:i.matched;r(new h(t,n.source,o,i.score+(t.boost||0)))}}}if(n){let e=Object.create(null),t=0,r=(e,t)=>{var i,n;return(null!==(i=e.rank)&&void 0!==i?i:1e9)-(null!==(n=t.rank)&&void 0!==n?n:1e9)||(e.name<t.name?-1:1)};for(let i of n.sort(r))t-=1e5,e[i.name]=t;for(let t of i){let{section:i}=t.completion;i&&(t.score+=e["string"==typeof i?i:i.name])}}let s=[],a=null,l=o.compareCompletions;for(let e of i.sort(((e,t)=>t.score-e.score||l(e.completion,t.completion)))){let t=e.completion;!a||a.label!=t.label||a.detail!=t.detail||null!=a.type&&null!=t.type&&a.type!=t.type||a.apply!=t.apply||a.boost!=t.boost?s.push(e):A(e.completion)>A(a)&&(s[s.length-1]=e),a=e.completion}return s}(e,t);if(!s.length)return n&&e.some((e=>e.isPending))?n.setDisabled():null;let a=t.facet(y).selectOnOpen?0:-1;if(n&&n.selected!=a&&-1!=n.selected){let e=n.options[n.selected].completion;for(let t=0;t<s.length;t++)if(s[t].completion==e){a=t;break}}return new Q(s,Z(i,a),{pos:e.reduce(((e,t)=>t.hasResult()?Math.min(e,t.from):e),1e8),create:B,above:r.aboveCursor},n?n.timestamp:Date.now(),a,!1)}map(e){return new Q(this.options,this.attrs,Object.assign(Object.assign({},this.tooltip),{pos:e.mapPos(this.tooltip.pos)}),this.timestamp,this.selected,this.disabled)}setDisabled(){return new Q(this.options,this.attrs,this.tooltip,this.timestamp,this.selected,!0)}}class P{constructor(e,t,i){this.active=e,this.id=t,this.open=i}static start(){return new P(T,"cm-ac-"+Math.floor(2e6*Math.random()).toString(36),null)}update(e){let{state:t}=e,i=t.facet(y),n=(i.override||t.languageDataAt("autocomplete",c(t)).map(O)).map((t=>(this.active.find((e=>e.source==t))||new E(t,this.active.some((e=>0!=e.state))?1:0)).update(e,i)));n.length==this.active.length&&n.every(((e,t)=>e==this.active[t]))&&(n=this.active);let r=this.open,o=e.effects.some((e=>e.is(R)));r&&e.docChanged&&(r=r.map(e.changes)),e.selection||n.some((t=>t.hasResult()&&e.changes.touchesRange(t.from,t.to)))||!function(e,t){if(e==t)return!0;for(let i=0,n=0;;){for(;i<e.length&&!e[i].hasResult();)i++;for(;n<t.length&&!t[n].hasResult();)n++;let r=i==e.length,o=n==t.length;if(r||o)return r==o;if(e[i++].result!=t[n++].result)return!1}}(n,this.active)||o?r=Q.build(n,t,this.id,r,i,o):r&&r.disabled&&!n.some((e=>e.isPending))&&(r=null),!r&&n.every((e=>!e.isPending))&&n.some((e=>e.hasResult()))&&(n=n.map((e=>e.hasResult()?new E(e.source,0):e)));for(let t of e.effects)t.is(_)&&(r=r&&r.setSelected(t.value,this.id));return n==this.active&&r==this.open?this:new P(n,this.id,r)}get tooltip(){return this.open?this.open.tooltip:null}get attrs(){return this.open?this.open.attrs:this.active.length?C:$}}const C={"aria-autocomplete":"list"},$={};function Z(e,t){let i={"aria-autocomplete":"list","aria-haspopup":"listbox","aria-controls":e};return t>-1&&(i["aria-activedescendant"]=e+"-"+t),i}const T=[];function M(e,t){if(e.isUserEvent("input.complete")){let i=e.annotation(u);if(i&&t.activateOnCompletion(i))return 12}let i=e.isUserEvent("input.type");return i&&t.activateOnTyping?5:i?1:e.isUserEvent("delete.backward")?2:e.selection?8:e.docChanged?16:0}class E{constructor(e,t,i=!1){this.source=e,this.state=t,this.explicit=i}hasResult(){return!1}get isPending(){return 1==this.state}update(e,t){let i=M(e,t),n=this;(8&i||16&i&&this.touches(e))&&(n=new E(n.source,0)),4&i&&0==n.state&&(n=new E(this.source,1)),n=n.updateFor(e,i);for(let t of e.effects)if(t.is(m))n=new E(n.source,1,t.value);else if(t.is(g))n=new E(n.source,0);else if(t.is(R))for(let e of t.value)e.source==n.source&&(n=e);return n}updateFor(e,t){return this.map(e.changes)}map(e){return this}touches(e){return e.changes.touchesRange(c(e.state))}}class X extends E{constructor(e,t,i,n,r,o){super(e,3,t),this.limit=i,this.result=n,this.from=r,this.to=o}hasResult(){return!0}updateFor(e,t){var i;if(!(3&t))return this.map(e.changes);let n=this.result;n.map&&!e.changes.empty&&(n=n.map(n,e.changes));let r=e.changes.mapPos(this.from),o=e.changes.mapPos(this.to,1),a=c(e.state);if(a>o||!n||2&t&&(c(e.startState)==this.from||a<this.limit))return new E(this.source,4&t?1:0);let l=e.changes.mapPos(this.limit);return function(e,t,i,n){if(!e)return!1;let r=t.sliceDoc(i,n);return"function"==typeof e?e(r,i,n,t):d(e,!0).test(r)}(n.validFor,e.state,r,o)?new X(this.source,this.explicit,l,n,r,o):n.update&&(n=n.update(n,r,o,new s(e.state,a,!1)))?new X(this.source,this.explicit,l,n,n.from,null!==(i=n.to)&&void 0!==i?i:c(e.state)):new E(this.source,1,this.explicit)}map(e){return e.empty?this:(this.result.map?this.result.map(this.result,e):this.result)?new X(this.source,this.explicit,e.mapPos(this.limit),this.result,e.mapPos(this.from),e.mapPos(this.to,1)):new E(this.source,0)}touches(e){return e.changes.touchesRange(this.from,this.to)}}const R=n.StateEffect.define({map:(e,t)=>e.map((e=>e.map(t)))}),_=n.StateEffect.define(),V=n.StateField.define({create:()=>P.start(),update:(e,t)=>e.update(t),provide:e=>[r.showTooltip.from(e,(e=>e.tooltip)),r.EditorView.contentAttributes.from(e,(e=>e.attrs))]});function q(e,t){const i=t.completion.apply||t.completion.label;let n=e.state.field(V).active.find((e=>e.source==t.source));return n instanceof X&&("string"==typeof i?e.dispatch(Object.assign(Object.assign({},f(e.state,i,n.from,n.to)),{annotations:u.of(t.completion)})):i(e,t.completion,n.from,n.to),!0)}const B=function(e,t){return i=>new k(i,e,t)}(V,q);function D(e,t="option"){return i=>{let n=i.state.field(V,!1);if(!n||!n.open||n.open.disabled||Date.now()-n.open.timestamp<i.state.facet(y).interactionDelay)return!1;let o,s=1;"page"==t&&(o=r.getTooltip(i,n.open.tooltip))&&(s=Math.max(2,Math.floor(o.dom.offsetHeight/o.dom.querySelector("li").offsetHeight)-1));let{length:a}=n.open.options,l=n.open.selected>-1?n.open.selected+s*(e?1:-1):e?0:a-1;return l<0?l="page"==t?0:a-1:l>=a&&(l="page"==t?a-1:0),i.dispatch({effects:_.of(l)}),!0}}const z=e=>{let t=e.state.field(V,!1);return!(e.state.readOnly||!t||!t.open||t.open.selected<0||t.open.disabled||Date.now()-t.open.timestamp<e.state.facet(y).interactionDelay)&&q(e,t.open.options[t.open.selected])},L=e=>!!e.state.field(V,!1)&&(e.dispatch({effects:m.of(!0)}),!0),j=e=>{let t=e.state.field(V,!1);return!(!t||!t.active.some((e=>0!=e.state))||(e.dispatch({effects:g.of(null)}),0))};class W{constructor(e,t){this.active=e,this.context=t,this.time=Date.now(),this.updates=[],this.done=void 0}}const Y=r.ViewPlugin.fromClass(class{constructor(e){this.view=e,this.debounceUpdate=-1,this.running=[],this.debounceAccept=-1,this.pendingStart=!1,this.composing=0;for(let t of e.state.field(V).active)t.isPending&&this.startQuery(t)}update(e){let t=e.state.field(V),i=e.state.facet(y);if(!e.selectionSet&&!e.docChanged&&e.startState.field(V)==t)return;let n=e.transactions.some((e=>{let t=M(e,i);return 8&t||(e.selection||e.docChanged)&&!(3&t)}));for(let t=0;t<this.running.length;t++){let i=this.running[t];if(n||i.context.abortOnDocChange&&e.docChanged||i.updates.length+e.transactions.length>50&&Date.now()-i.time>1e3){for(let e of i.context.abortListeners)try{e()}catch(e){r.logException(this.view.state,e)}i.context.abortListeners=null,this.running.splice(t--,1)}else i.updates.push(...e.transactions)}this.debounceUpdate>-1&&clearTimeout(this.debounceUpdate),e.transactions.some((e=>e.effects.some((e=>e.is(m)))))&&(this.pendingStart=!0);let o=this.pendingStart?50:i.activateOnTypingDelay;if(this.debounceUpdate=t.active.some((e=>e.isPending&&!this.running.some((t=>t.active.source==e.source))))?setTimeout((()=>this.startUpdate()),o):-1,0!=this.composing)for(let t of e.transactions)t.isUserEvent("input.type")?this.composing=2:2==this.composing&&t.selection&&(this.composing=3)}startUpdate(){this.debounceUpdate=-1,this.pendingStart=!1;let{state:e}=this.view,t=e.field(V);for(let e of t.active)e.isPending&&!this.running.some((t=>t.active.source==e.source))&&this.startQuery(e);this.running.length&&t.open&&t.open.disabled&&(this.debounceAccept=setTimeout((()=>this.accept()),this.view.state.facet(y).updateSyncTime))}startQuery(e){let{state:t}=this.view,i=c(t),n=new s(t,i,e.explicit,this.view),o=new W(e,n);this.running.push(o),Promise.resolve(e.source(n)).then((e=>{o.context.aborted||(o.done=e||null,this.scheduleAccept())}),(e=>{this.view.dispatch({effects:g.of(null)}),r.logException(this.view.state,e)}))}scheduleAccept(){this.running.every((e=>void 0!==e.done))?this.accept():this.debounceAccept<0&&(this.debounceAccept=setTimeout((()=>this.accept()),this.view.state.facet(y).updateSyncTime))}accept(){var e;this.debounceAccept>-1&&clearTimeout(this.debounceAccept),this.debounceAccept=-1;let t=[],i=this.view.state.facet(y),n=this.view.state.field(V);for(let r=0;r<this.running.length;r++){let o=this.running[r];if(void 0===o.done)continue;if(this.running.splice(r--,1),o.done){let n=c(o.updates.length?o.updates[0].startState:this.view.state),r=Math.min(n,o.done.from+(o.active.explicit?0:1)),s=new X(o.active.source,o.active.explicit,r,o.done,o.done.from,null!==(e=o.done.to)&&void 0!==e?e:n);for(let e of o.updates)s=s.update(e,i);if(s.hasResult()){t.push(s);continue}}let s=n.active.find((e=>e.source==o.active.source));if(s&&s.isPending)if(null==o.done){let e=new E(o.active.source,0);for(let t of o.updates)e=e.update(t,i);e.isPending||t.push(e)}else this.startQuery(s)}(t.length||n.open&&n.open.disabled)&&this.view.dispatch({effects:R.of(t)})}},{eventHandlers:{blur(e){let t=this.view.state.field(V,!1);if(t&&t.tooltip&&this.view.state.facet(y).closeOnBlur){let i=t.open&&r.getTooltip(this.view,t.open.tooltip);i&&i.dom.contains(e.relatedTarget)||setTimeout((()=>this.view.dispatch({effects:g.of(null)})),10)}},compositionstart(){this.composing=1},compositionend(){3==this.composing&&setTimeout((()=>this.view.dispatch({effects:m.of(!1)})),20),this.composing=0}}}),I="object"==typeof navigator&&/Win/.test(navigator.platform),G=n.Prec.highest(r.EditorView.domEventHandlers({keydown(e,t){let i=t.state.field(V,!1);if(!i||!i.open||i.open.disabled||i.open.selected<0||e.key.length>1||e.ctrlKey&&(!I||!e.altKey)||e.metaKey)return!1;let n=i.open.options[i.open.selected],r=i.active.find((e=>e.source==n.source)),o=n.completion.commitCharacters||r.result.commitCharacters;return o&&o.indexOf(e.key)>-1&&q(t,n),!1}})),U=r.EditorView.baseTheme({".cm-tooltip.cm-tooltip-autocomplete":{"& > ul":{fontFamily:"monospace",whiteSpace:"nowrap",overflow:"hidden auto",maxWidth_fallback:"700px",maxWidth:"min(700px, 95vw)",minWidth:"250px",maxHeight:"10em",height:"100%",listStyle:"none",margin:0,padding:0,"& > li, & > completion-section":{padding:"1px 3px",lineHeight:1.2},"& > li":{overflowX:"hidden",textOverflow:"ellipsis",cursor:"pointer"},"& > completion-section":{display:"list-item",borderBottom:"1px solid silver",paddingLeft:"0.5em",opacity:.7}}},"&light .cm-tooltip-autocomplete ul li[aria-selected]":{background:"#17c",color:"white"},"&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]":{background:"#777"},"&dark .cm-tooltip-autocomplete ul li[aria-selected]":{background:"#347",color:"white"},"&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]":{background:"#444"},".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after":{content:'"···"',opacity:.5,display:"block",textAlign:"center"},".cm-tooltip.cm-completionInfo":{position:"absolute",padding:"3px 9px",width:"max-content",maxWidth:"400px",boxSizing:"border-box",whiteSpace:"pre-line"},".cm-completionInfo.cm-completionInfo-left":{right:"100%"},".cm-completionInfo.cm-completionInfo-right":{left:"100%"},".cm-completionInfo.cm-completionInfo-left-narrow":{right:"30px"},".cm-completionInfo.cm-completionInfo-right-narrow":{left:"30px"},"&light .cm-snippetField":{backgroundColor:"#00000022"},"&dark .cm-snippetField":{backgroundColor:"#ffffff22"},".cm-snippetFieldPosition":{verticalAlign:"text-top",width:0,height:"1.15em",display:"inline-block",margin:"0 -0.7px -.7em",borderLeft:"1.4px dotted #888"},".cm-completionMatchedText":{textDecoration:"underline"},".cm-completionDetail":{marginLeft:"0.5em",fontStyle:"italic"},".cm-completionIcon":{fontSize:"90%",width:".8em",display:"inline-block",textAlign:"center",paddingRight:".6em",opacity:"0.6",boxSizing:"content-box"},".cm-completionIcon-function, .cm-completionIcon-method":{"&:after":{content:"'ƒ'"}},".cm-completionIcon-class":{"&:after":{content:"'○'"}},".cm-completionIcon-interface":{"&:after":{content:"'◌'"}},".cm-completionIcon-variable":{"&:after":{content:"'𝑥'"}},".cm-completionIcon-constant":{"&:after":{content:"'𝐶'"}},".cm-completionIcon-type":{"&:after":{content:"'𝑡'"}},".cm-completionIcon-enum":{"&:after":{content:"'∪'"}},".cm-completionIcon-property":{"&:after":{content:"'□'"}},".cm-completionIcon-keyword":{"&:after":{content:"'🔑︎'"}},".cm-completionIcon-namespace":{"&:after":{content:"'▢'"}},".cm-completionIcon-text":{"&:after":{content:"'abc'",fontSize:"50%",verticalAlign:"middle"}}});class N{constructor(e,t,i,n){this.field=e,this.line=t,this.from=i,this.to=n}}class F{constructor(e,t,i){this.field=e,this.from=t,this.to=i}map(e){let t=e.mapPos(this.from,-1,n.MapMode.TrackDel),i=e.mapPos(this.to,1,n.MapMode.TrackDel);return null==t||null==i?null:new F(this.field,t,i)}}class H{constructor(e,t){this.lines=e,this.fieldPositions=t}instantiate(e,t){let i=[],n=[t],r=e.doc.lineAt(t),s=/^\s*/.exec(r.text)[0];for(let r of this.lines){if(i.length){let i=s,a=/^\t*/.exec(r)[0].length;for(let t=0;t<a;t++)i+=e.facet(o.indentUnit);n.push(t+i.length-a),r=i+r.slice(a)}i.push(r),t+=r.length+1}let a=this.fieldPositions.map((e=>new F(e.field,n[e.line]+e.from,n[e.line]+e.to)));return{text:i,ranges:a}}static parse(e){let t,i=[],n=[],r=[];for(let o of e.split(/\r\n?|\n/)){for(;t=/[#$]\{(?:(\d+)(?::([^}]*))?|((?:\\[{}]|[^}])*))\}/.exec(o);){let e=t[1]?+t[1]:null,s=t[2]||t[3]||"",a=-1,l=s.replace(/\\[{}]/g,(e=>e[1]));for(let t=0;t<i.length;t++)(null!=e?i[t].seq==e:l&&i[t].name==l)&&(a=t);if(a<0){let t=0;for(;t<i.length&&(null==e||null!=i[t].seq&&i[t].seq<e);)t++;i.splice(t,0,{seq:e,name:l}),a=t;for(let e of r)e.field>=a&&e.field++}r.push(new N(a,n.length,t.index,t.index+l.length)),o=o.slice(0,t.index)+s+o.slice(t.index+t[0].length)}o=o.replace(/\\([{}])/g,((e,t,i)=>{for(let e of r)e.line==n.length&&e.from>i&&(e.from--,e.to--);return t})),n.push(o)}return new H(n,r)}}let K=r.Decoration.widget({widget:new class extends r.WidgetType{toDOM(){let e=document.createElement("span");return e.className="cm-snippetFieldPosition",e}ignoreEvent(){return!1}}}),J=r.Decoration.mark({class:"cm-snippetField"});class ee{constructor(e,t){this.ranges=e,this.active=t,this.deco=r.Decoration.set(e.map((e=>(e.from==e.to?K:J).range(e.from,e.to))))}map(e){let t=[];for(let i of this.ranges){let n=i.map(e);if(!n)return null;t.push(n)}return new ee(t,this.active)}selectionInsideField(e){return e.ranges.every((e=>this.ranges.some((t=>t.field==this.active&&t.from<=e.from&&t.to>=e.to))))}}const te=n.StateEffect.define({map:(e,t)=>e&&e.map(t)}),ie=n.StateEffect.define(),ne=n.StateField.define({create:()=>null,update(e,t){for(let i of t.effects){if(i.is(te))return i.value;if(i.is(ie)&&e)return new ee(e.ranges,i.value)}return e&&t.docChanged&&(e=e.map(t.changes)),e&&t.selection&&!e.selectionInsideField(t.selection)&&(e=null),e},provide:e=>r.EditorView.decorations.from(e,(e=>e?e.deco:r.Decoration.none))});function re(e,t){return n.EditorSelection.create(e.filter((e=>e.field==t)).map((e=>n.EditorSelection.range(e.from,e.to))))}function oe(e){let t=H.parse(e);return(e,i,r,o)=>{let{text:s,ranges:a}=t.instantiate(e.state,r),l={changes:{from:r,to:o,insert:n.Text.of(s)},scrollIntoView:!0,annotations:i?[u.of(i),n.Transaction.userEvent.of("input.complete")]:void 0};if(a.length&&(l.selection=re(a,0)),a.some((e=>e.field>0))){let t=new ee(a,0),i=l.effects=[te.of(t)];void 0===e.state.field(ne,!1)&&i.push(n.StateEffect.appendConfig.of([ne,ue,fe,U]))}e.dispatch(e.state.update(l))}}function se(e){return({state:t,dispatch:i})=>{let n=t.field(ne,!1);if(!n||e<0&&0==n.active)return!1;let r=n.active+e,o=e>0&&!n.ranges.some((t=>t.field==r+e));return i(t.update({selection:re(n.ranges,r),effects:te.of(o?null:new ee(n.ranges,r)),scrollIntoView:!0})),!0}}const ae=({state:e,dispatch:t})=>!!e.field(ne,!1)&&(t(e.update({effects:te.of(null)})),!0),le=se(1),he=se(-1),ce=[{key:"Tab",run:le,shift:he},{key:"Escape",run:ae}],de=n.Facet.define({combine:e=>e.length?e[0]:ce}),ue=n.Prec.highest(r.keymap.compute([de],(e=>e.facet(de)))),fe=r.EditorView.domEventHandlers({mousedown(e,t){let i,n=t.state.field(ne,!1);if(!n||null==(i=t.posAtCoords({x:e.clientX,y:e.clientY})))return!1;let r=n.ranges.find((e=>e.from<=i&&e.to>=i));return!(!r||r.field==n.active||(t.dispatch({selection:re(n.ranges,r.field),effects:te.of(n.ranges.some((e=>e.field>r.field))?new ee(n.ranges,r.field):null),scrollIntoView:!0}),0))}});function pe(e,t){return new RegExp(t(e.source),e.unicode?"u":"")}const Oe=Object.create(null);function me(e,t,i,n,r){for(let o=e.iterLines(),s=0;!o.next().done;){let e,{value:a}=o;for(t.lastIndex=0;e=t.exec(a);)if(!n[e[0]]&&s+e.index!=r&&(i.push({type:"text",label:e[0]}),n[e[0]]=!0,i.length>=2e3))return;s+=a.length+1}}function ge(e,t,i,n,r){let o=e.length>=1e3,s=o&&t.get(e);if(s)return s;let a=[],l=Object.create(null);if(e.children){let o=0;for(let s of e.children){if(s.length>=1e3)for(let e of ge(s,t,i,n-o,r-o))l[e.label]||(l[e.label]=!0,a.push(e));else me(s,i,a,l,r-o);o+=s.length+1}}else me(e,i,a,l,r);return o&&a.length<2e3&&t.set(e,a),a}const be={brackets:["(","[","{","'",'"'],before:")]}:;>",stringPrefixes:[]},we=n.StateEffect.define({map(e,t){let i=t.mapPos(e,-1,n.MapMode.TrackAfter);return null==i?void 0:i}}),ye=new class extends n.RangeValue{};ye.startSide=1,ye.endSide=-1;const ve=n.StateField.define({create:()=>n.RangeSet.empty,update(e,t){if(e=e.map(t.changes),t.selection){let i=t.state.doc.lineAt(t.selection.main.head);e=e.update({filter:e=>e>=i.from&&e<=i.to})}for(let i of t.effects)i.is(we)&&(e=e.update({add:[ye.range(i.value,i.value+1)]}));return e}}),xe="()[]{}<>";function Se(e){for(let t=0;t<8;t+=2)if(xe.charCodeAt(t)==e)return xe.charAt(t+1);return n.fromCodePoint(e<128?e:e+1)}function ke(e,t){return e.languageDataAt("closeBrackets",t)[0]||be}const Ae="object"==typeof navigator&&/Android\b/.test(navigator.userAgent),Qe=r.EditorView.inputHandler.of(((e,t,i,r)=>{if((Ae?e.composing:e.compositionStarted)||e.state.readOnly)return!1;let o=e.state.selection.main;if(r.length>2||2==r.length&&1==n.codePointSize(n.codePointAt(r,0))||t!=o.from||i!=o.to)return!1;let s=$e(e.state,r);return!!s&&(e.dispatch(s),!0)})),Pe=({state:e,dispatch:t})=>{if(e.readOnly)return!1;let i=ke(e,e.selection.main.head).brackets||be.brackets,r=null,o=e.changeByRange((t=>{if(t.empty){let r=function(e,t){let i=e.sliceString(t-2,t);return n.codePointSize(n.codePointAt(i,0))==i.length?i:i.slice(1)}(e.doc,t.head);for(let o of i)if(o==r&&Te(e.doc,t.head)==Se(n.codePointAt(o,0)))return{changes:{from:t.head-o.length,to:t.head+o.length},range:n.EditorSelection.cursor(t.head-o.length)}}return{range:r=t}}));return r||t(e.update(o,{scrollIntoView:!0,userEvent:"delete.backward"})),!r},Ce=[{key:"Backspace",run:Pe}];function $e(e,t){let i=ke(e,e.selection.main.head),r=i.brackets||be.brackets;for(let o of r){let s=Se(n.codePointAt(o,0));if(t==o)return s==o?Xe(e,o,r.indexOf(o+o+o)>-1,i):Me(e,o,s,i.before||be.before);if(t==s&&Ze(e,e.selection.main.from))return Ee(e,0,s)}return null}function Ze(e,t){let i=!1;return e.field(ve).between(0,e.doc.length,(e=>{e==t&&(i=!0)})),i}function Te(e,t){let i=e.sliceString(t,t+2);return i.slice(0,n.codePointSize(n.codePointAt(i,0)))}function Me(e,t,i,r){let o=null,s=e.changeByRange((s=>{if(!s.empty)return{changes:[{insert:t,from:s.from},{insert:i,from:s.to}],effects:we.of(s.to+t.length),range:n.EditorSelection.range(s.anchor+t.length,s.head+t.length)};let a=Te(e.doc,s.head);return!a||/\s/.test(a)||r.indexOf(a)>-1?{changes:{insert:t+i,from:s.head},effects:we.of(s.head+t.length),range:n.EditorSelection.cursor(s.head+t.length)}:{range:o=s}}));return o?null:e.update(s,{scrollIntoView:!0,userEvent:"input.type"})}function Ee(e,t,i){let r=null,o=e.changeByRange((t=>t.empty&&Te(e.doc,t.head)==i?{changes:{from:t.head,to:t.head+i.length,insert:i},range:n.EditorSelection.cursor(t.head+i.length)}:r={range:t}));return r?null:e.update(o,{scrollIntoView:!0,userEvent:"input.type"})}function Xe(e,t,i,r){let s=r.stringPrefixes||be.stringPrefixes,a=null,l=e.changeByRange((r=>{if(!r.empty)return{changes:[{insert:t,from:r.from},{insert:t,from:r.to}],effects:we.of(r.to+t.length),range:n.EditorSelection.range(r.anchor+t.length,r.head+t.length)};let l,h=r.head,c=Te(e.doc,h);if(c==t){if(Re(e,h))return{changes:{insert:t+t,from:h},effects:we.of(h+t.length),range:n.EditorSelection.cursor(h+t.length)};if(Ze(e,h)){let r=i&&e.sliceDoc(h,h+3*t.length)==t+t+t?t+t+t:t;return{changes:{from:h,to:h+r.length,insert:r},range:n.EditorSelection.cursor(h+r.length)}}}else{if(i&&e.sliceDoc(h-2*t.length,h)==t+t&&(l=_e(e,h-2*t.length,s))>-1&&Re(e,l))return{changes:{insert:t+t+t+t,from:h},effects:we.of(h+t.length),range:n.EditorSelection.cursor(h+t.length)};if(e.charCategorizer(h)(c)!=n.CharCategory.Word&&_e(e,h,s)>-1&&!function(e,t,i,n){let r=o.syntaxTree(e).resolveInner(t,-1),s=n.reduce(((e,t)=>Math.max(e,t.length)),0);for(let o=0;o<5;o++){let o=e.sliceDoc(r.from,Math.min(r.to,r.from+i.length+s)),a=o.indexOf(i);if(!a||a>-1&&n.indexOf(o.slice(0,a))>-1){let t=r.firstChild;for(;t&&t.from==r.from&&t.to-t.from>i.length+a;){if(e.sliceDoc(t.to-i.length,t.to)==i)return!1;t=t.firstChild}return!0}let l=r.to==t&&r.parent;if(!l)break;r=l}return!1}(e,h,t,s))return{changes:{insert:t+t,from:h},effects:we.of(h+t.length),range:n.EditorSelection.cursor(h+t.length)}}return{range:a=r}}));return a?null:e.update(l,{scrollIntoView:!0,userEvent:"input.type"})}function Re(e,t){let i=o.syntaxTree(e).resolveInner(t+1);return i.parent&&i.from==t}function _e(e,t,i){let r=e.charCategorizer(t);if(r(e.sliceDoc(t-1,t))!=n.CharCategory.Word)return t;for(let o of i){let i=t-o.length;if(e.sliceDoc(i,t)==o&&r(e.sliceDoc(i-1,i))!=n.CharCategory.Word)return i}return-1}const Ve=[{key:"Ctrl-Space",run:L},{mac:"Alt-`",run:L},{key:"Escape",run:j},{key:"ArrowDown",run:D(!0)},{key:"ArrowUp",run:D(!1)},{key:"PageDown",run:D(!0,"page")},{key:"PageUp",run:D(!1,"page")},{key:"Enter",run:z}],qe=n.Prec.highest(r.keymap.computeN([y],(e=>e.facet(y).defaultKeymap?[Ve]:[]))),Be=new WeakMap;t.CompletionContext=s,t.acceptCompletion=z,t.autocompletion=function(e={}){return[G,V,y.of(e),Y,qe,U]},t.clearSnippet=ae,t.closeBrackets=function(){return[Qe,ve]},t.closeBracketsKeymap=Ce,t.closeCompletion=j,t.completeAnyWord=e=>{let t=e.state.languageDataAt("wordChars",e.pos).join(""),i=function(e){let t=e.replace(/[\]\-\\]/g,"\\$&");try{return new RegExp(`[\\p{Alphabetic}\\p{Number}_${t}]+`,"ug")}catch(e){return new RegExp(`[w${t}]`,"g")}}(t),n=e.matchBefore(pe(i,(e=>e+"$")));if(!n&&!e.explicit)return null;let r=n?n.from:e.pos,o=ge(e.state.doc,function(e){return Oe[e]||(Oe[e]=new WeakMap)}(t),i,5e4,r);return{from:r,options:o,validFor:pe(i,(e=>"^"+e))}},t.completeFromList=l,t.completionKeymap=Ve,t.completionStatus=function(e){let t=e.field(V,!1);return t&&t.active.some((e=>e.isPending))?"pending":t&&t.active.some((e=>0!=e.state))?"active":null},t.currentCompletions=function(e){var t;let i=null===(t=e.field(V,!1))||void 0===t?void 0:t.open;if(!i||i.disabled)return[];let n=Be.get(i.options);return n||Be.set(i.options,n=i.options.map((e=>e.completion))),n},t.deleteBracketPair=Pe,t.hasNextSnippetField=function(e){let t=e.field(ne,!1);return!(!t||!t.ranges.some((e=>e.field==t.active+1)))},t.hasPrevSnippetField=function(e){let t=e.field(ne,!1);return!!(t&&t.active>0)},t.ifIn=function(e,t){return i=>{for(let n=o.syntaxTree(i.state).resolveInner(i.pos,-1);n;n=n.parent){if(e.indexOf(n.name)>-1)return t(i);if(n.type.isTop)break}return null}},t.ifNotIn=function(e,t){return i=>{for(let t=o.syntaxTree(i.state).resolveInner(i.pos,-1);t;t=t.parent){if(e.indexOf(t.name)>-1)return null;if(t.type.isTop)break}return t(i)}},t.insertBracket=$e,t.insertCompletionText=f,t.moveCompletionSelection=D,t.nextSnippetField=le,t.pickedCompletion=u,t.prevSnippetField=he,t.selectedCompletion=function(e){var t;let i=null===(t=e.field(V,!1))||void 0===t?void 0:t.open;return i&&!i.disabled&&i.selected>=0?i.options[i.selected].completion:null},t.selectedCompletionIndex=function(e){var t;let i=null===(t=e.field(V,!1))||void 0===t?void 0:t.open;return i&&!i.disabled&&i.selected>=0?i.selected:null},t.setSelectedCompletion=function(e){return _.of(e)},t.snippet=oe,t.snippetCompletion=function(e,t){return Object.assign(Object.assign({},t),{apply:oe(e)})},t.snippetKeymap=de,t.startCompletion=L},9277:(e,t,i)=>{"use strict";var n=i(9064),r=i(1506),o=i(2533),s=i(2696);const a=e=>{let{state:t}=e,i=t.doc.lineAt(t.selection.main.from),n=m(e.state,i.from);return n.line?h(e):!!n.block&&O(e)};function l(e,t){return({state:i,dispatch:n})=>{if(i.readOnly)return!1;let r=e(t,i);return!!r&&(n(i.update(r)),!0)}}const h=l(w,0),c=l(w,1),d=l(w,2),u=l(b,0),f=l(b,1),p=l(b,2),O=l(((e,t)=>b(e,t,function(e){let t=[];for(let i of e.selection.ranges){let n=e.doc.lineAt(i.from),r=i.to<=n.to?n:e.doc.lineAt(i.to);r.from>n.from&&r.from==i.to&&(r=i.to==n.to+1?n:e.doc.lineAt(i.to-1));let o=t.length-1;o>=0&&t[o].to>n.from?t[o].to=r.to:t.push({from:n.from+/^\s*/.exec(n.text)[0].length,to:r.to})}return t}(t))),0);function m(e,t){let i=e.languageDataAt("commentTokens",t);return i.length?i[0]:{}}const g=50;function b(e,t,i=t.selection.ranges){let n=i.map((e=>m(t,e.from).block));if(!n.every((e=>e)))return null;let r=i.map(((e,i)=>function(e,{open:t,close:i},n,r){let o,s,a=e.sliceDoc(n-g,n),l=e.sliceDoc(r,r+g),h=/\s*$/.exec(a)[0].length,c=/^\s*/.exec(l)[0].length,d=a.length-h;if(a.slice(d-t.length,d)==t&&l.slice(c,c+i.length)==i)return{open:{pos:n-h,margin:h&&1},close:{pos:r+c,margin:c&&1}};r-n<=2*g?o=s=e.sliceDoc(n,r):(o=e.sliceDoc(n,n+g),s=e.sliceDoc(r-g,r));let u=/^\s*/.exec(o)[0].length,f=/\s*$/.exec(s)[0].length,p=s.length-f-i.length;return o.slice(u,u+t.length)==t&&s.slice(p,p+i.length)==i?{open:{pos:n+u+t.length,margin:/\s/.test(o.charAt(u+t.length))?1:0},close:{pos:r-f-i.length,margin:/\s/.test(s.charAt(p-1))?1:0}}:null}(t,n[i],e.from,e.to)));if(2!=e&&!r.every((e=>e)))return{changes:t.changes(i.map(((e,t)=>r[t]?[]:[{from:e.from,insert:n[t].open+" "},{from:e.to,insert:" "+n[t].close}])))};if(1!=e&&r.some((e=>e))){let e=[];for(let t,i=0;i<r.length;i++)if(t=r[i]){let r=n[i],{open:o,close:s}=t;e.push({from:o.pos-r.open.length,to:o.pos+o.margin},{from:s.pos-s.margin,to:s.pos+r.close.length})}return{changes:e}}return null}function w(e,t,i=t.selection.ranges){let n=[],r=-1;for(let{from:e,to:o}of i){let i=n.length,s=1e9,a=m(t,e).line;if(a){for(let i=e;i<=o;){let l=t.doc.lineAt(i);if(l.from>r&&(e==o||o>l.from)){r=l.from;let e=/^\s*/.exec(l.text)[0].length,t=e==l.length,i=l.text.slice(e,e+a.length)==a?e:-1;e<l.text.length&&e<s&&(s=e),n.push({line:l,comment:i,token:a,indent:e,empty:t,single:!1})}i=l.to+1}if(s<1e9)for(let e=i;e<n.length;e++)n[e].indent<n[e].line.text.length&&(n[e].indent=s);n.length==i+1&&(n[i].single=!0)}}if(2!=e&&n.some((e=>e.comment<0&&(!e.empty||e.single)))){let e=[];for(let{line:t,token:i,indent:r,empty:o,single:s}of n)!s&&o||e.push({from:t.from+r,insert:i+" "});let i=t.changes(e);return{changes:i,selection:t.selection.map(i,1)}}if(1!=e&&n.some((e=>e.comment>=0))){let e=[];for(let{line:t,comment:i,token:r}of n)if(i>=0){let n=t.from+i,o=n+r.length;" "==t.text[o-t.from]&&o++,e.push({from:n,to:o})}return{changes:e}}return null}const y=n.Annotation.define(),v=n.Annotation.define(),x=n.Facet.define(),S=n.Facet.define({combine:e=>n.combineConfig(e,{minDepth:100,newGroupDelay:500,joinToEvent:(e,t)=>t},{minDepth:Math.max,newGroupDelay:Math.min,joinToEvent:(e,t)=>(i,n)=>e(i,n)||t(i,n)})}),k=n.StateField.define({create:()=>W.empty,update(e,t){let i=t.state.facet(S),r=t.annotation(y);if(r){let n=X.fromTransaction(t,r.selection),o=r.side,s=0==o?e.undone:e.done;return s=n?R(s,s.length,i.minDepth,n):B(s,t.startState.selection),new W(0==o?r.rest:s,0==o?s:r.rest)}let o=t.annotation(v);if("full"!=o&&"before"!=o||(e=e.isolate()),!1===t.annotation(n.Transaction.addToHistory))return t.changes.empty?e:e.addMapping(t.changes.desc);let s=X.fromTransaction(t),a=t.annotation(n.Transaction.time),l=t.annotation(n.Transaction.userEvent);return s?e=e.addChanges(s,a,l,i,t):t.selection&&(e=e.addSelection(t.startState.selection,a,l,i.newGroupDelay)),"full"!=o&&"after"!=o||(e=e.isolate()),e},toJSON:e=>({done:e.done.map((e=>e.toJSON())),undone:e.undone.map((e=>e.toJSON()))}),fromJSON:e=>new W(e.done.map(X.fromJSON),e.undone.map(X.fromJSON))}),A=k;function Q(e,t){return function({state:i,dispatch:n}){if(!t&&i.readOnly)return!1;let r=i.field(k,!1);if(!r)return!1;let o=r.pop(e,i,t);return!!o&&(n(o),!0)}}const P=Q(0,!1),C=Q(1,!1),$=Q(0,!0),Z=Q(1,!0);function T(e){return function(t){let i=t.field(k,!1);if(!i)return 0;let n=0==e?i.done:i.undone;return n.length-(n.length&&!n[0].changes?1:0)}}const M=T(0),E=T(1);class X{constructor(e,t,i,n,r){this.changes=e,this.effects=t,this.mapped=i,this.startSelection=n,this.selectionsAfter=r}setSelAfter(e){return new X(this.changes,this.effects,this.mapped,this.startSelection,e)}toJSON(){var e,t,i;return{changes:null===(e=this.changes)||void 0===e?void 0:e.toJSON(),mapped:null===(t=this.mapped)||void 0===t?void 0:t.toJSON(),startSelection:null===(i=this.startSelection)||void 0===i?void 0:i.toJSON(),selectionsAfter:this.selectionsAfter.map((e=>e.toJSON()))}}static fromJSON(e){return new X(e.changes&&n.ChangeSet.fromJSON(e.changes),[],e.mapped&&n.ChangeDesc.fromJSON(e.mapped),e.startSelection&&n.EditorSelection.fromJSON(e.startSelection),e.selectionsAfter.map(n.EditorSelection.fromJSON))}static fromTransaction(e,t){let i=V;for(let t of e.startState.facet(x)){let n=t(e);n.length&&(i=i.concat(n))}return!i.length&&e.changes.empty?null:new X(e.changes.invert(e.startState.doc),i,void 0,t||e.startState.selection,V)}static selection(e){return new X(void 0,V,void 0,void 0,e)}}function R(e,t,i,n){let r=t+1>i+20?t-i-1:0,o=e.slice(r,t);return o.push(n),o}function _(e,t){return e.length?t.length?e.concat(t):e:t}const V=[],q=200;function B(e,t){if(e.length){let i=e[e.length-1],n=i.selectionsAfter.slice(Math.max(0,i.selectionsAfter.length-q));return n.length&&n[n.length-1].eq(t)?e:(n.push(t),R(e,e.length-1,1e9,i.setSelAfter(n)))}return[X.selection([t])]}function D(e){let t=e[e.length-1],i=e.slice();return i[e.length-1]=t.setSelAfter(t.selectionsAfter.slice(0,t.selectionsAfter.length-1)),i}function z(e,t){if(!e.length)return e;let i=e.length,n=V;for(;i;){let r=L(e[i-1],t,n);if(r.changes&&!r.changes.empty||r.effects.length){let t=e.slice(0,i);return t[i-1]=r,t}t=r.mapped,i--,n=r.selectionsAfter}return n.length?[X.selection(n)]:V}function L(e,t,i){let r=_(e.selectionsAfter.length?e.selectionsAfter.map((e=>e.map(t))):V,i);if(!e.changes)return X.selection(r);let o=e.changes.map(t),s=t.mapDesc(e.changes,!0),a=e.mapped?e.mapped.composeDesc(s):s;return new X(o,n.StateEffect.mapEffects(e.effects,t),a,e.startSelection.map(s),r)}const j=/^(input\.type|delete)($|\.)/;class W{constructor(e,t,i=0,n=void 0){this.done=e,this.undone=t,this.prevTime=i,this.prevUserEvent=n}isolate(){return this.prevTime?new W(this.done,this.undone):this}addChanges(e,t,i,r,o){let s=this.done,a=s[s.length-1];return s=a&&a.changes&&!a.changes.empty&&e.changes&&(!i||j.test(i))&&(!a.selectionsAfter.length&&t-this.prevTime<r.newGroupDelay&&r.joinToEvent(o,function(e,t){let i=[],n=!1;return e.iterChangedRanges(((e,t)=>i.push(e,t))),t.iterChangedRanges(((e,t,r,o)=>{for(let e=0;e<i.length;){let t=i[e++],s=i[e++];o>=t&&r<=s&&(n=!0)}})),n}(a.changes,e.changes))||"input.type.compose"==i)?R(s,s.length-1,r.minDepth,new X(e.changes.compose(a.changes),_(n.StateEffect.mapEffects(e.effects,a.changes),a.effects),a.mapped,a.startSelection,V)):R(s,s.length,r.minDepth,e),new W(s,V,t,i)}addSelection(e,t,i,n){let r=this.done.length?this.done[this.done.length-1].selectionsAfter:V;return r.length>0&&t-this.prevTime<n&&i==this.prevUserEvent&&i&&/^select($|\.)/.test(i)&&(o=r[r.length-1],s=e,o.ranges.length==s.ranges.length&&0===o.ranges.filter(((e,t)=>e.empty!=s.ranges[t].empty)).length)?this:new W(B(this.done,e),this.undone,t,i);var o,s}addMapping(e){return new W(z(this.done,e),z(this.undone,e),this.prevTime,this.prevUserEvent)}pop(e,t,i){let n=0==e?this.done:this.undone;if(0==n.length)return null;let r=n[n.length-1],o=r.selectionsAfter[0]||t.selection;if(i&&r.selectionsAfter.length)return t.update({selection:r.selectionsAfter[r.selectionsAfter.length-1],annotations:y.of({side:e,rest:D(n),selection:o}),userEvent:0==e?"select.undo":"select.redo",scrollIntoView:!0});if(r.changes){let i=1==n.length?V:n.slice(0,n.length-1);return r.mapped&&(i=z(i,r.mapped)),t.update({changes:r.changes,selection:r.startSelection,effects:r.effects,annotations:y.of({side:e,rest:i,selection:o}),filter:!1,userEvent:0==e?"undo":"redo",scrollIntoView:!0})}return null}}W.empty=new W(V,V);const Y=[{key:"Mod-z",run:P,preventDefault:!0},{key:"Mod-y",mac:"Mod-Shift-z",run:C,preventDefault:!0},{linux:"Ctrl-Shift-z",run:C,preventDefault:!0},{key:"Mod-u",run:$,preventDefault:!0},{key:"Alt-u",mac:"Mod-Shift-u",run:Z,preventDefault:!0}];function I(e,t){return n.EditorSelection.create(e.ranges.map(t),e.mainIndex)}function G(e,t){return e.update({selection:t,scrollIntoView:!0,userEvent:"select"})}function U({state:e,dispatch:t},i){let n=I(e.selection,i);return!n.eq(e.selection,!0)&&(t(G(e,n)),!0)}function N(e,t){return n.EditorSelection.cursor(t?e.to:e.from)}function F(e,t){return U(e,(i=>i.empty?e.moveByChar(i,t):N(i,t)))}function H(e){return e.textDirectionAt(e.state.selection.main.head)==r.Direction.LTR}const K=e=>F(e,!H(e)),J=e=>F(e,H(e));function ee(e,t,i){let r=t.head,o=e.doc.lineAt(r);return r=r==(i?o.to:o.from)?i?Math.min(e.doc.length,o.to+1):Math.max(0,o.from-1):o.from+n.findClusterBreak(o.text,r-o.from,i),n.EditorSelection.cursor(r,i?-1:1)}function te(e,t){return U(e,(i=>i.empty?ee(e.state,i,t):N(i,t)))}function ie(e,t){return U(e,(i=>i.empty?e.moveByGroup(i,t):N(i,t)))}const ne=e=>ie(e,!H(e)),re=e=>ie(e,H(e)),oe="undefined"!=typeof Intl&&Intl.Segmenter?new Intl.Segmenter(void 0,{granularity:"word"}):null;function se(e,t,i){let r=e.state.charCategorizer(t.from),o=n.CharCategory.Space,s=t.from,a=0,l=!1,h=!1,c=!1,d=t=>{if(l)return!1;s+=i?t.length:-t.length;let d,u=r(t);if(u==n.CharCategory.Word&&t.charCodeAt(0)<128&&/[\W_]/.test(t)&&(u=-1),o==n.CharCategory.Space&&(o=u),o!=u)return!1;if(o==n.CharCategory.Word)if(t.toLowerCase()==t){if(!i&&h)return!1;c=!0}else if(c){if(i)return!1;l=!0}else{if(h&&i&&r(d=e.state.sliceDoc(s,s+1))==n.CharCategory.Word&&d.toLowerCase()==d)return!1;h=!0}return a++,!0},u=e.moveByChar(t,i,(e=>(d(e),d)));if(oe&&o==n.CharCategory.Word&&u.from==t.from+a*(i?1:-1)){let r=Math.min(t.head,u.head),o=Math.max(t.head,u.head),s=e.state.sliceDoc(r,o);if(s.length>1&&/[\u4E00-\uffff]/.test(s)){let e=Array.from(oe.segment(s));if(e.length>1)return i?n.EditorSelection.cursor(t.head+e[1].index,-1):n.EditorSelection.cursor(u.head+e[e.length-1].index,1)}}return u}function ae(e,t){return U(e,(i=>i.empty?se(e,i,t):N(i,t)))}function le(e,t,i){if(t.type.prop(i))return!0;let n=t.to-t.from;return n&&(n>2||/[^\s,.;:]/.test(e.sliceDoc(t.from,t.to)))||t.firstChild}function he(e,t,i){let r,a,l=o.syntaxTree(e).resolveInner(t.head),h=i?s.NodeProp.closedBy:s.NodeProp.openedBy;for(let n=t.head;;){let t=i?l.childAfter(n):l.childBefore(n);if(!t)break;le(e,t,h)?l=t:n=i?t.to:t.from}return a=l.type.prop(h)&&(r=i?o.matchBrackets(e,l.from,1):o.matchBrackets(e,l.to,-1))&&r.matched?i?r.end.to:r.end.from:i?l.to:l.from,n.EditorSelection.cursor(a,i?-1:1)}const ce=e=>U(e,(t=>he(e.state,t,!H(e)))),de=e=>U(e,(t=>he(e.state,t,H(e))));function ue(e,t){return U(e,(i=>{if(!i.empty)return N(i,t);let n=e.moveVertically(i,t);return n.head!=i.head?n:e.moveToLineBoundary(i,t)}))}const fe=e=>ue(e,!1),pe=e=>ue(e,!0);function Oe(e){let t,i=e.scrollDOM.clientHeight<e.scrollDOM.scrollHeight-2,n=0,o=0;if(i){for(let t of e.state.facet(r.EditorView.scrollMargins)){let i=t(e);(null==i?void 0:i.top)&&(n=Math.max(null==i?void 0:i.top,n)),(null==i?void 0:i.bottom)&&(o=Math.max(null==i?void 0:i.bottom,o))}t=e.scrollDOM.clientHeight-n-o}else t=(e.dom.ownerDocument.defaultView||window).innerHeight;return{marginTop:n,marginBottom:o,selfScroll:i,height:Math.max(e.defaultLineHeight,t-5)}}function me(e,t){let i,n=Oe(e),{state:o}=e,s=I(o.selection,(i=>i.empty?e.moveVertically(i,t,n.height):N(i,t)));if(s.eq(o.selection))return!1;if(n.selfScroll){let t=e.coordsAtPos(o.selection.main.head),a=e.scrollDOM.getBoundingClientRect(),l=a.top+n.marginTop,h=a.bottom-n.marginBottom;t&&t.top>l&&t.bottom<h&&(i=r.EditorView.scrollIntoView(s.main.head,{y:"start",yMargin:t.top-l}))}return e.dispatch(G(o,s),{effects:i}),!0}const ge=e=>me(e,!1),be=e=>me(e,!0);function we(e,t,i){let r=e.lineBlockAt(t.head),o=e.moveToLineBoundary(t,i);if(o.head==t.head&&o.head!=(i?r.to:r.from)&&(o=e.moveToLineBoundary(t,i,!1)),!i&&o.head==r.from&&r.length){let i=/^\s*/.exec(e.state.sliceDoc(r.from,Math.min(r.from+100,r.to)))[0].length;i&&t.head!=r.from+i&&(o=n.EditorSelection.cursor(r.from+i))}return o}const ye=e=>U(e,(t=>we(e,t,!0))),ve=e=>U(e,(t=>we(e,t,!1))),xe=e=>U(e,(t=>we(e,t,!H(e)))),Se=e=>U(e,(t=>we(e,t,H(e)))),ke=e=>U(e,(t=>n.EditorSelection.cursor(e.lineBlockAt(t.head).from,1))),Ae=e=>U(e,(t=>n.EditorSelection.cursor(e.lineBlockAt(t.head).to,-1)));function Qe(e,t,i){let r=!1,s=I(e.selection,(t=>{let s=o.matchBrackets(e,t.head,-1)||o.matchBrackets(e,t.head,1)||t.head>0&&o.matchBrackets(e,t.head-1,1)||t.head<e.doc.length&&o.matchBrackets(e,t.head+1,-1);if(!s||!s.end)return t;r=!0;let a=s.start.from==t.head?s.end.to:s.end.from;return i?n.EditorSelection.range(t.anchor,a):n.EditorSelection.cursor(a)}));return!!r&&(t(G(e,s)),!0)}const Pe=({state:e,dispatch:t})=>Qe(e,t,!1);function Ce(e,t){let i=I(e.state.selection,(e=>{let i=t(e);return n.EditorSelection.range(e.anchor,i.head,i.goalColumn,i.bidiLevel||void 0)}));return!i.eq(e.state.selection)&&(e.dispatch(G(e.state,i)),!0)}function $e(e,t){return Ce(e,(i=>e.moveByChar(i,t)))}const Ze=e=>$e(e,!H(e)),Te=e=>$e(e,H(e));function Me(e,t){return Ce(e,(i=>e.moveByGroup(i,t)))}const Ee=e=>Me(e,!H(e)),Xe=e=>Me(e,H(e));function Re(e,t){return Ce(e,(i=>se(e,i,t)))}const _e=e=>Ce(e,(t=>he(e.state,t,!H(e)))),Ve=e=>Ce(e,(t=>he(e.state,t,H(e))));function qe(e,t){return Ce(e,(i=>e.moveVertically(i,t)))}const Be=e=>qe(e,!1),De=e=>qe(e,!0);function ze(e,t){return Ce(e,(i=>e.moveVertically(i,t,Oe(e).height)))}const Le=e=>ze(e,!1),je=e=>ze(e,!0),We=e=>Ce(e,(t=>we(e,t,!0))),Ye=e=>Ce(e,(t=>we(e,t,!1))),Ie=e=>Ce(e,(t=>we(e,t,!H(e)))),Ge=e=>Ce(e,(t=>we(e,t,H(e)))),Ue=e=>Ce(e,(t=>n.EditorSelection.cursor(e.lineBlockAt(t.head).from))),Ne=e=>Ce(e,(t=>n.EditorSelection.cursor(e.lineBlockAt(t.head).to))),Fe=({state:e,dispatch:t})=>(t(G(e,{anchor:0})),!0),He=({state:e,dispatch:t})=>(t(G(e,{anchor:e.doc.length})),!0),Ke=({state:e,dispatch:t})=>(t(G(e,{anchor:e.selection.main.anchor,head:0})),!0),Je=({state:e,dispatch:t})=>(t(G(e,{anchor:e.selection.main.anchor,head:e.doc.length})),!0),et=({state:e,dispatch:t})=>(t(e.update({selection:{anchor:0,head:e.doc.length},userEvent:"select"})),!0),tt=({state:e,dispatch:t})=>{let i=gt(e).map((({from:t,to:i})=>n.EditorSelection.range(t,Math.min(i+1,e.doc.length))));return t(e.update({selection:n.EditorSelection.create(i),userEvent:"select"})),!0},it=({state:e,dispatch:t})=>{let i=I(e.selection,(t=>{let i=o.syntaxTree(e),r=i.resolveStack(t.from,1);if(t.empty){let e=i.resolveStack(t.from,-1);e.node.from>=r.node.from&&e.node.to<=r.node.to&&(r=e)}for(let e=r;e;e=e.next){let{node:i}=e;if((i.from<t.from&&i.to>=t.to||i.to>t.to&&i.from<=t.from)&&e.next)return n.EditorSelection.range(i.to,i.from)}return t}));return!i.eq(e.selection)&&(t(G(e,i)),!0)},nt=({state:e,dispatch:t})=>{let i=e.selection,r=null;return i.ranges.length>1?r=n.EditorSelection.create([i.main]):i.main.empty||(r=n.EditorSelection.create([n.EditorSelection.cursor(i.main.head)])),!!r&&(t(G(e,r)),!0)};function rt(e,t){if(e.state.readOnly)return!1;let i="delete.selection",{state:o}=e,s=o.changeByRange((r=>{let{from:o,to:s}=r;if(o==s){let n=t(r);n<o?(i="delete.backward",n=ot(e,n,!1)):n>o&&(i="delete.forward",n=ot(e,n,!0)),o=Math.min(o,n),s=Math.max(s,n)}else o=ot(e,o,!1),s=ot(e,s,!0);return o==s?{range:r}:{changes:{from:o,to:s},range:n.EditorSelection.cursor(o,o<r.head?-1:1)}}));return!s.changes.empty&&(e.dispatch(o.update(s,{scrollIntoView:!0,userEvent:i,effects:"delete.selection"==i?r.EditorView.announce.of(o.phrase("Selection deleted")):void 0})),!0)}function ot(e,t,i){if(e instanceof r.EditorView)for(let n of e.state.facet(r.EditorView.atomicRanges).map((t=>t(e))))n.between(t,t,((e,n)=>{e<t&&n>t&&(t=i?n:e)}));return t}const st=(e,t,i)=>rt(e,(r=>{let s,a,l=r.from,{state:h}=e,c=h.doc.lineAt(l);if(i&&!t&&l>c.from&&l<c.from+200&&!/[^ \t]/.test(s=c.text.slice(0,l-c.from))){if("\t"==s[s.length-1])return l-1;let e=n.countColumn(s,h.tabSize)%o.getIndentUnit(h)||o.getIndentUnit(h);for(let t=0;t<e&&" "==s[s.length-1-t];t++)l--;a=l}else a=n.findClusterBreak(c.text,l-c.from,t,t)+c.from,a==l&&c.number!=(t?h.doc.lines:1)?a+=t?1:-1:!t&&/[\ufe00-\ufe0f]/.test(c.text.slice(a-c.from,l-c.from))&&(a=n.findClusterBreak(c.text,a-c.from,!1,!1)+c.from);return a})),at=e=>st(e,!1,!0),lt=e=>st(e,!0,!1),ht=(e,t)=>rt(e,(i=>{let r=i.head,{state:o}=e,s=o.doc.lineAt(r),a=o.charCategorizer(r);for(let e=null;;){if(r==(t?s.to:s.from)){r==i.head&&s.number!=(t?o.doc.lines:1)&&(r+=t?1:-1);break}let l=n.findClusterBreak(s.text,r-s.from,t)+s.from,h=s.text.slice(Math.min(r,l)-s.from,Math.max(r,l)-s.from),c=a(h);if(null!=e&&c!=e)break;" "==h&&r==i.head||(e=c),r=l}return r})),ct=e=>ht(e,!1),dt=e=>ht(e,!0),ut=e=>rt(e,(t=>{let i=e.lineBlockAt(t.head).to;return t.head<i?i:Math.min(e.state.doc.length,t.head+1)})),ft=e=>rt(e,(t=>{let i=e.moveToLineBoundary(t,!1).head;return t.head>i?i:Math.max(0,t.head-1)})),pt=e=>rt(e,(t=>{let i=e.moveToLineBoundary(t,!0).head;return t.head<i?i:Math.min(e.state.doc.length,t.head+1)})),Ot=({state:e,dispatch:t})=>{if(e.readOnly)return!1;let i=e.changeByRange((e=>({changes:{from:e.from,to:e.to,insert:n.Text.of(["",""])},range:n.EditorSelection.cursor(e.from)})));return t(e.update(i,{scrollIntoView:!0,userEvent:"input"})),!0},mt=({state:e,dispatch:t})=>{if(e.readOnly)return!1;let i=e.changeByRange((t=>{if(!t.empty||0==t.from||t.from==e.doc.length)return{range:t};let i=t.from,r=e.doc.lineAt(i),o=i==r.from?i-1:n.findClusterBreak(r.text,i-r.from,!1)+r.from,s=i==r.to?i+1:n.findClusterBreak(r.text,i-r.from,!0)+r.from;return{changes:{from:o,to:s,insert:e.doc.slice(i,s).append(e.doc.slice(o,i))},range:n.EditorSelection.cursor(s)}}));return!i.changes.empty&&(t(e.update(i,{scrollIntoView:!0,userEvent:"move.character"})),!0)};function gt(e){let t=[],i=-1;for(let n of e.selection.ranges){let r=e.doc.lineAt(n.from),o=e.doc.lineAt(n.to);if(n.empty||n.to!=o.from||(o=e.doc.lineAt(n.to-1)),i>=r.number){let e=t[t.length-1];e.to=o.to,e.ranges.push(n)}else t.push({from:r.from,to:o.to,ranges:[n]});i=o.number+1}return t}function bt(e,t,i){if(e.readOnly)return!1;let r=[],o=[];for(let t of gt(e)){if(i?t.to==e.doc.length:0==t.from)continue;let s=e.doc.lineAt(i?t.to+1:t.from-1),a=s.length+1;if(i){r.push({from:t.to,to:s.to},{from:t.from,insert:s.text+e.lineBreak});for(let i of t.ranges)o.push(n.EditorSelection.range(Math.min(e.doc.length,i.anchor+a),Math.min(e.doc.length,i.head+a)))}else{r.push({from:s.from,to:t.from},{from:t.to,insert:e.lineBreak+s.text});for(let e of t.ranges)o.push(n.EditorSelection.range(e.anchor-a,e.head-a))}}return!!r.length&&(t(e.update({changes:r,scrollIntoView:!0,selection:n.EditorSelection.create(o,e.selection.mainIndex),userEvent:"move.line"})),!0)}const wt=({state:e,dispatch:t})=>bt(e,t,!1),yt=({state:e,dispatch:t})=>bt(e,t,!0);function vt(e,t,i){if(e.readOnly)return!1;let n=[];for(let t of gt(e))i?n.push({from:t.from,insert:e.doc.slice(t.from,t.to)+e.lineBreak}):n.push({from:t.to,insert:e.lineBreak+e.doc.slice(t.from,t.to)});return t(e.update({changes:n,scrollIntoView:!0,userEvent:"input.copyline"})),!0}const xt=({state:e,dispatch:t})=>vt(e,t,!1),St=({state:e,dispatch:t})=>vt(e,t,!0),kt=e=>{if(e.state.readOnly)return!1;let{state:t}=e,i=t.changes(gt(t).map((({from:e,to:i})=>(e>0?e--:i<t.doc.length&&i++,{from:e,to:i})))),n=I(t.selection,(t=>{let i;if(e.lineWrapping){let n=e.lineBlockAt(t.head),r=e.coordsAtPos(t.head,t.assoc||1);r&&(i=n.bottom+e.documentTop-r.bottom+e.defaultLineHeight/2)}return e.moveVertically(t,!0,i)})).map(i);return e.dispatch({changes:i,selection:n,scrollIntoView:!0,userEvent:"delete.line"}),!0},At=Pt(!1),Qt=Pt(!0);function Pt(e){return({state:t,dispatch:i})=>{if(t.readOnly)return!1;let r=t.changeByRange((i=>{let{from:r,to:a}=i,l=t.doc.lineAt(r),h=!e&&r==a&&function(e,t){if(/\(\)|\[\]|\{\}/.test(e.sliceDoc(t-1,t+1)))return{from:t,to:t};let i,n=o.syntaxTree(e).resolveInner(t),r=n.childBefore(t),a=n.childAfter(t);return r&&a&&r.to<=t&&a.from>=t&&(i=r.type.prop(s.NodeProp.closedBy))&&i.indexOf(a.name)>-1&&e.doc.lineAt(r.to).from==e.doc.lineAt(a.from).from&&!/\S/.test(e.sliceDoc(r.to,a.from))?{from:r.to,to:a.from}:null}(t,r);e&&(r=a=(a<=l.to?l:t.doc.lineAt(a)).to);let c=new o.IndentContext(t,{simulateBreak:r,simulateDoubleBreak:!!h}),d=o.getIndentation(c,r);for(null==d&&(d=n.countColumn(/^\s*/.exec(t.doc.lineAt(r).text)[0],t.tabSize));a<l.to&&/\s/.test(l.text[a-l.from]);)a++;h?({from:r,to:a}=h):r>l.from&&r<l.from+100&&!/\S/.test(l.text.slice(0,r))&&(r=l.from);let u=["",o.indentString(t,d)];return h&&u.push(o.indentString(t,c.lineIndent(l.from,-1))),{changes:{from:r,to:a,insert:n.Text.of(u)},range:n.EditorSelection.cursor(r+1+u[1].length)}}));return i(t.update(r,{scrollIntoView:!0,userEvent:"input"})),!0}}function Ct(e,t){let i=-1;return e.changeByRange((r=>{let o=[];for(let n=r.from;n<=r.to;){let s=e.doc.lineAt(n);s.number>i&&(r.empty||r.to>s.from)&&(t(s,o,r),i=s.number),n=s.to+1}let s=e.changes(o);return{changes:o,range:n.EditorSelection.range(s.mapPos(r.anchor,1),s.mapPos(r.head,1))}}))}const $t=({state:e,dispatch:t})=>{if(e.readOnly)return!1;let i=Object.create(null),n=new o.IndentContext(e,{overrideIndentation:e=>{let t=i[e];return null==t?-1:t}}),r=Ct(e,((t,r,s)=>{let a=o.getIndentation(n,t.from);if(null==a)return;/\S/.test(t.text)||(a=0);let l=/^\s*/.exec(t.text)[0],h=o.indentString(e,a);(l!=h||s.from<t.from+l.length)&&(i[t.from]=a,r.push({from:t.from,to:t.from+l.length,insert:h}))}));return r.changes.empty||t(e.update(r,{userEvent:"indent"})),!0},Zt=({state:e,dispatch:t})=>!e.readOnly&&(t(e.update(Ct(e,((t,i)=>{i.push({from:t.from,insert:e.facet(o.indentUnit)})})),{userEvent:"input.indent"})),!0),Tt=({state:e,dispatch:t})=>!e.readOnly&&(t(e.update(Ct(e,((t,i)=>{let r=/^\s*/.exec(t.text)[0];if(!r)return;let s=n.countColumn(r,e.tabSize),a=0,l=o.indentString(e,Math.max(0,s-o.getIndentUnit(e)));for(;a<r.length&&a<l.length&&r.charCodeAt(a)==l.charCodeAt(a);)a++;i.push({from:t.from+a,to:t.from+r.length,insert:l.slice(a)})})),{userEvent:"delete.dedent"})),!0),Mt=e=>(e.setTabFocusMode(),!0),Et=[{key:"Ctrl-b",run:K,shift:Ze,preventDefault:!0},{key:"Ctrl-f",run:J,shift:Te},{key:"Ctrl-p",run:fe,shift:Be},{key:"Ctrl-n",run:pe,shift:De},{key:"Ctrl-a",run:ke,shift:Ue},{key:"Ctrl-e",run:Ae,shift:Ne},{key:"Ctrl-d",run:lt},{key:"Ctrl-h",run:at},{key:"Ctrl-k",run:ut},{key:"Ctrl-Alt-h",run:ct},{key:"Ctrl-o",run:Ot},{key:"Ctrl-t",run:mt},{key:"Ctrl-v",run:be}],Xt=[{key:"ArrowLeft",run:K,shift:Ze,preventDefault:!0},{key:"Mod-ArrowLeft",mac:"Alt-ArrowLeft",run:ne,shift:Ee,preventDefault:!0},{mac:"Cmd-ArrowLeft",run:xe,shift:Ie,preventDefault:!0},{key:"ArrowRight",run:J,shift:Te,preventDefault:!0},{key:"Mod-ArrowRight",mac:"Alt-ArrowRight",run:re,shift:Xe,preventDefault:!0},{mac:"Cmd-ArrowRight",run:Se,shift:Ge,preventDefault:!0},{key:"ArrowUp",run:fe,shift:Be,preventDefault:!0},{mac:"Cmd-ArrowUp",run:Fe,shift:Ke},{mac:"Ctrl-ArrowUp",run:ge,shift:Le},{key:"ArrowDown",run:pe,shift:De,preventDefault:!0},{mac:"Cmd-ArrowDown",run:He,shift:Je},{mac:"Ctrl-ArrowDown",run:be,shift:je},{key:"PageUp",run:ge,shift:Le},{key:"PageDown",run:be,shift:je},{key:"Home",run:ve,shift:Ye,preventDefault:!0},{key:"Mod-Home",run:Fe,shift:Ke},{key:"End",run:ye,shift:We,preventDefault:!0},{key:"Mod-End",run:He,shift:Je},{key:"Enter",run:At,shift:At},{key:"Mod-a",run:et},{key:"Backspace",run:at,shift:at},{key:"Delete",run:lt},{key:"Mod-Backspace",mac:"Alt-Backspace",run:ct},{key:"Mod-Delete",mac:"Alt-Delete",run:dt},{mac:"Mod-Backspace",run:ft},{mac:"Mod-Delete",run:pt}].concat(Et.map((e=>({mac:e.key,run:e.run,shift:e.shift})))),Rt=[{key:"Alt-ArrowLeft",mac:"Ctrl-ArrowLeft",run:ce,shift:_e},{key:"Alt-ArrowRight",mac:"Ctrl-ArrowRight",run:de,shift:Ve},{key:"Alt-ArrowUp",run:wt},{key:"Shift-Alt-ArrowUp",run:xt},{key:"Alt-ArrowDown",run:yt},{key:"Shift-Alt-ArrowDown",run:St},{key:"Escape",run:nt},{key:"Mod-Enter",run:Qt},{key:"Alt-l",mac:"Ctrl-l",run:tt},{key:"Mod-i",run:it,preventDefault:!0},{key:"Mod-[",run:Tt},{key:"Mod-]",run:Zt},{key:"Mod-Alt-\\",run:$t},{key:"Shift-Mod-k",run:kt},{key:"Shift-Mod-\\",run:Pe},{key:"Mod-/",run:a},{key:"Alt-A",run:u},{key:"Ctrl-m",mac:"Shift-Alt-m",run:Mt}].concat(Xt),_t={key:"Tab",run:Zt,shift:Tt};t.blockComment=f,t.blockUncomment=p,t.copyLineDown=St,t.copyLineUp=xt,t.cursorCharBackward=e=>F(e,!1),t.cursorCharBackwardLogical=e=>te(e,!1),t.cursorCharForward=e=>F(e,!0),t.cursorCharForwardLogical=e=>te(e,!0),t.cursorCharLeft=K,t.cursorCharRight=J,t.cursorDocEnd=He,t.cursorDocStart=Fe,t.cursorGroupBackward=e=>ie(e,!1),t.cursorGroupForward=e=>ie(e,!0),t.cursorGroupLeft=ne,t.cursorGroupRight=re,t.cursorLineBoundaryBackward=ve,t.cursorLineBoundaryForward=ye,t.cursorLineBoundaryLeft=xe,t.cursorLineBoundaryRight=Se,t.cursorLineDown=pe,t.cursorLineEnd=Ae,t.cursorLineStart=ke,t.cursorLineUp=fe,t.cursorMatchingBracket=Pe,t.cursorPageDown=be,t.cursorPageUp=ge,t.cursorSubwordBackward=e=>ae(e,!1),t.cursorSubwordForward=e=>ae(e,!0),t.cursorSyntaxLeft=ce,t.cursorSyntaxRight=de,t.defaultKeymap=Rt,t.deleteCharBackward=at,t.deleteCharBackwardStrict=e=>st(e,!1,!1),t.deleteCharForward=lt,t.deleteGroupBackward=ct,t.deleteGroupForward=dt,t.deleteLine=kt,t.deleteLineBoundaryBackward=ft,t.deleteLineBoundaryForward=pt,t.deleteToLineEnd=ut,t.deleteToLineStart=e=>rt(e,(t=>{let i=e.lineBlockAt(t.head).from;return t.head>i?i:Math.max(0,t.head-1)})),t.deleteTrailingWhitespace=({state:e,dispatch:t})=>{if(e.readOnly)return!1;let i=[];for(let t=0,n="",r=e.doc.iter();;){if(r.next(),r.lineBreak||r.done){let e=n.search(/\s+$/);if(e>-1&&i.push({from:t-(n.length-e),to:t}),r.done)break;n=""}else n=r.value;t+=r.value.length}return!!i.length&&(t(e.update({changes:i,userEvent:"delete"})),!0)},t.emacsStyleKeymap=Et,t.history=function(e={}){return[k,S.of(e),r.EditorView.domEventHandlers({beforeinput(e,t){let i="historyUndo"==e.inputType?P:"historyRedo"==e.inputType?C:null;return!!i&&(e.preventDefault(),i(t))}})]},t.historyField=A,t.historyKeymap=Y,t.indentLess=Tt,t.indentMore=Zt,t.indentSelection=$t,t.indentWithTab=_t,t.insertBlankLine=Qt,t.insertNewline=({state:e,dispatch:t})=>(t(e.update(e.replaceSelection(e.lineBreak),{scrollIntoView:!0,userEvent:"input"})),!0),t.insertNewlineAndIndent=At,t.insertNewlineKeepIndent=({state:e,dispatch:t})=>(t(e.update(e.changeByRange((t=>{let i=/^\s*/.exec(e.doc.lineAt(t.from).text)[0];return{changes:{from:t.from,to:t.to,insert:e.lineBreak+i},range:n.EditorSelection.cursor(t.from+i.length+1)}})),{scrollIntoView:!0,userEvent:"input"})),!0),t.insertTab=({state:e,dispatch:t})=>e.selection.ranges.some((e=>!e.empty))?Zt({state:e,dispatch:t}):(t(e.update(e.replaceSelection("\t"),{scrollIntoView:!0,userEvent:"input"})),!0),t.invertedEffects=x,t.isolateHistory=v,t.lineComment=c,t.lineUncomment=d,t.moveLineDown=yt,t.moveLineUp=wt,t.redo=C,t.redoDepth=E,t.redoSelection=Z,t.selectAll=et,t.selectCharBackward=e=>$e(e,!1),t.selectCharBackwardLogical=e=>Ce(e,(t=>ee(e.state,t,!1))),t.selectCharForward=e=>$e(e,!0),t.selectCharForwardLogical=e=>Ce(e,(t=>ee(e.state,t,!0))),t.selectCharLeft=Ze,t.selectCharRight=Te,t.selectDocEnd=Je,t.selectDocStart=Ke,t.selectGroupBackward=e=>Me(e,!1),t.selectGroupForward=e=>Me(e,!0),t.selectGroupLeft=Ee,t.selectGroupRight=Xe,t.selectLine=tt,t.selectLineBoundaryBackward=Ye,t.selectLineBoundaryForward=We,t.selectLineBoundaryLeft=Ie,t.selectLineBoundaryRight=Ge,t.selectLineDown=De,t.selectLineEnd=Ne,t.selectLineStart=Ue,t.selectLineUp=Be,t.selectMatchingBracket=({state:e,dispatch:t})=>Qe(e,t,!0),t.selectPageDown=je,t.selectPageUp=Le,t.selectParentSyntax=it,t.selectSubwordBackward=e=>Re(e,!1),t.selectSubwordForward=e=>Re(e,!0),t.selectSyntaxLeft=_e,t.selectSyntaxRight=Ve,t.simplifySelection=nt,t.splitLine=Ot,t.standardKeymap=Xt,t.temporarilySetTabFocusMode=e=>(e.setTabFocusMode(2e3),!0),t.toggleBlockComment=u,t.toggleBlockCommentByLine=O,t.toggleComment=a,t.toggleLineComment=h,t.toggleTabFocusMode=Mt,t.transposeChars=mt,t.undo=P,t.undoDepth=M,t.undoSelection=$},2697:(e,t,i)=>{"use strict";var n=i(4628),r=i(2533),o=i(2696);let s=null;function a(){if(!s&&"object"==typeof document&&document.body){let{style:e}=document.body,t=[],i=new Set;for(let n in e)"cssText"!=n&&"cssFloat"!=n&&"string"==typeof e[n]&&(/[A-Z]/.test(n)&&(n=n.replace(/[A-Z]/g,(e=>"-"+e.toLowerCase()))),i.has(n)||(t.push(n),i.add(n)));s=t.sort().map((e=>({type:"property",label:e,apply:e+": "})))}return s||[]}const l=["active","after","any-link","autofill","backdrop","before","checked","cue","default","defined","disabled","empty","enabled","file-selector-button","first","first-child","first-letter","first-line","first-of-type","focus","focus-visible","focus-within","fullscreen","has","host","host-context","hover","in-range","indeterminate","invalid","is","lang","last-child","last-of-type","left","link","marker","modal","not","nth-child","nth-last-child","nth-last-of-type","nth-of-type","only-child","only-of-type","optional","out-of-range","part","placeholder","placeholder-shown","read-only","read-write","required","right","root","scope","selection","slotted","target","target-text","valid","visited","where"].map((e=>({type:"class",label:e}))),h=["above","absolute","activeborder","additive","activecaption","after-white-space","ahead","alias","all","all-scroll","alphabetic","alternate","always","antialiased","appworkspace","asterisks","attr","auto","auto-flow","avoid","avoid-column","avoid-page","avoid-region","axis-pan","background","backwards","baseline","below","bidi-override","blink","block","block-axis","bold","bolder","border","border-box","both","bottom","break","break-all","break-word","bullets","button","button-bevel","buttonface","buttonhighlight","buttonshadow","buttontext","calc","capitalize","caps-lock-indicator","caption","captiontext","caret","cell","center","checkbox","circle","cjk-decimal","clear","clip","close-quote","col-resize","collapse","color","color-burn","color-dodge","column","column-reverse","compact","condensed","contain","content","contents","content-box","context-menu","continuous","copy","counter","counters","cover","crop","cross","crosshair","currentcolor","cursive","cyclic","darken","dashed","decimal","decimal-leading-zero","default","default-button","dense","destination-atop","destination-in","destination-out","destination-over","difference","disc","discard","disclosure-closed","disclosure-open","document","dot-dash","dot-dot-dash","dotted","double","down","e-resize","ease","ease-in","ease-in-out","ease-out","element","ellipse","ellipsis","embed","end","ethiopic-abegede-gez","ethiopic-halehame-aa-er","ethiopic-halehame-gez","ew-resize","exclusion","expanded","extends","extra-condensed","extra-expanded","fantasy","fast","fill","fill-box","fixed","flat","flex","flex-end","flex-start","footnotes","forwards","from","geometricPrecision","graytext","grid","groove","hand","hard-light","help","hidden","hide","higher","highlight","highlighttext","horizontal","hsl","hsla","hue","icon","ignore","inactiveborder","inactivecaption","inactivecaptiontext","infinite","infobackground","infotext","inherit","initial","inline","inline-axis","inline-block","inline-flex","inline-grid","inline-table","inset","inside","intrinsic","invert","italic","justify","keep-all","landscape","large","larger","left","level","lighter","lighten","line-through","linear","linear-gradient","lines","list-item","listbox","listitem","local","logical","loud","lower","lower-hexadecimal","lower-latin","lower-norwegian","lowercase","ltr","luminosity","manipulation","match","matrix","matrix3d","medium","menu","menutext","message-box","middle","min-intrinsic","mix","monospace","move","multiple","multiple_mask_images","multiply","n-resize","narrower","ne-resize","nesw-resize","no-close-quote","no-drop","no-open-quote","no-repeat","none","normal","not-allowed","nowrap","ns-resize","numbers","numeric","nw-resize","nwse-resize","oblique","opacity","open-quote","optimizeLegibility","optimizeSpeed","outset","outside","outside-shape","overlay","overline","padding","padding-box","painted","page","paused","perspective","pinch-zoom","plus-darker","plus-lighter","pointer","polygon","portrait","pre","pre-line","pre-wrap","preserve-3d","progress","push-button","radial-gradient","radio","read-only","read-write","read-write-plaintext-only","rectangle","region","relative","repeat","repeating-linear-gradient","repeating-radial-gradient","repeat-x","repeat-y","reset","reverse","rgb","rgba","ridge","right","rotate","rotate3d","rotateX","rotateY","rotateZ","round","row","row-resize","row-reverse","rtl","run-in","running","s-resize","sans-serif","saturation","scale","scale3d","scaleX","scaleY","scaleZ","screen","scroll","scrollbar","scroll-position","se-resize","self-start","self-end","semi-condensed","semi-expanded","separate","serif","show","single","skew","skewX","skewY","skip-white-space","slide","slider-horizontal","slider-vertical","sliderthumb-horizontal","sliderthumb-vertical","slow","small","small-caps","small-caption","smaller","soft-light","solid","source-atop","source-in","source-out","source-over","space","space-around","space-between","space-evenly","spell-out","square","start","static","status-bar","stretch","stroke","stroke-box","sub","subpixel-antialiased","svg_masks","super","sw-resize","symbolic","symbols","system-ui","table","table-caption","table-cell","table-column","table-column-group","table-footer-group","table-header-group","table-row","table-row-group","text","text-bottom","text-top","textarea","textfield","thick","thin","threeddarkshadow","threedface","threedhighlight","threedlightshadow","threedshadow","to","top","transform","translate","translate3d","translateX","translateY","translateZ","transparent","ultra-condensed","ultra-expanded","underline","unidirectional-pan","unset","up","upper-latin","uppercase","url","var","vertical","vertical-text","view-box","visible","visibleFill","visiblePainted","visibleStroke","visual","w-resize","wait","wave","wider","window","windowframe","windowtext","words","wrap","wrap-reverse","x-large","x-small","xor","xx-large","xx-small"].map((e=>({type:"keyword",label:e}))).concat(["aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen"].map((e=>({type:"constant",label:e})))),c=["a","abbr","address","article","aside","b","bdi","bdo","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","dd","del","details","dfn","dialog","div","dl","dt","em","figcaption","figure","footer","form","header","hgroup","h1","h2","h3","h4","h5","h6","hr","html","i","iframe","img","input","ins","kbd","label","legend","li","main","meter","nav","ol","output","p","pre","ruby","section","select","small","source","span","strong","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","tr","u","ul"].map((e=>({type:"type",label:e}))),d=["@charset","@color-profile","@container","@counter-style","@font-face","@font-feature-values","@font-palette-values","@import","@keyframes","@layer","@media","@namespace","@page","@position-try","@property","@scope","@starting-style","@supports","@view-transition"].map((e=>({type:"keyword",label:e}))),u=/^(\w[\w-]*|-\w[\w-]*|)$/,f=/^-(-[\w-]*)?$/,p=new o.NodeWeakMap,O=["Declaration"];function m(e){for(let t=e;;){if(t.type.isTop)return t;if(!(t=t.parent))return e}}function g(e,t,i){if(t.to-t.from>4096){let n=p.get(t);if(n)return n;let r=[],s=new Set,a=t.cursor(o.IterMode.IncludeAnonymous);if(a.firstChild())do{for(let t of g(e,a.node,i))s.has(t.label)||(s.add(t.label),r.push(t))}while(a.nextSibling());return p.set(t,r),r}{let n=[],r=new Set;return t.cursor().iterate((t=>{var o;if(i(t)&&t.matchContext(O)&&":"==(null===(o=t.node.nextSibling)||void 0===o?void 0:o.name)){let i=e.sliceString(t.from,t.to);r.has(i)||(r.add(i),n.push({label:i,type:"variable"}))}})),n}}const b=e=>t=>{let{state:i,pos:n}=t,o=r.syntaxTree(i).resolveInner(n,-1),s=o.type.isError&&o.from==o.to-1&&"-"==i.doc.sliceString(o.from,o.to);if("PropertyName"==o.name||(s||"TagName"==o.name)&&/^(Block|Styles)$/.test(o.resolve(o.to).name))return{from:o.from,options:a(),validFor:u};if("ValueName"==o.name)return{from:o.from,options:h,validFor:u};if("PseudoClassName"==o.name)return{from:o.from,options:l,validFor:u};if(e(o)||(t.explicit||s)&&function(e,t){var i;if(("("==e.name||e.type.isError)&&(e=e.parent||e),"ArgList"!=e.name)return!1;let n=null===(i=e.parent)||void 0===i?void 0:i.firstChild;return"Callee"==(null==n?void 0:n.name)&&"var"==t.sliceString(n.from,n.to)}(o,i.doc))return{from:e(o)||s?o.from:n,options:g(i.doc,m(o),e),validFor:f};if("TagName"==o.name){for(let{parent:e}=o;e;e=e.parent)if("Block"==e.name)return{from:o.from,options:a(),validFor:u};return{from:o.from,options:c,validFor:u}}if("AtKeyword"==o.name)return{from:o.from,options:d,validFor:u};if(!t.explicit)return null;let p=o.resolve(n),O=p.childBefore(n);return O&&":"==O.name&&"PseudoClassSelector"==p.name?{from:n,options:l,validFor:u}:O&&":"==O.name&&"Declaration"==p.name||"ArgList"==p.name?{from:n,options:h,validFor:u}:"Block"==p.name||"Styles"==p.name?{from:n,options:a(),validFor:u}:null},w=b((e=>"VariableName"==e.name)),y=r.LRLanguage.define({name:"css",parser:n.parser.configure({props:[r.indentNodeProp.add({Declaration:r.continuedIndent()}),r.foldNodeProp.add({"Block KeyframeList":r.foldInside})]}),languageData:{commentTokens:{block:{open:"/*",close:"*/"}},indentOnInput:/^\s*\}$/,wordChars:"-"}});t.css=function(){return new r.LanguageSupport(y,y.data.of({autocomplete:w}))},t.cssCompletionSource=w,t.cssLanguage=y,t.defineCSSCompletionSource=b},6239:(e,t,i)=>{"use strict";var n=i(772),r=i(2697),o=i(1653),s=i(1506),a=i(9064),l=i(2533);const h=["_blank","_self","_top","_parent"],c=["ascii","utf-8","utf-16","latin1","latin1"],d=["get","post","put","delete"],u=["application/x-www-form-urlencoded","multipart/form-data","text/plain"],f=["true","false"],p={},O={a:{attrs:{href:null,ping:null,type:null,media:null,target:h,hreflang:null}},abbr:p,address:p,area:{attrs:{alt:null,coords:null,href:null,target:null,ping:null,media:null,hreflang:null,type:null,shape:["default","rect","circle","poly"]}},article:p,aside:p,audio:{attrs:{src:null,mediagroup:null,crossorigin:["anonymous","use-credentials"],preload:["none","metadata","auto"],autoplay:["autoplay"],loop:["loop"],controls:["controls"]}},b:p,base:{attrs:{href:null,target:h}},bdi:p,bdo:p,blockquote:{attrs:{cite:null}},body:p,br:p,button:{attrs:{form:null,formaction:null,name:null,value:null,autofocus:["autofocus"],disabled:["autofocus"],formenctype:u,formmethod:d,formnovalidate:["novalidate"],formtarget:h,type:["submit","reset","button"]}},canvas:{attrs:{width:null,height:null}},caption:p,center:p,cite:p,code:p,col:{attrs:{span:null}},colgroup:{attrs:{span:null}},command:{attrs:{type:["command","checkbox","radio"],label:null,icon:null,radiogroup:null,command:null,title:null,disabled:["disabled"],checked:["checked"]}},data:{attrs:{value:null}},datagrid:{attrs:{disabled:["disabled"],multiple:["multiple"]}},datalist:{attrs:{data:null}},dd:p,del:{attrs:{cite:null,datetime:null}},details:{attrs:{open:["open"]}},dfn:p,div:p,dl:p,dt:p,em:p,embed:{attrs:{src:null,type:null,width:null,height:null}},eventsource:{attrs:{src:null}},fieldset:{attrs:{disabled:["disabled"],form:null,name:null}},figcaption:p,figure:p,footer:p,form:{attrs:{action:null,name:null,"accept-charset":c,autocomplete:["on","off"],enctype:u,method:d,novalidate:["novalidate"],target:h}},h1:p,h2:p,h3:p,h4:p,h5:p,h6:p,head:{children:["title","base","link","style","meta","script","noscript","command"]},header:p,hgroup:p,hr:p,html:{attrs:{manifest:null}},i:p,iframe:{attrs:{src:null,srcdoc:null,name:null,width:null,height:null,sandbox:["allow-top-navigation","allow-same-origin","allow-forms","allow-scripts"],seamless:["seamless"]}},img:{attrs:{alt:null,src:null,ismap:null,usemap:null,width:null,height:null,crossorigin:["anonymous","use-credentials"]}},input:{attrs:{alt:null,dirname:null,form:null,formaction:null,height:null,list:null,max:null,maxlength:null,min:null,name:null,pattern:null,placeholder:null,size:null,src:null,step:null,value:null,width:null,accept:["audio/*","video/*","image/*"],autocomplete:["on","off"],autofocus:["autofocus"],checked:["checked"],disabled:["disabled"],formenctype:u,formmethod:d,formnovalidate:["novalidate"],formtarget:h,multiple:["multiple"],readonly:["readonly"],required:["required"],type:["hidden","text","search","tel","url","email","password","datetime","date","month","week","time","datetime-local","number","range","color","checkbox","radio","file","submit","image","reset","button"]}},ins:{attrs:{cite:null,datetime:null}},kbd:p,keygen:{attrs:{challenge:null,form:null,name:null,autofocus:["autofocus"],disabled:["disabled"],keytype:["RSA"]}},label:{attrs:{for:null,form:null}},legend:p,li:{attrs:{value:null}},link:{attrs:{href:null,type:null,hreflang:null,media:null,sizes:["all","16x16","16x16 32x32","16x16 32x32 64x64"]}},map:{attrs:{name:null}},mark:p,menu:{attrs:{label:null,type:["list","context","toolbar"]}},meta:{attrs:{content:null,charset:c,name:["viewport","application-name","author","description","generator","keywords"],"http-equiv":["content-language","content-type","default-style","refresh"]}},meter:{attrs:{value:null,min:null,low:null,high:null,max:null,optimum:null}},nav:p,noscript:p,object:{attrs:{data:null,type:null,name:null,usemap:null,form:null,width:null,height:null,typemustmatch:["typemustmatch"]}},ol:{attrs:{reversed:["reversed"],start:null,type:["1","a","A","i","I"]},children:["li","script","template","ul","ol"]},optgroup:{attrs:{disabled:["disabled"],label:null}},option:{attrs:{disabled:["disabled"],label:null,selected:["selected"],value:null}},output:{attrs:{for:null,form:null,name:null}},p,param:{attrs:{name:null,value:null}},pre:p,progress:{attrs:{value:null,max:null}},q:{attrs:{cite:null}},rp:p,rt:p,ruby:p,samp:p,script:{attrs:{type:["text/javascript"],src:null,async:["async"],defer:["defer"],charset:c}},section:p,select:{attrs:{form:null,name:null,size:null,autofocus:["autofocus"],disabled:["disabled"],multiple:["multiple"]}},slot:{attrs:{name:null}},small:p,source:{attrs:{src:null,type:null,media:null}},span:p,strong:p,style:{attrs:{type:["text/css"],media:null,scoped:null}},sub:p,summary:p,sup:p,table:p,tbody:p,td:{attrs:{colspan:null,rowspan:null,headers:null}},template:p,textarea:{attrs:{dirname:null,form:null,maxlength:null,name:null,placeholder:null,rows:null,cols:null,autofocus:["autofocus"],disabled:["disabled"],readonly:["readonly"],required:["required"],wrap:["soft","hard"]}},tfoot:p,th:{attrs:{colspan:null,rowspan:null,headers:null,scope:["row","col","rowgroup","colgroup"]}},thead:p,time:{attrs:{datetime:null}},title:p,tr:p,track:{attrs:{src:null,label:null,default:null,kind:["subtitles","captions","descriptions","chapters","metadata"],srclang:null}},ul:{children:["li","script","template","ul","ol"]},var:p,video:{attrs:{src:null,poster:null,width:null,height:null,crossorigin:["anonymous","use-credentials"],preload:["auto","metadata","none"],autoplay:["autoplay"],mediagroup:["movie"],muted:["muted"],controls:["controls"]}},wbr:p},m={accesskey:null,class:null,contenteditable:f,contextmenu:null,dir:["ltr","rtl","auto"],draggable:["true","false","auto"],dropzone:["copy","move","link","string:","file:"],hidden:["hidden"],id:null,inert:["inert"],itemid:null,itemprop:null,itemref:null,itemscope:["itemscope"],itemtype:null,lang:["ar","bn","de","en-GB","en-US","es","fr","hi","id","ja","pa","pt","ru","tr","zh"],spellcheck:f,autocorrect:f,autocapitalize:f,style:null,tabindex:null,title:null,translate:["yes","no"],rel:["stylesheet","alternate","author","bookmark","help","license","next","nofollow","noreferrer","prefetch","prev","search","tag"],role:"alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer".split(" "),"aria-activedescendant":null,"aria-atomic":f,"aria-autocomplete":["inline","list","both","none"],"aria-busy":f,"aria-checked":["true","false","mixed","undefined"],"aria-controls":null,"aria-describedby":null,"aria-disabled":f,"aria-dropeffect":null,"aria-expanded":["true","false","undefined"],"aria-flowto":null,"aria-grabbed":["true","false","undefined"],"aria-haspopup":f,"aria-hidden":f,"aria-invalid":["true","false","grammar","spelling"],"aria-label":null,"aria-labelledby":null,"aria-level":null,"aria-live":["off","polite","assertive"],"aria-multiline":f,"aria-multiselectable":f,"aria-owns":null,"aria-posinset":null,"aria-pressed":["true","false","mixed","undefined"],"aria-readonly":f,"aria-relevant":null,"aria-required":f,"aria-selected":["true","false","undefined"],"aria-setsize":null,"aria-sort":["ascending","descending","none","other"],"aria-valuemax":null,"aria-valuemin":null,"aria-valuenow":null,"aria-valuetext":null},g="beforeunload copy cut dragstart dragover dragleave dragenter dragend drag paste focus blur change click load mousedown mouseenter mouseleave mouseup keydown keyup resize scroll unload".split(" ").map((e=>"on"+e));for(let e of g)m[e]=null;class b{constructor(e,t){this.tags=Object.assign(Object.assign({},O),e),this.globalAttrs=Object.assign(Object.assign({},m),t),this.allTags=Object.keys(this.tags),this.globalAttrNames=Object.keys(this.globalAttrs)}}function w(e,t,i=e.length){if(!t)return"";let n=t.firstChild,r=n&&n.getChild("TagName");return r?e.sliceString(r.from,Math.min(r.to,i)):""}function y(e,t=!1){for(;e;e=e.parent)if("Element"==e.name){if(!t)return e;t=!1}return null}function v(e,t,i){let n=i.tags[w(e,y(t))];return(null==n?void 0:n.children)||i.allTags}function x(e,t){let i=[];for(let n=y(t);n&&!n.type.isTop;n=y(n.parent)){let r=w(e,n);if(r&&"CloseTag"==n.lastChild.name)break;r&&i.indexOf(r)<0&&("EndTag"==t.name||t.from>=n.firstChild.to)&&i.push(r)}return i}b.default=new b;const S=/^[:\-\.\w\u00b7-\uffff]*$/;function k(e,t,i,n,r){let o=/\s*>/.test(e.sliceDoc(r,r+5))?"":">",s=y(i,!0);return{from:n,to:r,options:v(e.doc,s,t).map((e=>({label:e,type:"type"}))).concat(x(e.doc,i).map(((e,t)=>({label:"/"+e,apply:"/"+e+o,type:"type",boost:99-t})))),validFor:/^\/?[:\-\.\w\u00b7-\uffff]*$/}}function A(e,t,i,n){let r=/\s*>/.test(e.sliceDoc(n,n+5))?"":">";return{from:i,to:n,options:x(e.doc,t).map(((e,t)=>({label:e,apply:e+r,type:"type",boost:99-t}))),validFor:S}}function Q(e,t){let{state:i,pos:n}=t,r=l.syntaxTree(i).resolveInner(n,-1),o=r.resolve(n);for(let e,t=n;o==r&&(e=r.childBefore(t));){let i=e.lastChild;if(!i||!i.type.isError||i.from<i.to)break;o=r=e,t=i.from}return"TagName"==r.name?r.parent&&/CloseTag$/.test(r.parent.name)?A(i,r,r.from,n):k(i,e,r,r.from,n):"StartTag"==r.name?k(i,e,r,n,n):"StartCloseTag"==r.name||"IncompleteCloseTag"==r.name?A(i,r,n,n):"OpenTag"==r.name||"SelfClosingTag"==r.name||"AttributeName"==r.name?function(e,t,i,n,r){let o=y(i),s=o?t.tags[w(e.doc,o)]:null,a=s&&s.attrs?Object.keys(s.attrs):[];return{from:n,to:r,options:(s&&!1===s.globalAttrs?a:a.length?a.concat(t.globalAttrNames):t.globalAttrNames).map((e=>({label:e,type:"property"}))),validFor:S}}(i,e,r,"AttributeName"==r.name?r.from:n,n):"Is"==r.name||"AttributeValue"==r.name||"UnquotedAttributeValue"==r.name?function(e,t,i,n,r){var o;let s,a=null===(o=i.parent)||void 0===o?void 0:o.getChild("AttributeName"),l=[];if(a){let o=e.sliceDoc(a.from,a.to),h=t.globalAttrs[o];if(!h){let n=y(i),r=n?t.tags[w(e.doc,n)]:null;h=(null==r?void 0:r.attrs)&&r.attrs[o]}if(h){let t=e.sliceDoc(n,r).toLowerCase(),i='"',o='"';/^['"]/.test(t)?(s='"'==t[0]?/^[^"]*$/:/^[^']*$/,i="",o=e.sliceDoc(r,r+1)==t[0]?"":t[0],t=t.slice(1),n++):s=/^[^\s<>='"]*$/;for(let e of h)l.push({label:e,apply:i+e+o,type:"constant"})}}return{from:n,to:r,options:l,validFor:s}}(i,e,r,"Is"==r.name?n:r.from,n):!t.explicit||"Element"!=o.name&&"Text"!=o.name&&"Document"!=o.name?null:function(e,t,i,n){let r=[],o=0;for(let n of v(e.doc,i,t))r.push({label:"<"+n,type:"type"});for(let t of x(e.doc,i))r.push({label:"</"+t+">",type:"type",boost:99-o++});return{from:n,to:n,options:r,validFor:/^<\/?[:\-\.\w\u00b7-\uffff]*$/}}(i,e,r,n)}function P(e){let{extraTags:t,extraGlobalAttributes:i}=e,n=i||t?new b(t,i):b.default;return e=>Q(n,e)}const C=o.javascriptLanguage.parser.configure({top:"SingleExpression"}),$=[{tag:"script",attrs:e=>"text/typescript"==e.type||"ts"==e.lang,parser:o.typescriptLanguage.parser},{tag:"script",attrs:e=>"text/babel"==e.type||"text/jsx"==e.type,parser:o.jsxLanguage.parser},{tag:"script",attrs:e=>"text/typescript-jsx"==e.type,parser:o.tsxLanguage.parser},{tag:"script",attrs:e=>/^(importmap|speculationrules|application\/(.+\+)?json)$/i.test(e.type),parser:C},{tag:"script",attrs:e=>!e.type||/^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(e.type),parser:o.javascriptLanguage.parser},{tag:"style",attrs:e=>(!e.lang||"css"==e.lang)&&(!e.type||/^(text\/)?(x-)?(stylesheet|css)$/i.test(e.type)),parser:r.cssLanguage.parser}],Z=[{name:"style",parser:r.cssLanguage.parser.configure({top:"Styles"})}].concat(g.map((e=>({name:e,parser:o.javascriptLanguage.parser})))),T=l.LRLanguage.define({name:"html",parser:n.parser.configure({props:[l.indentNodeProp.add({Element(e){let t=/^(\s*)(<\/)?/.exec(e.textAfter);return e.node.to<=e.pos+t[0].length?e.continue():e.lineIndent(e.node.from)+(t[2]?0:e.unit)},"OpenTag CloseTag SelfClosingTag":e=>e.column(e.node.from)+e.unit,Document(e){if(e.pos+/\s*/.exec(e.textAfter)[0].length<e.node.to)return e.continue();let t,i=null;for(let t=e.node;;){let e=t.lastChild;if(!e||"Element"!=e.name||e.to!=t.to)break;i=t=e}return i&&(!(t=i.lastChild)||"CloseTag"!=t.name&&"SelfClosingTag"!=t.name)?e.lineIndent(i.from)+e.unit:null}}),l.foldNodeProp.add({Element(e){let t=e.firstChild,i=e.lastChild;return t&&"OpenTag"==t.name?{from:t.to,to:"CloseTag"==i.name?i.from:e.to}:null}}),l.bracketMatchingHandle.add({"OpenTag CloseTag":e=>e.getChild("TagName")})]}),languageData:{commentTokens:{block:{open:"\x3c!--",close:"--\x3e"}},indentOnInput:/^\s*<\/\w+\W$/,wordChars:"-._"}}),M=T.configure({wrap:n.configureNesting($,Z)}),E=new Set("area base br col command embed frame hr img input keygen link meta param source track wbr menuitem".split(" ")),X=s.EditorView.inputHandler.of(((e,t,i,n,r)=>{if(e.composing||e.state.readOnly||t!=i||">"!=n&&"/"!=n||!M.isActiveAt(e.state,t,-1))return!1;let o=r(),{state:s}=o,h=s.changeByRange((e=>{var t,i,r;let o,h=s.doc.sliceString(e.from-1,e.to)==n,{head:c}=e,d=l.syntaxTree(s).resolveInner(c,-1);if(h&&">"==n&&"EndTag"==d.name){let n=d.parent;if("CloseTag"!=(null===(i=null===(t=n.parent)||void 0===t?void 0:t.lastChild)||void 0===i?void 0:i.name)&&(o=w(s.doc,n.parent,c))&&!E.has(o))return{range:e,changes:{from:c,to:c+(">"===s.doc.sliceString(c,c+1)?1:0),insert:`</${o}>`}}}else if(h&&"/"==n&&"IncompleteCloseTag"==d.name){let e=d.parent;if(d.from==c-2&&"CloseTag"!=(null===(r=e.lastChild)||void 0===r?void 0:r.name)&&(o=w(s.doc,e,c))&&!E.has(o)){let e=c+(">"===s.doc.sliceString(c,c+1)?1:0),t=`${o}>`;return{range:a.EditorSelection.cursor(c+t.length,-1),changes:{from:c,to:e,insert:t}}}}return{range:e}}));return!h.changes.empty&&(e.dispatch([o,s.update(h,{userEvent:"input.complete",scrollIntoView:!0})]),!0)}));t.autoCloseTags=X,t.html=function(e={}){let t,i="";!1===e.matchClosingTags&&(i="noMatch"),!0===e.selfClosingTags&&(i=(i?i+" ":"")+"selfClosing"),(e.nestedLanguages&&e.nestedLanguages.length||e.nestedAttributes&&e.nestedAttributes.length)&&(t=n.configureNesting((e.nestedLanguages||[]).concat($),(e.nestedAttributes||[]).concat(Z)));let s=t?T.configure({wrap:t,dialect:i}):i?M.configure({dialect:i}):M;return new l.LanguageSupport(s,[M.data.of({autocomplete:P(e)}),!1!==e.autoCloseTags?X:[],o.javascript().support,r.css().support])},t.htmlCompletionSource=function(e){return Q(b.default,e)},t.htmlCompletionSourceWith=P,t.htmlLanguage=M,t.htmlPlain=T},1653:(e,t,i)=>{"use strict";var n=i(9922),r=i(2533),o=i(9064),s=i(1506),a=i(591),l=i(2696);const h=[a.snippetCompletion("function ${name}(${params}) {\n\t${}\n}",{label:"function",detail:"definition",type:"keyword"}),a.snippetCompletion("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n\t${}\n}",{label:"for",detail:"loop",type:"keyword"}),a.snippetCompletion("for (let ${name} of ${collection}) {\n\t${}\n}",{label:"for",detail:"of loop",type:"keyword"}),a.snippetCompletion("do {\n\t${}\n} while (${})",{label:"do",detail:"loop",type:"keyword"}),a.snippetCompletion("while (${}) {\n\t${}\n}",{label:"while",detail:"loop",type:"keyword"}),a.snippetCompletion("try {\n\t${}\n} catch (${error}) {\n\t${}\n}",{label:"try",detail:"/ catch block",type:"keyword"}),a.snippetCompletion("if (${}) {\n\t${}\n}",{label:"if",detail:"block",type:"keyword"}),a.snippetCompletion("if (${}) {\n\t${}\n} else {\n\t${}\n}",{label:"if",detail:"/ else block",type:"keyword"}),a.snippetCompletion("class ${name} {\n\tconstructor(${params}) {\n\t\t${}\n\t}\n}",{label:"class",detail:"definition",type:"keyword"}),a.snippetCompletion('import {${names}} from "${module}"\n${}',{label:"import",detail:"named",type:"keyword"}),a.snippetCompletion('import ${name} from "${module}"\n${}',{label:"import",detail:"default",type:"keyword"})],c=h.concat([a.snippetCompletion("interface ${name} {\n\t${}\n}",{label:"interface",detail:"definition",type:"keyword"}),a.snippetCompletion("type ${name} = ${type}",{label:"type",detail:"definition",type:"keyword"}),a.snippetCompletion("enum ${name} {\n\t${}\n}",{label:"enum",detail:"definition",type:"keyword"})]),d=new l.NodeWeakMap,u=new Set(["Script","Block","FunctionExpression","FunctionDeclaration","ArrowFunction","MethodDeclaration","ForStatement"]);function f(e){return(t,i)=>{let n=t.node.getChild("VariableDefinition");return n&&i(n,e),!0}}const p=["FunctionDeclaration"],O={FunctionDeclaration:f("function"),ClassDeclaration:f("class"),ClassExpression:()=>!0,EnumDeclaration:f("constant"),TypeAliasDeclaration:f("type"),NamespaceDeclaration:f("namespace"),VariableDefinition(e,t){e.matchContext(p)||t(e,"variable")},TypeDefinition(e,t){t(e,"type")},__proto__:null};function m(e,t){let i=d.get(t);if(i)return i;let n=[],r=!0;function o(t,i){let r=e.sliceString(t.from,t.to);n.push({label:r,type:i})}return t.cursor(l.IterMode.IncludeAnonymous).iterate((t=>{if(r)r=!1;else if(t.name){let e=O[t.name];if(e&&e(t,o)||u.has(t.name))return!1}else if(t.to-t.from>8192){for(let i of m(e,t.node))n.push(i);return!1}})),d.set(t,n),n}const g=/^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/,b=["TemplateString","String","RegExp","LineComment","BlockComment","VariableDefinition","TypeDefinition","Label","PropertyDefinition","PropertyName","PrivatePropertyDefinition","PrivatePropertyName",".","?."];function w(e){let t=r.syntaxTree(e.state).resolveInner(e.pos,-1);if(b.indexOf(t.name)>-1)return null;let i="VariableName"==t.name||t.to-t.from<20&&g.test(e.state.sliceDoc(t.from,t.to));if(!i&&!e.explicit)return null;let n=[];for(let i=t;i;i=i.parent)u.has(i.name)&&(n=n.concat(m(e.state.doc,i)));return{options:n,from:i?t.from:e.pos,validFor:g}}function y(e,t,i){var n;let r=[];for(;;){let o,s=t.firstChild;if("VariableName"==(null==s?void 0:s.name))return r.push(e(s)),{path:r.reverse(),name:i};if("MemberExpression"!=(null==s?void 0:s.name)||"PropertyName"!=(null===(n=o=s.lastChild)||void 0===n?void 0:n.name))return null;r.push(e(o)),t=s}}function v(e){let t=t=>e.state.doc.sliceString(t.from,t.to),i=r.syntaxTree(e.state).resolveInner(e.pos,-1);return"PropertyName"==i.name?y(t,i.parent,t(i)):"."!=i.name&&"?."!=i.name||"MemberExpression"!=i.parent.name?b.indexOf(i.name)>-1?null:"VariableName"==i.name||i.to-i.from<20&&g.test(t(i))?{path:[],name:t(i)}:"MemberExpression"==i.name?y(t,i,""):e.explicit?{path:[],name:""}:null:y(t,i.parent,"")}const x=r.LRLanguage.define({name:"javascript",parser:n.parser.configure({props:[r.indentNodeProp.add({IfStatement:r.continuedIndent({except:/^\s*({|else\b)/}),TryStatement:r.continuedIndent({except:/^\s*({|catch\b|finally\b)/}),LabeledStatement:r.flatIndent,SwitchBody:e=>{let t=e.textAfter,i=/^\s*\}/.test(t),n=/^\s*(case|default)\b/.test(t);return e.baseIndent+(i?0:n?1:2)*e.unit},Block:r.delimitedIndent({closing:"}"}),ArrowFunction:e=>e.baseIndent+e.unit,"TemplateString BlockComment":()=>null,"Statement Property":r.continuedIndent({except:/^{/}),JSXElement(e){let t=/^\s*<\//.test(e.textAfter);return e.lineIndent(e.node.from)+(t?0:e.unit)},JSXEscape(e){let t=/\s*\}/.test(e.textAfter);return e.lineIndent(e.node.from)+(t?0:e.unit)},"JSXOpenTag JSXSelfClosingTag":e=>e.column(e.node.from)+e.unit}),r.foldNodeProp.add({"Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType":r.foldInside,BlockComment:e=>({from:e.from+2,to:e.to-2})})]}),languageData:{closeBrackets:{brackets:["(","[","{","'",'"',"`"]},commentTokens:{line:"//",block:{open:"/*",close:"*/"}},indentOnInput:/^\s*(?:case |default:|\{|\}|<\/)$/,wordChars:"$"}}),S={test:e=>/^JSX/.test(e.name),facet:r.defineLanguageFacet({commentTokens:{block:{open:"{/*",close:"*/}"}}})},k=x.configure({dialect:"ts"},"typescript"),A=x.configure({dialect:"jsx",props:[r.sublanguageProp.add((e=>e.isTop?[S]:void 0))]}),Q=x.configure({dialect:"jsx ts",props:[r.sublanguageProp.add((e=>e.isTop?[S]:void 0))]},"typescript");let P=e=>({label:e,type:"keyword"});const C="break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map(P),$=C.concat(["declare","implements","private","protected","public"].map(P));function Z(e,t,i=e.length){for(let n=null==t?void 0:t.firstChild;n;n=n.nextSibling)if("JSXIdentifier"==n.name||"JSXBuiltin"==n.name||"JSXNamespacedName"==n.name||"JSXMemberExpression"==n.name)return e.sliceString(n.from,Math.min(n.to,i));return""}const T="object"==typeof navigator&&/Android\b/.test(navigator.userAgent),M=s.EditorView.inputHandler.of(((e,t,i,n,s)=>{if((T?e.composing:e.compositionStarted)||e.state.readOnly||t!=i||">"!=n&&"/"!=n||!x.isActiveAt(e.state,t,-1))return!1;let a=s(),{state:l}=a,h=l.changeByRange((e=>{var t;let i,{head:s}=e,a=r.syntaxTree(l).resolveInner(s-1,-1);if("JSXStartTag"==a.name&&(a=a.parent),l.doc.sliceString(s-1,s)!=n||"JSXAttributeValue"==a.name&&a.to>s);else{if(">"==n&&"JSXFragmentTag"==a.name)return{range:e,changes:{from:s,insert:"</>"}};if("/"==n&&"JSXStartCloseTag"==a.name){let e=a.parent,n=e.parent;if(n&&e.from==s-2&&((i=Z(l.doc,n.firstChild,s))||"JSXFragmentTag"==(null===(t=n.firstChild)||void 0===t?void 0:t.name))){let e=`${i}>`;return{range:o.EditorSelection.cursor(s+e.length,-1),changes:{from:s,insert:e}}}}else if(">"==n){let t=function(e){for(;;){if("JSXOpenTag"==e.name||"JSXSelfClosingTag"==e.name||"JSXFragmentTag"==e.name)return e;if("JSXEscape"==e.name||!e.parent)return null;e=e.parent}}(a);if(t&&"JSXOpenTag"==t.name&&!/^\/?>|^<\//.test(l.doc.sliceString(s,s+2))&&(i=Z(l.doc,t,s)))return{range:e,changes:{from:s,insert:`</${i}>`}}}}return{range:e}}));return!h.changes.empty&&(e.dispatch([a,l.update(h,{userEvent:"input.complete",scrollIntoView:!0})]),!0)}));function E(e,t,i,n){return i.line(e+n.line).from+t+(1==e?n.col-1:-1)}function X(e,t,i){let n=E(e.line,e.column,t,i),r={from:n,to:null!=e.endLine&&1!=e.endColumn?E(e.endLine,e.endColumn,t,i):n,message:e.message,source:e.ruleId?"eslint:"+e.ruleId:"eslint",severity:1==e.severity?"warning":"error"};if(e.fix){let{range:t,text:o}=e.fix,s=t[0]+i.pos-n,a=t[1]+i.pos-n;r.actions=[{name:"fix",apply(e,t){e.dispatch({changes:{from:t+s,to:t+a,insert:o},scrollIntoView:!0})}}]}return r}t.autoCloseTags=M,t.completionPath=v,t.esLint=function(e,t){return t||(t={parserOptions:{ecmaVersion:2019,sourceType:"module"},env:{browser:!0,node:!0,es6:!0,es2015:!0,es2017:!0,es2020:!0},rules:{}},e.getRules().forEach(((e,i)=>{e.meta.docs.recommended&&(t.rules[i]=2)}))),i=>{let{state:n}=i,r=[];for(let{from:i,to:o}of x.findRegions(n)){let s=n.doc.lineAt(i),a={line:s.number-1,col:i-s.from,pos:i};for(let s of e.verify(n.sliceDoc(i,o),t))r.push(X(s,n.doc,a))}return r}},t.javascript=function(e={}){let t=e.jsx?e.typescript?Q:A:e.typescript?k:x,i=e.typescript?c.concat($):h.concat(C);return new r.LanguageSupport(t,[x.data.of({autocomplete:a.ifNotIn(b,a.completeFromList(i))}),x.data.of({autocomplete:w}),e.jsx?M:[]])},t.javascriptLanguage=x,t.jsxLanguage=A,t.localCompletionSource=w,t.scopeCompletionSource=function(e){let t=new Map;return i=>{let n=v(i);if(!n)return null;let r=e;for(let e of n.path)if(r=r[e],!r)return null;let o=t.get(r);return o||t.set(r,o=function(e,t){let i=[],n=new Set;for(let r=0;;r++){for(let o of(Object.getOwnPropertyNames||Object.keys)(e)){if(!/^[a-zA-Z_$\xaa-\uffdc][\w$\xaa-\uffdc]*$/.test(o)||n.has(o))continue;let s;n.add(o);try{s=e[o]}catch(e){continue}i.push({label:o,type:"function"==typeof s?/^[A-Z]/.test(o)?"class":t?"function":"method":t?"variable":"property",boost:-r})}let o=Object.getPrototypeOf(e);if(!o)return i;e=o}}(r,!n.path.length)),{from:i.pos-n.name.length,options:o,validFor:g}}},t.snippets=h,t.tsxLanguage=Q,t.typescriptLanguage=k,t.typescriptSnippets=c},2533:(e,t,i)=>{"use strict";var n,r=i(2696),o=i(9064),s=i(1506),a=i(7359),l=i(9172);const h=new r.NodeProp;function c(e){return o.Facet.define({combine:e?t=>t.concat(e):void 0})}const d=new r.NodeProp;class u{constructor(e,t,i=[],n=""){this.data=e,this.name=n,o.EditorState.prototype.hasOwnProperty("tree")||Object.defineProperty(o.EditorState.prototype,"tree",{get(){return O(this)}}),this.parser=t,this.extension=[A.of(this),o.EditorState.languageData.of(((e,t,i)=>{let n=f(e,t,i),r=n.type.prop(h);if(!r)return[];let o=e.facet(r),s=n.type.prop(d);if(s){let r=n.resolve(t-n.from,i);for(let t of s)if(t.test(r,e)){let i=e.facet(t.facet);return"replace"==t.type?i:i.concat(o)}}return o}))].concat(i)}isActiveAt(e,t,i=-1){return f(e,t,i).type.prop(h)==this.data}findRegions(e){let t=e.facet(A);if((null==t?void 0:t.data)==this.data)return[{from:0,to:e.doc.length}];if(!t||!t.allowsNesting)return[];let i=[],n=(e,t)=>{if(e.prop(h)==this.data)return void i.push({from:t,to:t+e.length});let o=e.prop(r.NodeProp.mounted);if(o){if(o.tree.prop(h)==this.data){if(o.overlay)for(let e of o.overlay)i.push({from:e.from+t,to:e.to+t});else i.push({from:t,to:t+e.length});return}if(o.overlay){let e=i.length;if(n(o.tree,o.overlay[0].from+t),i.length>e)return}}for(let i=0;i<e.children.length;i++){let o=e.children[i];o instanceof r.Tree&&n(o,e.positions[i]+t)}};return n(O(e),0),i}get allowsNesting(){return!0}}function f(e,t,i){let n=e.facet(A),o=O(e).topNode;if(!n||n.allowsNesting)for(let e=o;e;e=e.enter(t,i,r.IterMode.ExcludeBuffers))e.type.isTop&&(o=e);return o}u.setState=o.StateEffect.define();class p extends u{constructor(e,t,i){super(e,t,[],i),this.parser=t}static define(e){let t=c(e.languageData);return new p(t,e.parser.configure({props:[h.add((e=>e.isTop?t:void 0))]}),e.name)}configure(e,t){return new p(this.data,this.parser.configure(e),t||this.name)}get allowsNesting(){return this.parser.hasWrappers()}}function O(e){let t=e.field(u.state,!1);return t?t.tree:r.Tree.empty}function m(e,t,i=50){var n;let r=null===(n=e.field(u.state,!1))||void 0===n?void 0:n.context;if(!r)return null;let o=r.viewport;r.updateViewport({from:0,to:t});let s=r.isDone(t)||r.work(i,t)?r.tree:null;return r.updateViewport(o),s}class g{constructor(e){this.doc=e,this.cursorPos=0,this.string="",this.cursor=e.iter()}get length(){return this.doc.length}syncTo(e){return this.string=this.cursor.next(e-this.cursorPos).value,this.cursorPos=e+this.string.length,this.cursorPos-this.string.length}chunk(e){return this.syncTo(e),this.string}get lineChunks(){return!0}read(e,t){let i=this.cursorPos-this.string.length;return e<i||t>=this.cursorPos?this.doc.sliceString(e,t):this.string.slice(e-i,t-i)}}let b=null;class w{constructor(e,t,i=[],n,r,o,s,a){this.parser=e,this.state=t,this.fragments=i,this.tree=n,this.treeLen=r,this.viewport=o,this.skipped=s,this.scheduleOn=a,this.parse=null,this.tempSkipped=[]}static create(e,t,i){return new w(e,t,[],r.Tree.empty,0,i,[],null)}startParse(){return this.parser.startParse(new g(this.state.doc),this.fragments)}work(e,t){return null!=t&&t>=this.state.doc.length&&(t=void 0),this.tree!=r.Tree.empty&&this.isDone(null!=t?t:this.state.doc.length)?(this.takeTree(),!0):this.withContext((()=>{var i;if("number"==typeof e){let t=Date.now()+e;e=()=>Date.now()>t}for(this.parse||(this.parse=this.startParse()),null!=t&&(null==this.parse.stoppedAt||this.parse.stoppedAt>t)&&t<this.state.doc.length&&this.parse.stopAt(t);;){let n=this.parse.advance();if(n){if(this.fragments=this.withoutTempSkipped(r.TreeFragment.addTree(n,this.fragments,null!=this.parse.stoppedAt)),this.treeLen=null!==(i=this.parse.stoppedAt)&&void 0!==i?i:this.state.doc.length,this.tree=n,this.parse=null,!(this.treeLen<(null!=t?t:this.state.doc.length)))return!0;this.parse=this.startParse()}if(e())return!1}}))}takeTree(){let e,t;this.parse&&(e=this.parse.parsedPos)>=this.treeLen&&((null==this.parse.stoppedAt||this.parse.stoppedAt>e)&&this.parse.stopAt(e),this.withContext((()=>{for(;!(t=this.parse.advance()););})),this.treeLen=e,this.tree=t,this.fragments=this.withoutTempSkipped(r.TreeFragment.addTree(this.tree,this.fragments,!0)),this.parse=null)}withContext(e){let t=b;b=this;try{return e()}finally{b=t}}withoutTempSkipped(e){for(let t;t=this.tempSkipped.pop();)e=y(e,t.from,t.to);return e}changes(e,t){let{fragments:i,tree:n,treeLen:o,viewport:s,skipped:a}=this;if(this.takeTree(),!e.empty){let t=[];if(e.iterChangedRanges(((e,i,n,r)=>t.push({fromA:e,toA:i,fromB:n,toB:r}))),i=r.TreeFragment.applyChanges(i,t),n=r.Tree.empty,o=0,s={from:e.mapPos(s.from,-1),to:e.mapPos(s.to,1)},this.skipped.length){a=[];for(let t of this.skipped){let i=e.mapPos(t.from,1),n=e.mapPos(t.to,-1);i<n&&a.push({from:i,to:n})}}}return new w(this.parser,t,i,n,o,s,a,this.scheduleOn)}updateViewport(e){if(this.viewport.from==e.from&&this.viewport.to==e.to)return!1;this.viewport=e;let t=this.skipped.length;for(let t=0;t<this.skipped.length;t++){let{from:i,to:n}=this.skipped[t];i<e.to&&n>e.from&&(this.fragments=y(this.fragments,i,n),this.skipped.splice(t--,1))}return!(this.skipped.length>=t||(this.reset(),0))}reset(){this.parse&&(this.takeTree(),this.parse=null)}skipUntilInView(e,t){this.skipped.push({from:e,to:t})}static getSkippingParser(e){return new class extends r.Parser{createParse(t,i,n){let o=n[0].from,s=n[n.length-1].to;return{parsedPos:o,advance(){let t=b;if(t){for(let e of n)t.tempSkipped.push(e);e&&(t.scheduleOn=t.scheduleOn?Promise.all([t.scheduleOn,e]):e)}return this.parsedPos=s,new r.Tree(r.NodeType.none,[],[],s-o)},stoppedAt:null,stopAt(){}}}}}isDone(e){e=Math.min(e,this.state.doc.length);let t=this.fragments;return this.treeLen>=e&&t.length&&0==t[0].from&&t[0].to>=e}static get(){return b}}function y(e,t,i){return r.TreeFragment.applyChanges(e,[{fromA:t,toA:i,fromB:t,toB:i}])}class v{constructor(e){this.context=e,this.tree=e.tree}apply(e){if(!e.docChanged&&this.tree==this.context.tree)return this;let t=this.context.changes(e.changes,e.state),i=this.context.treeLen==e.startState.doc.length?void 0:Math.max(e.changes.mapPos(this.context.treeLen),t.viewport.to);return t.work(20,i)||t.takeTree(),new v(t)}static init(e){let t=Math.min(3e3,e.doc.length),i=w.create(e.facet(A).parser,e,{from:0,to:t});return i.work(20,t)||i.takeTree(),new v(i)}}u.state=o.StateField.define({create:v.init,update(e,t){for(let e of t.effects)if(e.is(u.setState))return e.value;return t.startState.facet(A)!=t.state.facet(A)?v.init(t.state):e.apply(t)}});let x=e=>{let t=setTimeout((()=>e()),500);return()=>clearTimeout(t)};"undefined"!=typeof requestIdleCallback&&(x=e=>{let t=-1,i=setTimeout((()=>{t=requestIdleCallback(e,{timeout:400})}),100);return()=>t<0?clearTimeout(i):cancelIdleCallback(t)});const S="undefined"!=typeof navigator&&(null===(n=navigator.scheduling)||void 0===n?void 0:n.isInputPending)?()=>navigator.scheduling.isInputPending():null,k=s.ViewPlugin.fromClass(class{constructor(e){this.view=e,this.working=null,this.workScheduled=0,this.chunkEnd=-1,this.chunkBudget=-1,this.work=this.work.bind(this),this.scheduleWork()}update(e){let t=this.view.state.field(u.state).context;(t.updateViewport(e.view.viewport)||this.view.viewport.to>t.treeLen)&&this.scheduleWork(),(e.docChanged||e.selectionSet)&&(this.view.hasFocus&&(this.chunkBudget+=50),this.scheduleWork()),this.checkAsyncSchedule(t)}scheduleWork(){if(this.working)return;let{state:e}=this.view,t=e.field(u.state);t.tree==t.context.tree&&t.context.isDone(e.doc.length)||(this.working=x(this.work))}work(e){this.working=null;let t=Date.now();if(this.chunkEnd<t&&(this.chunkEnd<0||this.view.hasFocus)&&(this.chunkEnd=t+3e4,this.chunkBudget=3e3),this.chunkBudget<=0)return;let{state:i,viewport:{to:n}}=this.view,r=i.field(u.state);if(r.tree==r.context.tree&&r.context.isDone(n+1e5))return;let o=Date.now()+Math.min(this.chunkBudget,100,e&&!S?Math.max(25,e.timeRemaining()-5):1e9),s=r.context.treeLen<n&&i.doc.length>n+1e3,a=r.context.work((()=>S&&S()||Date.now()>o),n+(s?0:1e5));this.chunkBudget-=Date.now()-t,(a||this.chunkBudget<=0)&&(r.context.takeTree(),this.view.dispatch({effects:u.setState.of(new v(r.context))})),this.chunkBudget>0&&(!a||s)&&this.scheduleWork(),this.checkAsyncSchedule(r.context)}checkAsyncSchedule(e){e.scheduleOn&&(this.workScheduled++,e.scheduleOn.then((()=>this.scheduleWork())).catch((e=>s.logException(this.view.state,e))).then((()=>this.workScheduled--)),e.scheduleOn=null)}destroy(){this.working&&this.working()}isWorking(){return!!(this.working||this.workScheduled>0)}},{eventHandlers:{focus(){this.scheduleWork()}}}),A=o.Facet.define({combine:e=>e.length?e[0]:null,enables:e=>[u.state,k,s.EditorView.contentAttributes.compute([e],(t=>{let i=t.facet(e);return i&&i.name?{"data-language":i.name}:{}}))]});class Q{constructor(e,t,i,n,r,o=void 0){this.name=e,this.alias=t,this.extensions=i,this.filename=n,this.loadFunc=r,this.support=o,this.loading=null}load(){return this.loading||(this.loading=this.loadFunc().then((e=>this.support=e),(e=>{throw this.loading=null,e})))}static of(e){let{load:t,support:i}=e;if(!t){if(!i)throw new RangeError("Must pass either 'load' or 'support' to LanguageDescription.of");t=()=>Promise.resolve(i)}return new Q(e.name,(e.alias||[]).concat(e.name).map((e=>e.toLowerCase())),e.extensions||[],e.filename,t,i)}static matchFilename(e,t){for(let i of e)if(i.filename&&i.filename.test(t))return i;let i=/\.([^.]+)$/.exec(t);if(i)for(let t of e)if(t.extensions.indexOf(i[1])>-1)return t;return null}static matchLanguageName(e,t,i=!0){t=t.toLowerCase();for(let i of e)if(i.alias.some((e=>e==t)))return i;if(i)for(let i of e)for(let e of i.alias){let n=t.indexOf(e);if(n>-1&&(e.length>2||!/\w/.test(t[n-1])&&!/\w/.test(t[n+e.length])))return i}return null}}const P=o.Facet.define(),C=o.Facet.define({combine:e=>{if(!e.length)return"  ";let t=e[0];if(!t||/\S/.test(t)||Array.from(t).some((e=>e!=t[0])))throw new Error("Invalid indent unit: "+JSON.stringify(e[0]));return t}});function $(e){let t=e.facet(C);return 9==t.charCodeAt(0)?e.tabSize*t.length:t.length}function Z(e,t){let i="",n=e.tabSize,r=e.facet(C)[0];if("\t"==r){for(;t>=n;)i+="\t",t-=n;r=" "}for(let e=0;e<t;e++)i+=r;return i}function T(e,t){e instanceof o.EditorState&&(e=new M(e));for(let i of e.state.facet(P)){let n=i(e,t);if(void 0!==n)return n}let i=O(e.state);return i.length>=t?function(e,t,i){let n=t.resolveStack(i),r=n.node.enterUnfinishedNodesBefore(i);if(r!=n.node){let e=[];for(let t=r;t!=n.node;t=t.parent)e.push(t);for(let t=e.length-1;t>=0;t--)n={node:e[t],next:n}}return X(n,e,i)}(e,i,t):null}class M{constructor(e,t={}){this.state=e,this.options=t,this.unit=$(e)}lineAt(e,t=1){let i=this.state.doc.lineAt(e),{simulateBreak:n,simulateDoubleBreak:r}=this.options;return null!=n&&n>=i.from&&n<=i.to?r&&n==e?{text:"",from:e}:(t<0?n<e:n<=e)?{text:i.text.slice(n-i.from),from:n}:{text:i.text.slice(0,n-i.from),from:i.from}:i}textAfterPos(e,t=1){if(this.options.simulateDoubleBreak&&e==this.options.simulateBreak)return"";let{text:i,from:n}=this.lineAt(e,t);return i.slice(e-n,Math.min(i.length,e+100-n))}column(e,t=1){let{text:i,from:n}=this.lineAt(e,t),r=this.countColumn(i,e-n),o=this.options.overrideIndentation?this.options.overrideIndentation(n):-1;return o>-1&&(r+=o-this.countColumn(i,i.search(/\S|$/))),r}countColumn(e,t=e.length){return o.countColumn(e,this.state.tabSize,t)}lineIndent(e,t=1){let{text:i,from:n}=this.lineAt(e,t),r=this.options.overrideIndentation;if(r){let e=r(n);if(e>-1)return e}return this.countColumn(i,i.search(/\S|$/))}get simulatedBreak(){return this.options.simulateBreak||null}}const E=new r.NodeProp;function X(e,t,i){for(let n=e;n;n=n.next){let e=R(n.node);if(e)return e(V.create(t,i,n))}return 0}function R(e){let t=e.type.prop(E);if(t)return t;let i,n=e.firstChild;if(n&&(i=n.type.prop(r.NodeProp.closedBy))){let t=e.lastChild,n=t&&i.indexOf(t.name)>-1;return e=>B(e,!0,1,void 0,n&&!function(e){return e.pos==e.options.simulateBreak&&e.options.simulateDoubleBreak}(e)?t.from:void 0)}return null==e.parent?_:null}function _(){return 0}class V extends M{constructor(e,t,i){super(e.state,e.options),this.base=e,this.pos=t,this.context=i}get node(){return this.context.node}static create(e,t,i){return new V(e,t,i)}get textAfter(){return this.textAfterPos(this.pos)}get baseIndent(){return this.baseIndentFor(this.node)}baseIndentFor(e){let t=this.state.doc.lineAt(e.from);for(;;){let i=e.resolve(t.from);for(;i.parent&&i.parent.from==i.from;)i=i.parent;if(q(i,e))break;t=this.state.doc.lineAt(i.from)}return this.lineIndent(t.from)}continue(){return X(this.context.next,this.base,this.pos)}}function q(e,t){for(let i=t;i;i=i.parent)if(e==i)return!0;return!1}function B(e,t,i,n,r){let o=e.textAfter,s=o.match(/^\s*/)[0].length,a=n&&o.slice(s,s+n.length)==n||r==e.pos+s,l=t?function(e){let t=e.node,i=t.childAfter(t.from),n=t.lastChild;if(!i)return null;let r=e.options.simulateBreak,o=e.state.doc.lineAt(i.from),s=null==r||r<=o.from?o.to:Math.min(o.to,r);for(let e=i.to;;){let r=t.childAfter(e);if(!r||r==n)return null;if(!r.type.isSkipped){if(r.from>=s)return null;let e=/^ */.exec(o.text.slice(i.to-o.from))[0].length;return{from:i.from,to:i.to+e}}e=r.to}}(e):null;return l?a?e.column(l.from):e.column(l.to):e.baseIndent+(a?0:e.unit*i)}const D=o.Facet.define(),z=new r.NodeProp;function L(e){let t=e.lastChild;return t&&t.to==e.to&&t.type.isError}function j(e,t,i){for(let n of e.facet(D)){let r=n(e,t,i);if(r)return r}return function(e,t,i){let n=O(e);if(n.length<i)return null;let r=null;for(let o=n.resolveStack(i,1);o;o=o.next){let s=o.node;if(s.to<=i||s.from>i)continue;if(r&&s.from<t)break;let a=s.type.prop(z);if(a&&(s.to<n.length-50||n.length==e.doc.length||!L(s))){let n=a(s,e);n&&n.from<=i&&n.from>=t&&n.to>i&&(r=n)}}return r}(e,t,i)}function W(e,t){let i=t.mapPos(e.from,1),n=t.mapPos(e.to,-1);return i>=n?void 0:{from:i,to:n}}const Y=o.StateEffect.define({map:W}),I=o.StateEffect.define({map:W});function G(e){let t=[];for(let{head:i}of e.state.selection.ranges)t.some((e=>e.from<=i&&e.to>=i))||t.push(e.lineBlockAt(i));return t}const U=o.StateField.define({create:()=>s.Decoration.none,update(e,t){e=e.map(t.changes);for(let i of t.effects)if(i.is(Y)&&!F(e,i.value.from,i.value.to)){let{preparePlaceholder:n}=t.state.facet(se),r=n?s.Decoration.replace({widget:new ce(n(t.state,i.value))}):he;e=e.update({add:[r.range(i.value.from,i.value.to)]})}else i.is(I)&&(e=e.update({filter:(e,t)=>i.value.from!=e||i.value.to!=t,filterFrom:i.value.from,filterTo:i.value.to}));if(t.selection){let i=!1,{head:n}=t.selection.main;e.between(n,n,((e,t)=>{e<n&&t>n&&(i=!0)})),i&&(e=e.update({filterFrom:n,filterTo:n,filter:(e,t)=>t<=n||e>=n}))}return e},provide:e=>s.EditorView.decorations.from(e),toJSON(e,t){let i=[];return e.between(0,t.doc.length,((e,t)=>{i.push(e,t)})),i},fromJSON(e){if(!Array.isArray(e)||e.length%2)throw new RangeError("Invalid JSON for fold state");let t=[];for(let i=0;i<e.length;){let n=e[i++],r=e[i++];if("number"!=typeof n||"number"!=typeof r)throw new RangeError("Invalid JSON for fold state");t.push(he.range(n,r))}return s.Decoration.set(t,!0)}});function N(e,t,i){var n;let r=null;return null===(n=e.field(U,!1))||void 0===n||n.between(t,i,((e,t)=>{(!r||r.from>e)&&(r={from:e,to:t})})),r}function F(e,t,i){let n=!1;return e.between(t,t,((e,r)=>{e==t&&r==i&&(n=!0)})),n}function H(e,t){return e.field(U,!1)?t:t.concat(o.StateEffect.appendConfig.of(ae()))}const K=e=>{for(let t of G(e)){let i=j(e.state,t.from,t.to);if(i)return e.dispatch({effects:H(e.state,[Y.of(i),ee(e,i)])}),!0}return!1},J=e=>{if(!e.state.field(U,!1))return!1;let t=[];for(let i of G(e)){let n=N(e.state,i.from,i.to);n&&t.push(I.of(n),ee(e,n,!1))}return t.length&&e.dispatch({effects:t}),t.length>0};function ee(e,t,i=!0){let n=e.state.doc.lineAt(t.from).number,r=e.state.doc.lineAt(t.to).number;return s.EditorView.announce.of(`${e.state.phrase(i?"Folded lines":"Unfolded lines")} ${n} ${e.state.phrase("to")} ${r}.`)}const te=e=>{let{state:t}=e,i=[];for(let n=0;n<t.doc.length;){let r=e.lineBlockAt(n),o=j(t,r.from,r.to);o&&i.push(Y.of(o)),n=(o?e.lineBlockAt(o.to):r).to+1}return i.length&&e.dispatch({effects:H(e.state,i)}),!!i.length},ie=e=>{let t=e.state.field(U,!1);if(!t||!t.size)return!1;let i=[];return t.between(0,e.state.doc.length,((e,t)=>{i.push(I.of({from:e,to:t}))})),e.dispatch({effects:i}),!0};function ne(e,t){for(let i=t;;){let n=j(e.state,i.from,i.to);if(n&&n.to>t.from)return n;if(!i.from)return null;i=e.lineBlockAt(i.from-1)}}const re=[{key:"Ctrl-Shift-[",mac:"Cmd-Alt-[",run:K},{key:"Ctrl-Shift-]",mac:"Cmd-Alt-]",run:J},{key:"Ctrl-Alt-[",run:te},{key:"Ctrl-Alt-]",run:ie}],oe={placeholderDOM:null,preparePlaceholder:null,placeholderText:"…"},se=o.Facet.define({combine:e=>o.combineConfig(e,oe)});function ae(e){let t=[U,fe];return e&&t.push(se.of(e)),t}function le(e,t){let{state:i}=e,n=i.facet(se),r=t=>{let i=e.lineBlockAt(e.posAtDOM(t.target)),n=N(e.state,i.from,i.to);n&&e.dispatch({effects:I.of(n)}),t.preventDefault()};if(n.placeholderDOM)return n.placeholderDOM(e,r,t);let o=document.createElement("span");return o.textContent=n.placeholderText,o.setAttribute("aria-label",i.phrase("folded code")),o.title=i.phrase("unfold"),o.className="cm-foldPlaceholder",o.onclick=r,o}const he=s.Decoration.replace({widget:new class extends s.WidgetType{toDOM(e){return le(e,null)}}});class ce extends s.WidgetType{constructor(e){super(),this.value=e}eq(e){return this.value==e.value}toDOM(e){return le(e,this.value)}}const de={openText:"⌄",closedText:"›",markerDOM:null,domEventHandlers:{},foldingChanged:()=>!1};class ue extends s.GutterMarker{constructor(e,t){super(),this.config=e,this.open=t}eq(e){return this.config==e.config&&this.open==e.open}toDOM(e){if(this.config.markerDOM)return this.config.markerDOM(this.open);let t=document.createElement("span");return t.textContent=this.open?this.config.openText:this.config.closedText,t.title=e.state.phrase(this.open?"Fold line":"Unfold line"),t}}const fe=s.EditorView.baseTheme({".cm-foldPlaceholder":{backgroundColor:"#eee",border:"1px solid #ddd",color:"#888",borderRadius:".2em",margin:"0 1px",padding:"0 1px",cursor:"pointer"},".cm-foldGutter span":{padding:"0 1px",cursor:"pointer"}});class pe{constructor(e,t){let i;function n(e){let t=l.StyleModule.newName();return(i||(i=Object.create(null)))["."+t]=e,t}this.specs=e;const r="string"==typeof t.all?t.all:t.all?n(t.all):void 0,o=t.scope;this.scope=o instanceof u?e=>e.prop(h)==o.data:o?e=>e==o:void 0,this.style=a.tagHighlighter(e.map((e=>({tag:e.tag,class:e.class||n(Object.assign({},e,{tag:null}))}))),{all:r}).style,this.module=i?new l.StyleModule(i):null,this.themeType=t.themeType}static define(e,t){return new pe(e,t||{})}}const Oe=o.Facet.define(),me=o.Facet.define({combine:e=>e.length?[e[0]]:null});function ge(e){let t=e.facet(Oe);return t.length?t:e.facet(me)}const be=o.Prec.high(s.ViewPlugin.fromClass(class{constructor(e){this.markCache=Object.create(null),this.tree=O(e.state),this.decorations=this.buildDeco(e,ge(e.state)),this.decoratedTo=e.viewport.to}update(e){let t=O(e.state),i=ge(e.state),n=i!=ge(e.startState),{viewport:r}=e.view,o=e.changes.mapPos(this.decoratedTo,1);t.length<r.to&&!n&&t.type==this.tree.type&&o>=r.to?(this.decorations=this.decorations.map(e.changes),this.decoratedTo=o):(t!=this.tree||e.viewportChanged||n)&&(this.tree=t,this.decorations=this.buildDeco(e.view,i),this.decoratedTo=r.to)}buildDeco(e,t){if(!t||!this.tree.length)return s.Decoration.none;let i=new o.RangeSetBuilder;for(let{from:n,to:r}of e.visibleRanges)a.highlightTree(this.tree,t,((e,t,n)=>{i.add(e,t,this.markCache[n]||(this.markCache[n]=s.Decoration.mark({class:n})))}),n,r);return i.finish()}},{decorations:e=>e.decorations})),we=pe.define([{tag:a.tags.meta,color:"#404740"},{tag:a.tags.link,textDecoration:"underline"},{tag:a.tags.heading,textDecoration:"underline",fontWeight:"bold"},{tag:a.tags.emphasis,fontStyle:"italic"},{tag:a.tags.strong,fontWeight:"bold"},{tag:a.tags.strikethrough,textDecoration:"line-through"},{tag:a.tags.keyword,color:"#708"},{tag:[a.tags.atom,a.tags.bool,a.tags.url,a.tags.contentSeparator,a.tags.labelName],color:"#219"},{tag:[a.tags.literal,a.tags.inserted],color:"#164"},{tag:[a.tags.string,a.tags.deleted],color:"#a11"},{tag:[a.tags.regexp,a.tags.escape,a.tags.special(a.tags.string)],color:"#e40"},{tag:a.tags.definition(a.tags.variableName),color:"#00f"},{tag:a.tags.local(a.tags.variableName),color:"#30a"},{tag:[a.tags.typeName,a.tags.namespace],color:"#085"},{tag:a.tags.className,color:"#167"},{tag:[a.tags.special(a.tags.variableName),a.tags.macroName],color:"#256"},{tag:a.tags.definition(a.tags.propertyName),color:"#00c"},{tag:a.tags.comment,color:"#940"},{tag:a.tags.invalid,color:"#f00"}]),ye=s.EditorView.baseTheme({"&.cm-focused .cm-matchingBracket":{backgroundColor:"#328c8252"},"&.cm-focused .cm-nonmatchingBracket":{backgroundColor:"#bb555544"}}),ve="()[]{}",xe=o.Facet.define({combine:e=>o.combineConfig(e,{afterCursor:!0,brackets:ve,maxScanDistance:1e4,renderMatch:Ae})}),Se=s.Decoration.mark({class:"cm-matchingBracket"}),ke=s.Decoration.mark({class:"cm-nonmatchingBracket"});function Ae(e){let t=[],i=e.matched?Se:ke;return t.push(i.range(e.start.from,e.start.to)),e.end&&t.push(i.range(e.end.from,e.end.to)),t}const Qe=[o.StateField.define({create:()=>s.Decoration.none,update(e,t){if(!t.docChanged&&!t.selection)return e;let i=[],n=t.state.facet(xe);for(let e of t.state.selection.ranges){if(!e.empty)continue;let r=Ze(t.state,e.head,-1,n)||e.head>0&&Ze(t.state,e.head-1,1,n)||n.afterCursor&&(Ze(t.state,e.head,1,n)||e.head<t.state.doc.length&&Ze(t.state,e.head+1,-1,n));r&&(i=i.concat(n.renderMatch(r,t.state)))}return s.Decoration.set(i,!0)},provide:e=>s.EditorView.decorations.from(e)}),ye],Pe=new r.NodeProp;function Ce(e,t,i){let n=e.prop(t<0?r.NodeProp.openedBy:r.NodeProp.closedBy);if(n)return n;if(1==e.name.length){let n=i.indexOf(e.name);if(n>-1&&n%2==(t<0?1:0))return[i[n+t]]}return null}function $e(e){let t=e.type.prop(Pe);return t?t(e.node):e}function Ze(e,t,i,n={}){let r=n.maxScanDistance||1e4,o=n.brackets||ve,s=O(e),a=s.resolveInner(t,i);for(let e=a;e;e=e.parent){let n=Ce(e.type,i,o);if(n&&e.from<e.to){let r=$e(e);if(r&&(i>0?t>=r.from&&t<r.to:t>r.from&&t<=r.to))return Te(0,0,i,e,r,n,o)}}return function(e,t,i,n,r,o,s){let a=i<0?e.sliceDoc(t-1,t):e.sliceDoc(t,t+1),l=s.indexOf(a);if(l<0||l%2==0!=i>0)return null;let h={from:i<0?t-1:t,to:i>0?t+1:t},c=e.doc.iterRange(t,i>0?e.doc.length:0),d=0;for(let e=0;!c.next().done&&e<=o;){let o=c.value;i<0&&(e+=o.length);let a=t+e*i;for(let e=i>0?0:o.length-1,t=i>0?o.length:-1;e!=t;e+=i){let t=s.indexOf(o[e]);if(!(t<0||n.resolveInner(a+e,1).type!=r))if(t%2==0==i>0)d++;else{if(1==d)return{start:h,end:{from:a+e,to:a+e+1},matched:t>>1==l>>1};d--}}i>0&&(e+=o.length)}return c.done?{start:h,matched:!1}:null}(e,t,i,s,a.type,r,o)}function Te(e,t,i,n,r,o,s){let a=n.parent,l={from:r.from,to:r.to},h=0,c=null==a?void 0:a.cursor();if(c&&(i<0?c.childBefore(n.from):c.childAfter(n.to)))do{if(i<0?c.to<=n.from:c.from>=n.to){if(0==h&&o.indexOf(c.type.name)>-1&&c.from<c.to){let e=$e(c);return{start:l,end:e?{from:e.from,to:e.to}:void 0,matched:!0}}if(Ce(c.type,i,s))h++;else if(Ce(c.type,-i,s)){if(0==h){let e=$e(c);return{start:l,end:e&&e.from<e.to?{from:e.from,to:e.to}:void 0,matched:!1}}h--}}}while(i<0?c.prevSibling():c.nextSibling());return{start:l,matched:!1}}function Me(e,t,i,n=0,r=0){null==t&&-1==(t=e.search(/[^\s\u00a0]/))&&(t=e.length);let o=r;for(let r=n;r<t;r++)9==e.charCodeAt(r)?o+=i-o%i:o++;return o}class Ee{constructor(e,t,i,n){this.string=e,this.tabSize=t,this.indentUnit=i,this.overrideIndent=n,this.pos=0,this.start=0,this.lastColumnPos=0,this.lastColumnValue=0}eol(){return this.pos>=this.string.length}sol(){return 0==this.pos}peek(){return this.string.charAt(this.pos)||void 0}next(){if(this.pos<this.string.length)return this.string.charAt(this.pos++)}eat(e){let t,i=this.string.charAt(this.pos);if(t="string"==typeof e?i==e:i&&(e instanceof RegExp?e.test(i):e(i)),t)return++this.pos,i}eatWhile(e){let t=this.pos;for(;this.eat(e););return this.pos>t}eatSpace(){let e=this.pos;for(;/[\s\u00a0]/.test(this.string.charAt(this.pos));)++this.pos;return this.pos>e}skipToEnd(){this.pos=this.string.length}skipTo(e){let t=this.string.indexOf(e,this.pos);if(t>-1)return this.pos=t,!0}backUp(e){this.pos-=e}column(){return this.lastColumnPos<this.start&&(this.lastColumnValue=Me(this.string,this.start,this.tabSize,this.lastColumnPos,this.lastColumnValue),this.lastColumnPos=this.start),this.lastColumnValue}indentation(){var e;return null!==(e=this.overrideIndent)&&void 0!==e?e:Me(this.string,null,this.tabSize)}match(e,t,i){if("string"==typeof e){let n=e=>i?e.toLowerCase():e;return n(this.string.substr(this.pos,e.length))==n(e)?(!1!==t&&(this.pos+=e.length),!0):null}{let i=this.string.slice(this.pos).match(e);return i&&i.index>0?null:(i&&!1!==t&&(this.pos+=i[0].length),i)}}current(){return this.string.slice(this.start,this.pos)}}function Xe(e){if("object"!=typeof e)return e;let t={};for(let i in e){let n=e[i];t[i]=n instanceof Array?n.slice():n}return t}const Re=new WeakMap;class _e extends u{constructor(e){let t,i=c(e.languageData),n={name:(o=e).name||"",token:o.token,blankLine:o.blankLine||(()=>{}),startState:o.startState||(()=>!0),copyState:o.copyState||Xe,indent:o.indent||(()=>null),languageData:o.languageData||{},tokenTable:o.tokenTable||ze};var o;super(i,new class extends r.Parser{createParse(e,i,n){return new Be(t,e,i,n)}},[],e.name),this.topNode=function(e,t){let i=r.NodeType.define({id:Le.length,name:"Document",props:[h.add((()=>e)),E.add((()=>e=>t.getIndent(e)))],top:!0});return Le.push(i),i}(i,this),t=this,this.streamParser=n,this.stateAfter=new r.NodeProp({perNode:!0}),this.tokenTable=e.tokenTable?new Ge(n.tokenTable):Ue}static define(e){return new _e(e)}getIndent(e){let t,{overrideIndentation:i}=e.options;i&&(t=Re.get(e.state),null!=t&&t<e.pos-1e4&&(t=void 0));let n,r,o=Ve(this,e.node.tree,0,e.node.from,null!=t?t:e.pos);if(o?(r=o.state,n=o.pos+1):(r=this.streamParser.startState(e.unit),n=0),e.pos-n>1e4)return null;for(;n<e.pos;){let t=e.state.doc.lineAt(n),o=Math.min(e.pos,t.to);if(t.length){let n=i?i(t.from):-1,s=new Ee(t.text,e.state.tabSize,e.unit,n<0?void 0:n);for(;s.pos<o-t.from;)De(this.streamParser.token,s,r)}else this.streamParser.blankLine(r,e.unit);if(o==e.pos)break;n=t.to+1}let s=e.lineAt(e.pos);return i&&null==t&&Re.set(e.state,s.from),this.streamParser.indent(r,/^\s*(.*)/.exec(s.text)[1],e)}get allowsNesting(){return!1}}function Ve(e,t,i,n,o){let s=i>=n&&i+t.length<=o&&t.prop(e.stateAfter);if(s)return{state:e.streamParser.copyState(s),pos:i+t.length};for(let s=t.children.length-1;s>=0;s--){let a=t.children[s],l=i+t.positions[s],h=a instanceof r.Tree&&l<o&&Ve(e,a,l,n,o);if(h)return h}return null}function qe(e,t,i,n,o){if(o&&i<=0&&n>=t.length)return t;o||0!=i||t.type!=e.topNode||(o=!0);for(let s=t.children.length-1;s>=0;s--){let a,l=t.positions[s],h=t.children[s];if(l<n&&h instanceof r.Tree){if(!(a=qe(e,h,i-l,n-l,o)))break;return o?new r.Tree(t.type,t.children.slice(0,s).concat(a),t.positions.slice(0,s+1),l+a.length):a}}return null}class Be{constructor(e,t,i,n){this.lang=e,this.input=t,this.fragments=i,this.ranges=n,this.stoppedAt=null,this.chunks=[],this.chunkPos=[],this.chunk=[],this.chunkReused=void 0,this.rangeIndex=0,this.to=n[n.length-1].to;let o=w.get(),s=n[0].from,{state:a,tree:l}=function(e,t,i,n,o){for(let r of t){let t,o=r.from+(r.openStart?25:0),s=r.to-(r.openEnd?25:0),a=o<=i&&s>i&&Ve(e,r.tree,0-r.offset,i,s);if(a&&a.pos<=n&&(t=qe(e,r.tree,i+r.offset,a.pos+r.offset,!1)))return{state:a.state,tree:t}}return{state:e.streamParser.startState(o?$(o):4),tree:r.Tree.empty}}(e,i,s,this.to,null==o?void 0:o.state);this.state=a,this.parsedPos=this.chunkStart=s+l.length;for(let e=0;e<l.children.length;e++)this.chunks.push(l.children[e]),this.chunkPos.push(l.positions[e]);o&&this.parsedPos<o.viewport.from-1e5&&n.some((e=>e.from<=o.viewport.from&&e.to>=o.viewport.from))&&(this.state=this.lang.streamParser.startState($(o.state)),o.skipUntilInView(this.parsedPos,o.viewport.from),this.parsedPos=o.viewport.from),this.moveRangeIndex()}advance(){let e=w.get(),t=null==this.stoppedAt?this.to:Math.min(this.to,this.stoppedAt),i=Math.min(t,this.chunkStart+2048);for(e&&(i=Math.min(i,e.viewport.to));this.parsedPos<i;)this.parseLine(e);return this.chunkStart<this.parsedPos&&this.finishChunk(),this.parsedPos>=t?this.finish():e&&this.parsedPos>=e.viewport.to?(e.skipUntilInView(this.parsedPos,t),this.finish()):null}stopAt(e){this.stoppedAt=e}lineAfter(e){let t=this.input.chunk(e);if(this.input.lineChunks)"\n"==t&&(t="");else{let e=t.indexOf("\n");e>-1&&(t=t.slice(0,e))}return e+t.length<=this.to?t:t.slice(0,this.to-e)}nextLine(){let e=this.parsedPos,t=this.lineAfter(e),i=e+t.length;for(let e=this.rangeIndex;;){let n=this.ranges[e].to;if(n>=i)break;if(t=t.slice(0,n-(i-t.length)),e++,e==this.ranges.length)break;let r=this.ranges[e].from,o=this.lineAfter(r);t+=o,i=r+o.length}return{line:t,end:i}}skipGapsTo(e,t,i){for(;;){let n=this.ranges[this.rangeIndex].to,r=e+t;if(i>0?n>r:n>=r)break;t+=this.ranges[++this.rangeIndex].from-n}return t}moveRangeIndex(){for(;this.ranges[this.rangeIndex].to<this.parsedPos;)this.rangeIndex++}emitToken(e,t,i,n){let r=4;if(this.ranges.length>1){t+=n=this.skipGapsTo(t,n,1);let e=this.chunk.length;i+=n=this.skipGapsTo(i,n,-1),r+=this.chunk.length-e}let o=this.chunk.length-4;return 4==r&&o>=0&&this.chunk[o]==e&&this.chunk[o+2]==t?this.chunk[o+2]=i:this.chunk.push(e,t,i,r),n}parseLine(e){let{line:t,end:i}=this.nextLine(),n=0,{streamParser:r}=this.lang,o=new Ee(t,e?e.state.tabSize:4,e?$(e.state):2);if(o.eol())r.blankLine(this.state,o.indentUnit);else for(;!o.eol();){let e=De(r.token,o,this.state);if(e&&(n=this.emitToken(this.lang.tokenTable.resolve(e),this.parsedPos+o.start,this.parsedPos+o.pos,n)),o.start>1e4)break}this.parsedPos=i,this.moveRangeIndex(),this.parsedPos<this.to&&this.parsedPos++}finishChunk(){let e=r.Tree.build({buffer:this.chunk,start:this.chunkStart,length:this.parsedPos-this.chunkStart,nodeSet:je,topID:0,maxBufferLength:2048,reused:this.chunkReused});e=new r.Tree(e.type,e.children,e.positions,e.length,[[this.lang.stateAfter,this.lang.streamParser.copyState(this.state)]]),this.chunks.push(e),this.chunkPos.push(this.chunkStart-this.ranges[0].from),this.chunk=[],this.chunkReused=void 0,this.chunkStart=this.parsedPos}finish(){return new r.Tree(this.lang.topNode,this.chunks,this.chunkPos,this.parsedPos-this.ranges[0].from).balance()}}function De(e,t,i){t.start=t.pos;for(let n=0;n<10;n++){let n=e(t,i);if(t.pos>t.start)return n}throw new Error("Stream parser failed to advance stream.")}const ze=Object.create(null),Le=[r.NodeType.none],je=new r.NodeSet(Le),We=[],Ye=Object.create(null),Ie=Object.create(null);for(let[e,t]of[["variable","variableName"],["variable-2","variableName.special"],["string-2","string.special"],["def","variableName.definition"],["tag","tagName"],["attribute","attributeName"],["type","typeName"],["builtin","variableName.standard"],["qualifier","modifier"],["error","invalid"],["header","heading"],["property","propertyName"]])Ie[e]=Fe(ze,t);class Ge{constructor(e){this.extra=e,this.table=Object.assign(Object.create(null),Ie)}resolve(e){return e?this.table[e]||(this.table[e]=Fe(this.extra,e)):0}}const Ue=new Ge(ze);function Ne(e,t){We.indexOf(e)>-1||(We.push(e),console.warn(t))}function Fe(e,t){let i=[];for(let n of t.split(" ")){let t=[];for(let i of n.split(".")){let n=e[i]||a.tags[i];n?"function"==typeof n?t.length?t=t.map(n):Ne(i,`Modifier ${i} used at start of tag`):t.length?Ne(i,`Tag ${i} used as modifier`):t=Array.isArray(n)?n:[n]:Ne(i,`Unknown highlighting tag ${i}`)}for(let e of t)i.push(e)}if(!i.length)return 0;let n=t.replace(/ /g,"_"),o=n+" "+i.map((e=>e.id)),s=Ye[o];if(s)return s.id;let l=Ye[o]=r.NodeType.define({id:Le.length,name:n,props:[a.styleTags({[n]:i})]});return Le.push(l),l.id}function He(e){return e.length<=4096&&/[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/.test(e)}function Ke(e){for(let t=e.iter();!t.next().done;)if(He(t.value))return!0;return!1}const Je=o.Facet.define({combine:e=>e.some((e=>e))}),et=s.ViewPlugin.fromClass(class{constructor(e){this.always=e.state.facet(Je)||e.textDirection!=s.Direction.LTR||e.state.facet(s.EditorView.perLineTextDirection),this.hasRTL=!this.always&&Ke(e.state.doc),this.tree=O(e.state),this.decorations=this.always||this.hasRTL?tt(e,this.tree,this.always):s.Decoration.none}update(e){let t=e.state.facet(Je)||e.view.textDirection!=s.Direction.LTR||e.state.facet(s.EditorView.perLineTextDirection);if(t||this.hasRTL||!function(e){let t=!1;return e.iterChanges(((e,i,n,r,o)=>{!t&&Ke(o)&&(t=!0)})),t}(e.changes)||(this.hasRTL=!0),!t&&!this.hasRTL)return;let i=O(e.state);(t!=this.always||i!=this.tree||e.docChanged||e.viewportChanged)&&(this.tree=i,this.always=t,this.decorations=tt(e.view,i,t))}},{provide:e=>{function t(t){var i,n;return null!==(n=null===(i=t.plugin(e))||void 0===i?void 0:i.decorations)&&void 0!==n?n:s.Decoration.none}return[s.EditorView.outerDecorations.of(t),o.Prec.lowest(s.EditorView.bidiIsolatedRanges.of(t))]}});function tt(e,t,i){let n=new o.RangeSetBuilder,s=e.visibleRanges;i||(s=function(e,t){let i=t.iter(),n=0,r=[],o=null;for(let{from:t,to:s}of e)if(!(o&&o.to>t&&(t=o.to,t>=s)))for(n+i.value.length<t&&(i.next(t-(n+i.value.length)),n=t);;){let e=n,t=n+i.value.length;if(!i.lineBreak&&He(i.value)&&(o&&o.to>e-10?o.to=Math.min(s,t):r.push(o={from:e,to:Math.min(s,t)})),t>=s)break;n=t,i.next()}return r}(s,e.state.doc));for(let{from:e,to:i}of s)t.iterate({enter:e=>{let t=e.type.prop(r.NodeProp.isolate);t&&n.add(e.from,e.to,it[t])},from:e,to:i});return n.finish()}const it={rtl:s.Decoration.mark({class:"cm-iso",inclusive:!0,attributes:{dir:"rtl"},bidiIsolate:s.Direction.RTL}),ltr:s.Decoration.mark({class:"cm-iso",inclusive:!0,attributes:{dir:"ltr"},bidiIsolate:s.Direction.LTR}),auto:s.Decoration.mark({class:"cm-iso",inclusive:!0,attributes:{dir:"auto"},bidiIsolate:null})};t.DocInput=g,t.HighlightStyle=pe,t.IndentContext=M,t.LRLanguage=p,t.Language=u,t.LanguageDescription=Q,t.LanguageSupport=class{constructor(e,t=[]){this.language=e,this.support=t,this.extension=[e,t]}},t.ParseContext=w,t.StreamLanguage=_e,t.StringStream=Ee,t.TreeIndentContext=V,t.bidiIsolates=function(e={}){let t=[et];return e.alwaysIsolate&&t.push(Je.of(!0)),t},t.bracketMatching=function(e={}){return[xe.of(e),Qe]},t.bracketMatchingHandle=Pe,t.codeFolding=ae,t.continuedIndent=function({except:e,units:t=1}={}){return i=>{let n=e&&e.test(i.textAfter);return i.baseIndent+(n?0:t*i.unit)}},t.defaultHighlightStyle=we,t.defineLanguageFacet=c,t.delimitedIndent=function({closing:e,align:t=!0,units:i=1}){return n=>B(n,t,i,e)},t.ensureSyntaxTree=m,t.flatIndent=e=>e.baseIndent,t.foldAll=te,t.foldCode=K,t.foldEffect=Y,t.foldGutter=function(e={}){let t=Object.assign(Object.assign({},de),e),i=new ue(t,!0),n=new ue(t,!1),r=s.ViewPlugin.fromClass(class{constructor(e){this.from=e.viewport.from,this.markers=this.buildMarkers(e)}update(e){(e.docChanged||e.viewportChanged||e.startState.facet(A)!=e.state.facet(A)||e.startState.field(U,!1)!=e.state.field(U,!1)||O(e.startState)!=O(e.state)||t.foldingChanged(e))&&(this.markers=this.buildMarkers(e.view))}buildMarkers(e){let t=new o.RangeSetBuilder;for(let r of e.viewportLineBlocks){let o=N(e.state,r.from,r.to)?n:j(e.state,r.from,r.to)?i:null;o&&t.add(r.from,r.from,o)}return t.finish()}}),{domEventHandlers:a}=t;return[r,s.gutter({class:"cm-foldGutter",markers(e){var t;return(null===(t=e.plugin(r))||void 0===t?void 0:t.markers)||o.RangeSet.empty},initialSpacer:()=>new ue(t,!1),domEventHandlers:Object.assign(Object.assign({},a),{click:(e,t,i)=>{if(a.click&&a.click(e,t,i))return!0;let n=N(e.state,t.from,t.to);if(n)return e.dispatch({effects:I.of(n)}),!0;let r=j(e.state,t.from,t.to);return!!r&&(e.dispatch({effects:Y.of(r)}),!0)}})}),ae()]},t.foldInside=function(e){let t=e.firstChild,i=e.lastChild;return t&&t.to<i.from?{from:t.to,to:i.type.isError?e.to:i.from}:null},t.foldKeymap=re,t.foldNodeProp=z,t.foldService=D,t.foldState=U,t.foldable=j,t.foldedRanges=function(e){return e.field(U,!1)||o.RangeSet.empty},t.forceParsing=function(e,t=e.viewport.to,i=100){let n=m(e.state,t,i);return n!=O(e.state)&&e.dispatch({}),!!n},t.getIndentUnit=$,t.getIndentation=T,t.highlightingFor=function(e,t,i){let n=ge(e),r=null;if(n)for(let e of n)if(!e.scope||i&&e.scope(i)){let i=e.style(t);i&&(r=r?r+" "+i:i)}return r},t.indentNodeProp=E,t.indentOnInput=function(){return o.EditorState.transactionFilter.of((e=>{if(!e.docChanged||!e.isUserEvent("input.type")&&!e.isUserEvent("input.complete"))return e;let t=e.startState.languageDataAt("indentOnInput",e.startState.selection.main.head);if(!t.length)return e;let i=e.newDoc,{head:n}=e.newSelection.main,r=i.lineAt(n);if(n>r.from+200)return e;let o=i.sliceString(r.from,n);if(!t.some((e=>e.test(o))))return e;let{state:s}=e,a=-1,l=[];for(let{head:e}of s.selection.ranges){let t=s.doc.lineAt(e);if(t.from==a)continue;a=t.from;let i=T(s,t.from);if(null==i)continue;let n=/^\s*/.exec(t.text)[0],r=Z(s,i);n!=r&&l.push({from:t.from,to:t.from+n.length,insert:r})}return l.length?[e,{changes:l,sequential:!0}]:e}))},t.indentRange=function(e,t,i){let n=Object.create(null),r=new M(e,{overrideIndentation:e=>{var t;return null!==(t=n[e])&&void 0!==t?t:-1}}),o=[];for(let s=t;s<=i;){let t=e.doc.lineAt(s);s=t.to+1;let i=T(r,t.from);if(null==i)continue;/\S/.test(t.text)||(i=0);let a=/^\s*/.exec(t.text)[0],l=Z(e,i);a!=l&&(n[t.from]=i,o.push({from:t.from,to:t.from+a.length,insert:l}))}return e.changes(o)},t.indentService=P,t.indentString=Z,t.indentUnit=C,t.language=A,t.languageDataProp=h,t.matchBrackets=Ze,t.sublanguageProp=d,t.syntaxHighlighting=function(e,t){let i,n=[be];return e instanceof pe&&(e.module&&n.push(s.EditorView.styleModule.of(e.module)),i=e.themeType),(null==t?void 0:t.fallback)?n.push(me.of(e)):i?n.push(Oe.computeN([s.EditorView.darkTheme],(t=>t.facet(s.EditorView.darkTheme)==("dark"==i)?[e]:[]))):n.push(Oe.of(e)),n},t.syntaxParserRunning=function(e){var t;return(null===(t=e.plugin(k))||void 0===t?void 0:t.isWorking())||!1},t.syntaxTree=O,t.syntaxTreeAvailable=function(e,t=e.doc.length){var i;return(null===(i=e.field(u.state,!1))||void 0===i?void 0:i.context.isDone(t))||!1},t.toggleFold=e=>{let t=[];for(let i of G(e)){let n=N(e.state,i.from,i.to);if(n)t.push(I.of(n),ee(e,n,!1));else{let n=ne(e,i);n&&t.push(Y.of(n),ee(e,n))}}return t.length>0&&e.dispatch({effects:H(e.state,t)}),!!t.length},t.unfoldAll=ie,t.unfoldCode=J,t.unfoldEffect=I},4126:(e,t,i)=>{"use strict";var n=i(1506),r=i(9064),o=i(8748);class s{constructor(e,t,i){this.from=e,this.to=t,this.diagnostic=i}}class a{constructor(e,t,i){this.diagnostics=e,this.panel=t,this.selected=i}static init(e,t,i){let o=e,s=i.facet(S).markerFilter;s&&(o=s(o,i));let h=e.slice().sort(((e,t)=>e.from-t.from||e.to-t.to)),c=new r.RangeSetBuilder,d=[],u=0;for(let e=0;;){let t,r,o=e==h.length?null:h[e];if(!o&&!d.length)break;for(d.length?(t=u,r=d.reduce(((e,t)=>Math.min(e,t.to)),o&&o.from>t?o.from:1e8)):(t=o.from,r=o.to,d.push(o),e++);e<h.length;){let i=h[e];if(i.from!=t||!(i.to>i.from||i.to==t)){r=Math.min(i.from,r);break}d.push(i),e++,r=Math.min(i.to,r)}let s=E(d);if(d.some((e=>e.from==e.to||e.from==e.to-1&&i.doc.lineAt(e.from).to==e.from)))c.add(t,t,n.Decoration.widget({widget:new Q(s),diagnostics:d.slice()}));else{let e=d.reduce(((e,t)=>t.markClass?e+" "+t.markClass:e),"");c.add(t,r,n.Decoration.mark({class:"cm-lintRange cm-lintRange-"+s+e,diagnostics:d.slice(),inclusiveEnd:d.some((e=>e.to>r))}))}u=r;for(let e=0;e<d.length;e++)d[e].to<=u&&d.splice(e--,1)}let f=c.finish();return new a(f,t,l(f))}}function l(e,t=null,i=0){let n=null;return e.between(i,1e9,((e,i,{spec:r})=>{if(!(t&&r.diagnostics.indexOf(t)<0))if(n){if(r.diagnostics.indexOf(n.diagnostic)<0)return!1;n=new s(n.from,i,n.diagnostic)}else n=new s(e,i,t||r.diagnostics[0])})),n}function h(e,t){let i=t.pos,n=t.end||i,r=e.state.facet(S).hideOn(e,i,n);if(null!=r)return r;let o=e.startState.doc.lineAt(t.pos);return!(!e.effects.some((e=>e.is(u)))&&!e.changes.touchesRange(o.from,Math.max(o.to,n)))}function c(e,t){return e.field(O,!1)?t:t.concat(r.StateEffect.appendConfig.of(z))}function d(e,t){return{effects:c(e,[u.of(t)])}}const u=r.StateEffect.define(),f=r.StateEffect.define(),p=r.StateEffect.define(),O=r.StateField.define({create:()=>new a(n.Decoration.none,null,null),update(e,t){if(t.docChanged&&e.diagnostics.size){let i=e.diagnostics.map(t.changes),n=null,r=e.panel;if(e.selected){let r=t.changes.mapPos(e.selected.from,1);n=l(i,e.selected.diagnostic,r)||l(i,null,r)}!i.size&&r&&t.state.facet(S).autoPanel&&(r=null),e=new a(i,r,n)}for(let i of t.effects)if(i.is(u)){let n=t.state.facet(S).autoPanel?i.value.length?C.open:null:e.panel;e=a.init(i.value,n,t.state)}else i.is(f)?e=new a(e.diagnostics,i.value?C.open:null,e.selected):i.is(p)&&(e=new a(e.diagnostics,e.panel,i.value));return e},provide:e=>[n.showPanel.from(e,(e=>e.panel)),n.EditorView.decorations.from(e,(e=>e.diagnostics))]}),m=n.Decoration.mark({class:"cm-lintRange cm-lintRange-active"});function g(e,t){return o("ul",{class:"cm-tooltip-lint"},t.map((t=>A(e,t,!1))))}const b=e=>{let t=e.state.field(O,!1);t&&t.panel||e.dispatch({effects:c(e.state,[f.of(!0)])});let i=n.getPanel(e,C.open);return i&&i.dom.querySelector(".cm-panel-lint ul").focus(),!0},w=e=>{let t=e.state.field(O,!1);return!(!t||!t.panel||(e.dispatch({effects:f.of(!1)}),0))},y=e=>{let t=e.state.field(O,!1);if(!t)return!1;let i=e.state.selection.main,n=t.diagnostics.iter(i.to+1);return!(!n.value&&(n=t.diagnostics.iter(0),!n.value||n.from==i.from&&n.to==i.to)||(e.dispatch({selection:{anchor:n.from,head:n.to},scrollIntoView:!0}),0))},v=[{key:"Mod-Shift-m",run:b,preventDefault:!0},{key:"F8",run:y}],x=n.ViewPlugin.fromClass(class{constructor(e){this.view=e,this.timeout=-1,this.set=!0;let{delay:t}=e.state.facet(S);this.lintTime=Date.now()+t,this.run=this.run.bind(this),this.timeout=setTimeout(this.run,t)}run(){clearTimeout(this.timeout);let e=Date.now();if(e<this.lintTime-10)this.timeout=setTimeout(this.run,this.lintTime-e);else{this.set=!1;let{state:e}=this.view,{sources:t}=e.facet(S);t.length&&function(e,t,i){let n=[],r=-1;for(let o of e)o.then((i=>{n.push(i),clearTimeout(r),n.length==e.length?t(n):r=setTimeout((()=>t(n)),200)}),i)}(t.map((e=>Promise.resolve(e(this.view)))),(t=>{this.view.state.doc==e.doc&&this.view.dispatch(d(this.view.state,t.reduce(((e,t)=>e.concat(t)))))}),(e=>{n.logException(this.view.state,e)}))}}update(e){let t=e.state.facet(S);(e.docChanged||t!=e.startState.facet(S)||t.needsRefresh&&t.needsRefresh(e))&&(this.lintTime=Date.now()+t.delay,this.set||(this.set=!0,this.timeout=setTimeout(this.run,t.delay)))}force(){this.set&&(this.lintTime=Date.now(),this.run())}destroy(){clearTimeout(this.timeout)}}),S=r.Facet.define({combine:e=>Object.assign({sources:e.map((e=>e.source)).filter((e=>null!=e))},r.combineConfig(e.map((e=>e.config)),{delay:750,markerFilter:null,tooltipFilter:null,needsRefresh:null,hideOn:()=>null},{needsRefresh:(e,t)=>e?t?i=>e(i)||t(i):e:t}))});function k(e){let t=[];if(e)e:for(let{name:i}of e){for(let e=0;e<i.length;e++){let n=i[e];if(/[a-zA-Z]/.test(n)&&!t.some((e=>e.toLowerCase()==n.toLowerCase()))){t.push(n);continue e}}t.push("")}return t}function A(e,t,i){var n;let r=i?k(t.actions):[];return o("li",{class:"cm-diagnostic cm-diagnostic-"+t.severity},o("span",{class:"cm-diagnosticText"},t.renderMessage?t.renderMessage(e):t.message),null===(n=t.actions)||void 0===n?void 0:n.map(((i,n)=>{let s=!1,a=n=>{if(n.preventDefault(),s)return;s=!0;let r=l(e.state.field(O).diagnostics,t);r&&i.apply(e,r.from,r.to)},{name:h}=i,c=r[n]?h.indexOf(r[n]):-1,d=c<0?h:[h.slice(0,c),o("u",h.slice(c,c+1)),h.slice(c+1)];return o("button",{type:"button",class:"cm-diagnosticAction",onclick:a,onmousedown:a,"aria-label":` Action: ${h}${c<0?"":` (access key "${r[n]})"`}.`},d)})),t.source&&o("div",{class:"cm-diagnosticSource"},t.source))}class Q extends n.WidgetType{constructor(e){super(),this.sev=e}eq(e){return e.sev==this.sev}toDOM(){return o("span",{class:"cm-lintPoint cm-lintPoint-"+this.sev})}}class P{constructor(e,t){this.diagnostic=t,this.id="item_"+Math.floor(4294967295*Math.random()).toString(16),this.dom=A(e,t,!0),this.dom.id=this.id,this.dom.setAttribute("role","option")}}class C{constructor(e){this.view=e,this.items=[],this.list=o("ul",{tabIndex:0,role:"listbox","aria-label":this.view.state.phrase("Diagnostics"),onkeydown:t=>{if(27==t.keyCode)w(this.view),this.view.focus();else if(38==t.keyCode||33==t.keyCode)this.moveSelection((this.selectedIndex-1+this.items.length)%this.items.length);else if(40==t.keyCode||34==t.keyCode)this.moveSelection((this.selectedIndex+1)%this.items.length);else if(36==t.keyCode)this.moveSelection(0);else if(35==t.keyCode)this.moveSelection(this.items.length-1);else if(13==t.keyCode)this.view.focus();else{if(!(t.keyCode>=65&&t.keyCode<=90&&this.selectedIndex>=0))return;{let{diagnostic:i}=this.items[this.selectedIndex],n=k(i.actions);for(let r=0;r<n.length;r++)if(n[r].toUpperCase().charCodeAt(0)==t.keyCode){let t=l(this.view.state.field(O).diagnostics,i);t&&i.actions[r].apply(e,t.from,t.to)}}}t.preventDefault()},onclick:e=>{for(let t=0;t<this.items.length;t++)this.items[t].dom.contains(e.target)&&this.moveSelection(t)}}),this.dom=o("div",{class:"cm-panel-lint"},this.list,o("button",{type:"button",name:"close","aria-label":this.view.state.phrase("close"),onclick:()=>w(this.view)},"×")),this.update()}get selectedIndex(){let e=this.view.state.field(O).selected;if(!e)return-1;for(let t=0;t<this.items.length;t++)if(this.items[t].diagnostic==e.diagnostic)return t;return-1}update(){let{diagnostics:e,selected:t}=this.view.state.field(O),i=0,n=!1,r=null,o=new Set;for(e.between(0,this.view.state.doc.length,((e,s,{spec:a})=>{for(let e of a.diagnostics){if(o.has(e))continue;o.add(e);let s,a=-1;for(let t=i;t<this.items.length;t++)if(this.items[t].diagnostic==e){a=t;break}a<0?(s=new P(this.view,e),this.items.splice(i,0,s),n=!0):(s=this.items[a],a>i&&(this.items.splice(i,a-i),n=!0)),t&&s.diagnostic==t.diagnostic?s.dom.hasAttribute("aria-selected")||(s.dom.setAttribute("aria-selected","true"),r=s):s.dom.hasAttribute("aria-selected")&&s.dom.removeAttribute("aria-selected"),i++}}));i<this.items.length&&!(1==this.items.length&&this.items[0].diagnostic.from<0);)n=!0,this.items.pop();0==this.items.length&&(this.items.push(new P(this.view,{from:-1,to:-1,severity:"info",message:this.view.state.phrase("No diagnostics")})),n=!0),r?(this.list.setAttribute("aria-activedescendant",r.id),this.view.requestMeasure({key:this,read:()=>({sel:r.dom.getBoundingClientRect(),panel:this.list.getBoundingClientRect()}),write:({sel:e,panel:t})=>{let i=t.height/this.list.offsetHeight;e.top<t.top?this.list.scrollTop-=(t.top-e.top)/i:e.bottom>t.bottom&&(this.list.scrollTop+=(e.bottom-t.bottom)/i)}})):this.selectedIndex<0&&this.list.removeAttribute("aria-activedescendant"),n&&this.sync()}sync(){let e=this.list.firstChild;function t(){let t=e;e=t.nextSibling,t.remove()}for(let i of this.items)if(i.dom.parentNode==this.list){for(;e!=i.dom;)t();e=i.dom.nextSibling}else this.list.insertBefore(i.dom,e);for(;e;)t()}moveSelection(e){if(this.selectedIndex<0)return;let t=l(this.view.state.field(O).diagnostics,this.items[e].diagnostic);t&&this.view.dispatch({selection:{anchor:t.from,head:t.to},scrollIntoView:!0,effects:p.of(t)})}static open(e){return new C(e)}}function $(e,t='viewBox="0 0 40 40"'){return`url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${t}>${encodeURIComponent(e)}</svg>')`}function Z(e){return $(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${e}" fill="none" stroke-width=".7"/>`,'width="6" height="3"')}const T=n.EditorView.baseTheme({".cm-diagnostic":{padding:"3px 6px 3px 8px",marginLeft:"-1px",display:"block",whiteSpace:"pre-wrap"},".cm-diagnostic-error":{borderLeft:"5px solid #d11"},".cm-diagnostic-warning":{borderLeft:"5px solid orange"},".cm-diagnostic-info":{borderLeft:"5px solid #999"},".cm-diagnostic-hint":{borderLeft:"5px solid #66d"},".cm-diagnosticAction":{font:"inherit",border:"none",padding:"2px 4px",backgroundColor:"#444",color:"white",borderRadius:"3px",marginLeft:"8px",cursor:"pointer"},".cm-diagnosticSource":{fontSize:"70%",opacity:.7},".cm-lintRange":{backgroundPosition:"left bottom",backgroundRepeat:"repeat-x",paddingBottom:"0.7px"},".cm-lintRange-error":{backgroundImage:Z("#d11")},".cm-lintRange-warning":{backgroundImage:Z("orange")},".cm-lintRange-info":{backgroundImage:Z("#999")},".cm-lintRange-hint":{backgroundImage:Z("#66d")},".cm-lintRange-active":{backgroundColor:"#ffdd9980"},".cm-tooltip-lint":{padding:0,margin:0},".cm-lintPoint":{position:"relative","&:after":{content:'""',position:"absolute",bottom:0,left:"-2px",borderLeft:"3px solid transparent",borderRight:"3px solid transparent",borderBottom:"4px solid #d11"}},".cm-lintPoint-warning":{"&:after":{borderBottomColor:"orange"}},".cm-lintPoint-info":{"&:after":{borderBottomColor:"#999"}},".cm-lintPoint-hint":{"&:after":{borderBottomColor:"#66d"}},".cm-panel.cm-panel-lint":{position:"relative","& ul":{maxHeight:"100px",overflowY:"auto","& [aria-selected]":{backgroundColor:"#ddd","& u":{textDecoration:"underline"}},"&:focus [aria-selected]":{background_fallback:"#bdf",backgroundColor:"Highlight",color_fallback:"white",color:"HighlightText"},"& u":{textDecoration:"none"},padding:0,margin:0},"& [name=close]":{position:"absolute",top:"0",right:"2px",background:"inherit",border:"none",font:"inherit",padding:0,margin:0}}});function M(e){return"error"==e?4:"warning"==e?3:"info"==e?2:1}function E(e){let t="hint",i=1;for(let n of e){let e=M(n.severity);e>i&&(i=e,t=n.severity)}return t}class X extends n.GutterMarker{constructor(e){super(),this.diagnostics=e,this.severity=E(e)}toDOM(e){let t=document.createElement("div");t.className="cm-lint-marker cm-lint-marker-"+this.severity;let i=this.diagnostics,n=e.state.facet(L).tooltipFilter;return n&&(i=n(i,e.state)),i.length&&(t.onmouseover=()=>function(e,t,i){function n(){let n=e.elementAtHeight(t.getBoundingClientRect().top+5-e.documentTop);e.coordsAtPos(n.from)&&e.dispatch({effects:q.of({pos:n.from,above:!1,clip:!1,create:()=>({dom:g(e,i),getCoords:()=>t.getBoundingClientRect()})})}),t.onmouseout=t.onmousemove=null,function(e,t){let i=n=>{let r=t.getBoundingClientRect();if(!(n.clientX>r.left-10&&n.clientX<r.right+10&&n.clientY>r.top-10&&n.clientY<r.bottom+10)){for(let e=n.target;e;e=e.parentNode)if(1==e.nodeType&&e.classList.contains("cm-tooltip-lint"))return;window.removeEventListener("mousemove",i),e.state.field(B)&&e.dispatch({effects:q.of(null)})}};window.addEventListener("mousemove",i)}(e,t)}let{hoverTime:r}=e.state.facet(L),o=setTimeout(n,r);t.onmouseout=()=>{clearTimeout(o),t.onmouseout=t.onmousemove=null},t.onmousemove=()=>{clearTimeout(o),o=setTimeout(n,r)}}(e,t,i)),t}}function R(e,t){let i=Object.create(null);for(let n of t){let t=e.lineAt(n.from);(i[t.from]||(i[t.from]=[])).push(n)}let n=[];for(let e in i)n.push(new X(i[e]).range(+e));return r.RangeSet.of(n,!0)}const _=n.gutter({class:"cm-gutter-lint",markers:e=>e.state.field(V),widgetMarker:(e,t,i)=>{let n=[];return e.state.field(V).between(i.from,i.to,((e,t,r)=>{e>i.from&&e<i.to&&n.push(...r.diagnostics)})),n.length?new X(n):null}}),V=r.StateField.define({create:()=>r.RangeSet.empty,update(e,t){e=e.map(t.changes);let i=t.state.facet(L).markerFilter;for(let n of t.effects)if(n.is(u)){let r=n.value;i&&(r=i(r||[],t.state)),e=R(t.state.doc,r.slice(0))}return e}}),q=r.StateEffect.define(),B=r.StateField.define({create:()=>null,update:(e,t)=>(e&&t.docChanged&&(e=h(t,e)?null:Object.assign(Object.assign({},e),{pos:t.changes.mapPos(e.pos)})),t.effects.reduce(((e,t)=>t.is(q)?t.value:e),e)),provide:e=>n.showTooltip.from(e)}),D=n.EditorView.baseTheme({".cm-gutter-lint":{width:"1.4em","& .cm-gutterElement":{padding:".2em"}},".cm-lint-marker":{width:"1em",height:"1em"},".cm-lint-marker-info":{content:$('<path fill="#aaf" stroke="#77e" stroke-width="6" stroke-linejoin="round" d="M5 5L35 5L35 35L5 35Z"/>')},".cm-lint-marker-warning":{content:$('<path fill="#fe8" stroke="#fd7" stroke-width="6" stroke-linejoin="round" d="M20 6L37 35L3 35Z"/>')},".cm-lint-marker-error":{content:$('<circle cx="20" cy="20" r="15" fill="#f87" stroke="#f43" stroke-width="6"/>')}}),z=[O,n.EditorView.decorations.compute([O],(e=>{let{selected:t,panel:i}=e.field(O);return t&&i&&t.from!=t.to?n.Decoration.set([m.range(t.from,t.to)]):n.Decoration.none})),n.hoverTooltip((function(e,t,i){let n,{diagnostics:r}=e.state.field(O),o=-1,s=-1;r.between(t-(i<0?1:0),t+(i>0?1:0),((e,r,{spec:a})=>{if(t>=e&&t<=r&&(e==r||(t>e||i>0)&&(t<r||i<0)))return n=a.diagnostics,o=e,s=r,!1}));let a=e.state.facet(S).tooltipFilter;return n&&a&&(n=a(n,e.state)),n?{pos:o,end:s,above:e.state.doc.lineAt(o).to<s,create:()=>({dom:g(e,n)})}:null}),{hideOn:h}),T],L=r.Facet.define({combine:e=>r.combineConfig(e,{hoverTime:300,markerFilter:null,tooltipFilter:null})});t.closeLintPanel=w,t.diagnosticCount=function(e){let t=e.field(O,!1);return t?t.diagnostics.size:0},t.forEachDiagnostic=function(e,t){let i=e.field(O,!1);if(i&&i.diagnostics.size){let e=[],n=[],o=-1;for(let s=r.RangeSet.iter([i.diagnostics]);;s.next()){for(let i=0;i<e.length;i++)(!s.value||s.value.spec.diagnostics.indexOf(e[i])<0)&&(t(e[i],n[i],o),e.splice(i,1),n.splice(i--,1));if(!s.value)break;for(let t of s.value.spec.diagnostics)e.indexOf(t)<0&&(e.push(t),n.push(s.from));o=s.to}}},t.forceLinting=function(e){let t=e.plugin(x);t&&t.force()},t.lintGutter=function(e={}){return[L.of(e),V,_,D,B]},t.lintKeymap=v,t.linter=function(e,t={}){return[S.of({source:e,config:t}),x,z]},t.nextDiagnostic=y,t.openLintPanel=b,t.previousDiagnostic=e=>{let{state:t}=e,i=t.field(O,!1);if(!i)return!1;let n,r,o,s,a=t.selection.main;return i.diagnostics.between(0,t.doc.length,((e,t)=>{t<a.to&&(null==n||n<e)&&(n=e,r=t),(null==o||e>o)&&(o=e,s=t)})),null!=o&&(null!=n||o!=a.from)&&(e.dispatch({selection:{anchor:null!=n?n:o,head:null!=r?r:s},scrollIntoView:!0}),!0)},t.setDiagnostics=d,t.setDiagnosticsEffect=u},8539:(e,t,i)=>{"use strict";var n=i(1506),r=i(9064),o=i(8748);const s="function"==typeof String.prototype.normalize?e=>e.normalize("NFKD"):e=>e;class a{constructor(e,t,i=0,n=e.length,r,o){this.test=o,this.value={from:0,to:0},this.done=!1,this.matches=[],this.buffer="",this.bufferPos=0,this.iter=e.iterRange(i,n),this.bufferStart=i,this.normalize=r?e=>r(s(e)):s,this.query=this.normalize(t)}peek(){if(this.bufferPos==this.buffer.length){if(this.bufferStart+=this.buffer.length,this.iter.next(),this.iter.done)return-1;this.bufferPos=0,this.buffer=this.iter.value}return r.codePointAt(this.buffer,this.bufferPos)}next(){for(;this.matches.length;)this.matches.pop();return this.nextOverlapping()}nextOverlapping(){for(;;){let e=this.peek();if(e<0)return this.done=!0,this;let t=r.fromCodePoint(e),i=this.bufferStart+this.bufferPos;this.bufferPos+=r.codePointSize(e);let n=this.normalize(t);if(n.length)for(let e=0,r=i;;e++){let o=n.charCodeAt(e),s=this.match(o,r,this.bufferPos+this.bufferStart);if(e==n.length-1){if(s)return this.value=s,this;break}r==i&&e<t.length&&t.charCodeAt(e)==o&&r++}}}match(e,t,i){let n=null;for(let t=0;t<this.matches.length;t+=2){let r=this.matches[t],o=!1;this.query.charCodeAt(r)==e&&(r==this.query.length-1?n={from:this.matches[t+1],to:i}:(this.matches[t]++,o=!0)),o||(this.matches.splice(t,2),t-=2)}return this.query.charCodeAt(0)==e&&(1==this.query.length?n={from:t,to:i}:this.matches.push(1,t)),n&&this.test&&!this.test(n.from,n.to,this.buffer,this.bufferStart)&&(n=null),n}}"undefined"!=typeof Symbol&&(a.prototype[Symbol.iterator]=function(){return this});const l={from:-1,to:-1,match:/.*/.exec("")},h="gm"+(null==/x/.unicode?"":"u");class c{constructor(e,t,i,n=0,r=e.length){if(this.text=e,this.to=r,this.curLine="",this.done=!1,this.value=l,/\\[sWDnr]|\n|\r|\[\^/.test(t))return new f(e,t,i,n,r);this.re=new RegExp(t,h+((null==i?void 0:i.ignoreCase)?"i":"")),this.test=null==i?void 0:i.test,this.iter=e.iter();let o=e.lineAt(n);this.curLineStart=o.from,this.matchPos=p(e,n),this.getLine(this.curLineStart)}getLine(e){this.iter.next(e),this.iter.lineBreak?this.curLine="":(this.curLine=this.iter.value,this.curLineStart+this.curLine.length>this.to&&(this.curLine=this.curLine.slice(0,this.to-this.curLineStart)),this.iter.next())}nextLine(){this.curLineStart=this.curLineStart+this.curLine.length+1,this.curLineStart>this.to?this.curLine="":this.getLine(0)}next(){for(let e=this.matchPos-this.curLineStart;;){this.re.lastIndex=e;let t=this.matchPos<=this.to&&this.re.exec(this.curLine);if(t){let i=this.curLineStart+t.index,n=i+t[0].length;if(this.matchPos=p(this.text,n+(i==n?1:0)),i==this.curLineStart+this.curLine.length&&this.nextLine(),(i<n||i>this.value.to)&&(!this.test||this.test(i,n,t)))return this.value={from:i,to:n,match:t},this;e=this.matchPos-this.curLineStart}else{if(!(this.curLineStart+this.curLine.length<this.to))return this.done=!0,this;this.nextLine(),e=0}}}}const d=new WeakMap;class u{constructor(e,t){this.from=e,this.text=t}get to(){return this.from+this.text.length}static get(e,t,i){let n=d.get(e);if(!n||n.from>=i||n.to<=t){let n=new u(t,e.sliceString(t,i));return d.set(e,n),n}if(n.from==t&&n.to==i)return n;let{text:r,from:o}=n;return o>t&&(r=e.sliceString(t,o)+r,o=t),n.to<i&&(r+=e.sliceString(n.to,i)),d.set(e,new u(o,r)),new u(t,r.slice(t-o,i-o))}}class f{constructor(e,t,i,n,r){this.text=e,this.to=r,this.done=!1,this.value=l,this.matchPos=p(e,n),this.re=new RegExp(t,h+((null==i?void 0:i.ignoreCase)?"i":"")),this.test=null==i?void 0:i.test,this.flat=u.get(e,n,this.chunkEnd(n+5e3))}chunkEnd(e){return e>=this.to?this.to:this.text.lineAt(e).to}next(){for(;;){let e=this.re.lastIndex=this.matchPos-this.flat.from,t=this.re.exec(this.flat.text);if(t&&!t[0]&&t.index==e&&(this.re.lastIndex=e+1,t=this.re.exec(this.flat.text)),t){let e=this.flat.from+t.index,i=e+t[0].length;if((this.flat.to>=this.to||t.index+t[0].length<=this.flat.text.length-10)&&(!this.test||this.test(e,i,t)))return this.value={from:e,to:i,match:t},this.matchPos=p(this.text,i+(e==i?1:0)),this}if(this.flat.to==this.to)return this.done=!0,this;this.flat=u.get(this.text,this.flat.from,this.chunkEnd(this.flat.from+2*this.flat.text.length))}}}function p(e,t){if(t>=e.length)return t;let i,n=e.lineAt(t);for(;t<n.to&&(i=n.text.charCodeAt(t-n.from))>=56320&&i<57344;)t++;return t}function O(e){let t=String(e.state.doc.lineAt(e.state.selection.main.head).number),i=o("input",{class:"cm-textfield",name:"line",value:t});function s(){let t=/^([+-])?(\d+)?(:\d+)?(%)?$/.exec(i.value);if(!t)return;let{state:o}=e,s=o.doc.lineAt(o.selection.main.head),[,a,l,h,c]=t,d=h?+h.slice(1):0,u=l?+l:s.number;if(l&&c){let e=u/100;a&&(e=e*("-"==a?-1:1)+s.number/o.doc.lines),u=Math.round(o.doc.lines*e)}else l&&a&&(u=u*("-"==a?-1:1)+s.number);let f=o.doc.line(Math.max(1,Math.min(o.doc.lines,u))),p=r.EditorSelection.cursor(f.from+Math.max(0,Math.min(d,f.length)));e.dispatch({effects:[m.of(!1),n.EditorView.scrollIntoView(p.from,{y:"center"})],selection:p}),e.focus()}return{dom:o("form",{class:"cm-gotoLine",onkeydown:t=>{27==t.keyCode?(t.preventDefault(),e.dispatch({effects:m.of(!1)}),e.focus()):13==t.keyCode&&(t.preventDefault(),s())},onsubmit:e=>{e.preventDefault(),s()}},o("label",e.state.phrase("Go to line"),": ",i)," ",o("button",{class:"cm-button",type:"submit"},e.state.phrase("go")))}}"undefined"!=typeof Symbol&&(c.prototype[Symbol.iterator]=f.prototype[Symbol.iterator]=function(){return this});const m=r.StateEffect.define(),g=r.StateField.define({create:()=>!0,update(e,t){for(let i of t.effects)i.is(m)&&(e=i.value);return e},provide:e=>n.showPanel.from(e,(e=>e?O:null))}),b=e=>{let t=n.getPanel(e,O);if(!t){let i=[m.of(!0)];null==e.state.field(g,!1)&&i.push(r.StateEffect.appendConfig.of([g,w])),e.dispatch({effects:i}),t=n.getPanel(e,O)}return t&&t.dom.querySelector("input").select(),!0},w=n.EditorView.baseTheme({".cm-panel.cm-gotoLine":{padding:"2px 6px 4px","& label":{fontSize:"80%"}}}),y={highlightWordAroundCursor:!1,minSelectionLength:1,maxMatches:100,wholeWords:!1},v=r.Facet.define({combine:e=>r.combineConfig(e,y,{highlightWordAroundCursor:(e,t)=>e||t,minSelectionLength:Math.min,maxMatches:Math.min})}),x=n.Decoration.mark({class:"cm-selectionMatch"}),S=n.Decoration.mark({class:"cm-selectionMatch cm-selectionMatch-main"});function k(e,t,i,n){return!(0!=i&&e(t.sliceDoc(i-1,i))==r.CharCategory.Word||n!=t.doc.length&&e(t.sliceDoc(n,n+1))==r.CharCategory.Word)}function A(e,t,i,n){return e(t.sliceDoc(i,i+1))==r.CharCategory.Word&&e(t.sliceDoc(n-1,n))==r.CharCategory.Word}const Q=n.ViewPlugin.fromClass(class{constructor(e){this.decorations=this.getDeco(e)}update(e){(e.selectionSet||e.docChanged||e.viewportChanged)&&(this.decorations=this.getDeco(e.view))}getDeco(e){let t=e.state.facet(v),{state:i}=e,r=i.selection;if(r.ranges.length>1)return n.Decoration.none;let o,s=r.main,l=null;if(s.empty){if(!t.highlightWordAroundCursor)return n.Decoration.none;let e=i.wordAt(s.head);if(!e)return n.Decoration.none;l=i.charCategorizer(s.head),o=i.sliceDoc(e.from,e.to)}else{let e=s.to-s.from;if(e<t.minSelectionLength||e>200)return n.Decoration.none;if(t.wholeWords){if(o=i.sliceDoc(s.from,s.to),l=i.charCategorizer(s.head),!k(l,i,s.from,s.to)||!A(l,i,s.from,s.to))return n.Decoration.none}else if(o=i.sliceDoc(s.from,s.to),!o)return n.Decoration.none}let h=[];for(let r of e.visibleRanges){let e=new a(i.doc,o,r.from,r.to);for(;!e.next().done;){let{from:r,to:o}=e.value;if((!l||k(l,i,r,o))&&(s.empty&&r<=s.from&&o>=s.to?h.push(S.range(r,o)):(r>=s.to||o<=s.from)&&h.push(x.range(r,o)),h.length>t.maxMatches))return n.Decoration.none}}return n.Decoration.set(h)}},{decorations:e=>e.decorations}),P=n.EditorView.baseTheme({".cm-selectionMatch":{backgroundColor:"#99ff7780"},".cm-searchMatch .cm-selectionMatch":{backgroundColor:"transparent"}}),C=({state:e,dispatch:t})=>{let{ranges:i}=e.selection;if(i.some((e=>e.from===e.to)))return(({state:e,dispatch:t})=>{let{selection:i}=e,n=r.EditorSelection.create(i.ranges.map((t=>e.wordAt(t.head)||r.EditorSelection.cursor(t.head))),i.mainIndex);return!n.eq(i)&&(t(e.update({selection:n})),!0)})({state:e,dispatch:t});let o=e.sliceDoc(i[0].from,i[0].to);if(e.selection.ranges.some((t=>e.sliceDoc(t.from,t.to)!=o)))return!1;let s=function(e,t){let{main:i,ranges:n}=e.selection,r=e.wordAt(i.head),o=r&&r.from==i.from&&r.to==i.to;for(let i=!1,r=new a(e.doc,t,n[n.length-1].to);;){if(r.next(),!r.done){if(i&&n.some((e=>e.from==r.value.from)))continue;if(o){let t=e.wordAt(r.value.from);if(!t||t.from!=r.value.from||t.to!=r.value.to)continue}return r.value}if(i)return null;r=new a(e.doc,t,0,Math.max(0,n[n.length-1].from-1)),i=!0}}(e,o);return!!s&&(t(e.update({selection:e.selection.addRange(r.EditorSelection.range(s.from,s.to),!1),effects:n.EditorView.scrollIntoView(s.to)})),!0)},$=r.Facet.define({combine:e=>r.combineConfig(e,{top:!1,caseSensitive:!1,literal:!1,regexp:!1,wholeWord:!1,createPanel:e=>new ae(e),scrollToMatch:e=>n.EditorView.scrollIntoView(e)})});class Z{constructor(e){this.search=e.search,this.caseSensitive=!!e.caseSensitive,this.literal=!!e.literal,this.regexp=!!e.regexp,this.replace=e.replace||"",this.valid=!!this.search&&(!this.regexp||function(e){try{return new RegExp(e,h),!0}catch(e){return!1}}(this.search)),this.unquoted=this.unquote(this.search),this.wholeWord=!!e.wholeWord}unquote(e){return this.literal?e:e.replace(/\\([nrt\\])/g,((e,t)=>"n"==t?"\n":"r"==t?"\r":"t"==t?"\t":"\\"))}eq(e){return this.search==e.search&&this.replace==e.replace&&this.caseSensitive==e.caseSensitive&&this.regexp==e.regexp&&this.wholeWord==e.wholeWord}create(){return this.regexp?new B(this):new X(this)}getCursor(e,t=0,i){let n=e.doc?e:r.EditorState.create({doc:e});return null==i&&(i=n.doc.length),this.regexp?R(this,n,t,i):M(this,n,t,i)}}class T{constructor(e){this.spec=e}}function M(e,t,i,n){return new a(t.doc,e.unquoted,i,n,e.caseSensitive?void 0:e=>e.toLowerCase(),e.wholeWord?E(t.doc,t.charCategorizer(t.selection.main.head)):void 0)}function E(e,t){return(i,n,o,s)=>((s>i||s+o.length<n)&&(s=Math.max(0,i-2),o=e.sliceString(s,Math.min(e.length,n+2))),!(t(_(o,i-s))==r.CharCategory.Word&&t(V(o,i-s))==r.CharCategory.Word||t(V(o,n-s))==r.CharCategory.Word&&t(_(o,n-s))==r.CharCategory.Word))}class X extends T{constructor(e){super(e)}nextMatch(e,t,i){let n=M(this.spec,e,i,e.doc.length).nextOverlapping();if(n.done){let i=Math.min(e.doc.length,t+this.spec.unquoted.length);n=M(this.spec,e,0,i).nextOverlapping()}return n.done||n.value.from==t&&n.value.to==i?null:n.value}prevMatchInRange(e,t,i){for(let n=i;;){let i=Math.max(t,n-1e4-this.spec.unquoted.length),r=M(this.spec,e,i,n),o=null;for(;!r.nextOverlapping().done;)o=r.value;if(o)return o;if(i==t)return null;n-=1e4}}prevMatch(e,t,i){let n=this.prevMatchInRange(e,0,t);return n||(n=this.prevMatchInRange(e,Math.max(0,i-this.spec.unquoted.length),e.doc.length)),!n||n.from==t&&n.to==i?null:n}getReplacement(e){return this.spec.unquote(this.spec.replace)}matchAll(e,t){let i=M(this.spec,e,0,e.doc.length),n=[];for(;!i.next().done;){if(n.length>=t)return null;n.push(i.value)}return n}highlight(e,t,i,n){let r=M(this.spec,e,Math.max(0,t-this.spec.unquoted.length),Math.min(i+this.spec.unquoted.length,e.doc.length));for(;!r.next().done;)n(r.value.from,r.value.to)}}function R(e,t,i,n){return new c(t.doc,e.search,{ignoreCase:!e.caseSensitive,test:e.wholeWord?q(t.charCategorizer(t.selection.main.head)):void 0},i,n)}function _(e,t){return e.slice(r.findClusterBreak(e,t,!1),t)}function V(e,t){return e.slice(t,r.findClusterBreak(e,t))}function q(e){return(t,i,n)=>!n[0].length||(e(_(n.input,n.index))!=r.CharCategory.Word||e(V(n.input,n.index))!=r.CharCategory.Word)&&(e(V(n.input,n.index+n[0].length))!=r.CharCategory.Word||e(_(n.input,n.index+n[0].length))!=r.CharCategory.Word)}class B extends T{nextMatch(e,t,i){let n=R(this.spec,e,i,e.doc.length).next();return n.done&&(n=R(this.spec,e,0,t).next()),n.done?null:n.value}prevMatchInRange(e,t,i){for(let n=1;;n++){let r=Math.max(t,i-1e4*n),o=R(this.spec,e,r,i),s=null;for(;!o.next().done;)s=o.value;if(s&&(r==t||s.from>r+10))return s;if(r==t)return null}}prevMatch(e,t,i){return this.prevMatchInRange(e,0,t)||this.prevMatchInRange(e,i,e.doc.length)}getReplacement(e){return this.spec.unquote(this.spec.replace).replace(/\$([$&\d+])/g,((t,i)=>"$"==i?"$":"&"==i?e.match[0]:"0"!=i&&+i<e.match.length?e.match[i]:t))}matchAll(e,t){let i=R(this.spec,e,0,e.doc.length),n=[];for(;!i.next().done;){if(n.length>=t)return null;n.push(i.value)}return n}highlight(e,t,i,n){let r=R(this.spec,e,Math.max(0,t-250),Math.min(i+250,e.doc.length));for(;!r.next().done;)n(r.value.from,r.value.to)}}const D=r.StateEffect.define(),z=r.StateEffect.define(),L=r.StateField.define({create:e=>new j(te(e).create(),null),update(e,t){for(let i of t.effects)i.is(D)?e=new j(i.value.create(),e.panel):i.is(z)&&(e=new j(e.query,i.value?ee:null));return e},provide:e=>n.showPanel.from(e,(e=>e.panel))});class j{constructor(e,t){this.query=e,this.panel=t}}const W=n.Decoration.mark({class:"cm-searchMatch"}),Y=n.Decoration.mark({class:"cm-searchMatch cm-searchMatch-selected"}),I=n.ViewPlugin.fromClass(class{constructor(e){this.view=e,this.decorations=this.highlight(e.state.field(L))}update(e){let t=e.state.field(L);(t!=e.startState.field(L)||e.docChanged||e.selectionSet||e.viewportChanged)&&(this.decorations=this.highlight(t))}highlight({query:e,panel:t}){if(!t||!e.spec.valid)return n.Decoration.none;let{view:i}=this,o=new r.RangeSetBuilder;for(let t=0,n=i.visibleRanges,r=n.length;t<r;t++){let{from:s,to:a}=n[t];for(;t<r-1&&a>n[t+1].from-500;)a=n[++t].to;e.highlight(i.state,s,a,((e,t)=>{let n=i.state.selection.ranges.some((i=>i.from==e&&i.to==t));o.add(e,t,n?Y:W)}))}return o.finish()}},{decorations:e=>e.decorations});function G(e){return t=>{let i=t.state.field(L,!1);return i&&i.query.spec.valid?e(t,i):re(t)}}const U=G(((e,{query:t})=>{let{to:i}=e.state.selection.main,n=t.nextMatch(e.state,i,i);if(!n)return!1;let o=r.EditorSelection.single(n.from,n.to),s=e.state.facet($);return e.dispatch({selection:o,effects:[de(e,n),s.scrollToMatch(o.main,e)],userEvent:"select.search"}),ne(e),!0})),N=G(((e,{query:t})=>{let{state:i}=e,{from:n}=i.selection.main,o=t.prevMatch(i,n,n);if(!o)return!1;let s=r.EditorSelection.single(o.from,o.to),a=e.state.facet($);return e.dispatch({selection:s,effects:[de(e,o),a.scrollToMatch(s.main,e)],userEvent:"select.search"}),ne(e),!0})),F=G(((e,{query:t})=>{let i=t.matchAll(e.state,1e3);return!(!i||!i.length||(e.dispatch({selection:r.EditorSelection.create(i.map((e=>r.EditorSelection.range(e.from,e.to)))),userEvent:"select.search.matches"}),0))})),H=({state:e,dispatch:t})=>{let i=e.selection;if(i.ranges.length>1||i.main.empty)return!1;let{from:n,to:o}=i.main,s=[],l=0;for(let t=new a(e.doc,e.sliceDoc(n,o));!t.next().done;){if(s.length>1e3)return!1;t.value.from==n&&(l=s.length),s.push(r.EditorSelection.range(t.value.from,t.value.to))}return t(e.update({selection:r.EditorSelection.create(s,l),userEvent:"select.search.matches"})),!0},K=G(((e,{query:t})=>{let{state:i}=e,{from:o,to:s}=i.selection.main;if(i.readOnly)return!1;let a=t.nextMatch(i,o,o);if(!a)return!1;let l,h,c=a,d=[],u=[];if(c.from==o&&c.to==s&&(h=i.toText(t.getReplacement(c)),d.push({from:c.from,to:c.to,insert:h}),c=t.nextMatch(i,c.from,c.to),u.push(n.EditorView.announce.of(i.phrase("replaced match on line $",i.doc.lineAt(o).number)+"."))),c){let t=0==d.length||d[0].from>=a.to?0:a.to-a.from-h.length;l=r.EditorSelection.single(c.from-t,c.to-t),u.push(de(e,c)),u.push(i.facet($).scrollToMatch(l.main,e))}return e.dispatch({changes:d,selection:l,effects:u,userEvent:"input.replace"}),!0})),J=G(((e,{query:t})=>{if(e.state.readOnly)return!1;let i=t.matchAll(e.state,1e9).map((e=>{let{from:i,to:n}=e;return{from:i,to:n,insert:t.getReplacement(e)}}));if(!i.length)return!1;let r=e.state.phrase("replaced $ matches",i.length)+".";return e.dispatch({changes:i,effects:n.EditorView.announce.of(r),userEvent:"input.replace.all"}),!0}));function ee(e){return e.state.facet($).createPanel(e)}function te(e,t){var i,n,r,o,s;let a=e.selection.main,l=a.empty||a.to>a.from+100?"":e.sliceDoc(a.from,a.to);if(t&&!l)return t;let h=e.facet($);return new Z({search:(null!==(i=null==t?void 0:t.literal)&&void 0!==i?i:h.literal)?l:l.replace(/\n/g,"\\n"),caseSensitive:null!==(n=null==t?void 0:t.caseSensitive)&&void 0!==n?n:h.caseSensitive,literal:null!==(r=null==t?void 0:t.literal)&&void 0!==r?r:h.literal,regexp:null!==(o=null==t?void 0:t.regexp)&&void 0!==o?o:h.regexp,wholeWord:null!==(s=null==t?void 0:t.wholeWord)&&void 0!==s?s:h.wholeWord})}function ie(e){let t=n.getPanel(e,ee);return t&&t.dom.querySelector("[main-field]")}function ne(e){let t=ie(e);t&&t==e.root.activeElement&&t.select()}const re=e=>{let t=e.state.field(L,!1);if(t&&t.panel){let i=ie(e);if(i&&i!=e.root.activeElement){let n=te(e.state,t.query.spec);n.valid&&e.dispatch({effects:D.of(n)}),i.focus(),i.select()}}else e.dispatch({effects:[z.of(!0),t?D.of(te(e.state,t.query.spec)):r.StateEffect.appendConfig.of(fe)]});return!0},oe=e=>{let t=e.state.field(L,!1);if(!t||!t.panel)return!1;let i=n.getPanel(e,ee);return i&&i.dom.contains(e.root.activeElement)&&e.focus(),e.dispatch({effects:z.of(!1)}),!0},se=[{key:"Mod-f",run:re,scope:"editor search-panel"},{key:"F3",run:U,shift:N,scope:"editor search-panel",preventDefault:!0},{key:"Mod-g",run:U,shift:N,scope:"editor search-panel",preventDefault:!0},{key:"Escape",run:oe,scope:"editor search-panel"},{key:"Mod-Shift-l",run:H},{key:"Mod-Alt-g",run:b},{key:"Mod-d",run:C,preventDefault:!0}];class ae{constructor(e){this.view=e;let t=this.query=e.state.field(L).query.spec;function i(e,t,i){return o("button",{class:"cm-button",name:e,onclick:t,type:"button"},i)}this.commit=this.commit.bind(this),this.searchField=o("input",{value:t.search,placeholder:le(e,"Find"),"aria-label":le(e,"Find"),class:"cm-textfield",name:"search",form:"","main-field":"true",onchange:this.commit,onkeyup:this.commit}),this.replaceField=o("input",{value:t.replace,placeholder:le(e,"Replace"),"aria-label":le(e,"Replace"),class:"cm-textfield",name:"replace",form:"",onchange:this.commit,onkeyup:this.commit}),this.caseField=o("input",{type:"checkbox",name:"case",form:"",checked:t.caseSensitive,onchange:this.commit}),this.reField=o("input",{type:"checkbox",name:"re",form:"",checked:t.regexp,onchange:this.commit}),this.wordField=o("input",{type:"checkbox",name:"word",form:"",checked:t.wholeWord,onchange:this.commit}),this.dom=o("div",{onkeydown:e=>this.keydown(e),class:"cm-search"},[this.searchField,i("next",(()=>U(e)),[le(e,"next")]),i("prev",(()=>N(e)),[le(e,"previous")]),i("select",(()=>F(e)),[le(e,"all")]),o("label",null,[this.caseField,le(e,"match case")]),o("label",null,[this.reField,le(e,"regexp")]),o("label",null,[this.wordField,le(e,"by word")]),...e.state.readOnly?[]:[o("br"),this.replaceField,i("replace",(()=>K(e)),[le(e,"replace")]),i("replaceAll",(()=>J(e)),[le(e,"replace all")])],o("button",{name:"close",onclick:()=>oe(e),"aria-label":le(e,"close"),type:"button"},["×"])])}commit(){let e=new Z({search:this.searchField.value,caseSensitive:this.caseField.checked,regexp:this.reField.checked,wholeWord:this.wordField.checked,replace:this.replaceField.value});e.eq(this.query)||(this.query=e,this.view.dispatch({effects:D.of(e)}))}keydown(e){n.runScopeHandlers(this.view,e,"search-panel")?e.preventDefault():13==e.keyCode&&e.target==this.searchField?(e.preventDefault(),(e.shiftKey?N:U)(this.view)):13==e.keyCode&&e.target==this.replaceField&&(e.preventDefault(),K(this.view))}update(e){for(let t of e.transactions)for(let e of t.effects)e.is(D)&&!e.value.eq(this.query)&&this.setQuery(e.value)}setQuery(e){this.query=e,this.searchField.value=e.search,this.replaceField.value=e.replace,this.caseField.checked=e.caseSensitive,this.reField.checked=e.regexp,this.wordField.checked=e.wholeWord}mount(){this.searchField.select()}get pos(){return 80}get top(){return this.view.state.facet($).top}}function le(e,t){return e.state.phrase(t)}const he=30,ce=/[\s\.,:;?!]/;function de(e,{from:t,to:i}){let r=e.state.doc.lineAt(t),o=e.state.doc.lineAt(i).to,s=Math.max(r.from,t-he),a=Math.min(o,i+he),l=e.state.sliceDoc(s,a);if(s!=r.from)for(let e=0;e<he;e++)if(!ce.test(l[e+1])&&ce.test(l[e])){l=l.slice(e);break}if(a!=o)for(let e=l.length-1;e>l.length-he;e--)if(!ce.test(l[e-1])&&ce.test(l[e])){l=l.slice(0,e);break}return n.EditorView.announce.of(`${e.state.phrase("current match")}. ${l} ${e.state.phrase("on line")} ${r.number}.`)}const ue=n.EditorView.baseTheme({".cm-panel.cm-search":{padding:"2px 6px 4px",position:"relative","& [name=close]":{position:"absolute",top:"0",right:"4px",backgroundColor:"inherit",border:"none",font:"inherit",padding:0,margin:0},"& input, & button, & label":{margin:".2em .6em .2em 0"},"& input[type=checkbox]":{marginRight:".2em"},"& label":{fontSize:"80%",whiteSpace:"pre"}},"&light .cm-searchMatch":{backgroundColor:"#ffff0054"},"&dark .cm-searchMatch":{backgroundColor:"#00ffff8a"},"&light .cm-searchMatch-selected":{backgroundColor:"#ff6a0054"},"&dark .cm-searchMatch-selected":{backgroundColor:"#ff00ff8a"}}),fe=[L,r.Prec.low(I),ue];t.RegExpCursor=c,t.SearchCursor=a,t.SearchQuery=Z,t.closeSearchPanel=oe,t.findNext=U,t.findPrevious=N,t.getSearchQuery=function(e){let t=e.field(L,!1);return t?t.query.spec:te(e)},t.gotoLine=b,t.highlightSelectionMatches=function(e){let t=[P,Q];return e&&t.push(v.of(e)),t},t.openSearchPanel=re,t.replaceAll=J,t.replaceNext=K,t.search=function(e){return e?[$.of(e),fe]:fe},t.searchKeymap=se,t.searchPanelOpen=function(e){var t;return null!=(null===(t=e.field(L,!1))||void 0===t?void 0:t.panel)},t.selectMatches=F,t.selectNextOccurrence=C,t.selectSelectionMatches=H,t.setSearchQuery=D},9064:(e,t)=>{"use strict";class i{lineAt(e){if(e<0||e>this.length)throw new RangeError(`Invalid position ${e} in document of length ${this.length}`);return this.lineInner(e,!1,1,0)}line(e){if(e<1||e>this.lines)throw new RangeError(`Invalid line number ${e} in ${this.lines}-line document`);return this.lineInner(e,!0,1,0)}replace(e,t,i){[e,t]=d(this,e,t);let n=[];return this.decompose(0,e,n,2),i.length&&i.decompose(0,i.length,n,3),this.decompose(t,this.length,n,1),r.from(n,this.length-(t-e)+i.length)}append(e){return this.replace(this.length,this.length,e)}slice(e,t=this.length){[e,t]=d(this,e,t);let i=[];return this.decompose(e,t,i,0),r.from(i,t-e)}eq(e){if(e==this)return!0;if(e.length!=this.length||e.lines!=this.lines)return!1;let t=this.scanIdentical(e,1),i=this.length-this.scanIdentical(e,-1),n=new a(this),r=new a(e);for(let e=t,o=t;;){if(n.next(e),r.next(e),e=0,n.lineBreak!=r.lineBreak||n.done!=r.done||n.value!=r.value)return!1;if(o+=n.value.length,n.done||o>=i)return!0}}iter(e=1){return new a(this,e)}iterRange(e,t=this.length){return new l(this,e,t)}iterLines(e,t){let i;if(null==e)i=this.iter();else{null==t&&(t=this.lines+1);let n=this.line(e).from;i=this.iterRange(n,Math.max(n,t==this.lines+1?this.length:t<=1?0:this.line(t-1).to))}return new h(i)}toString(){return this.sliceString(0)}toJSON(){let e=[];return this.flatten(e),e}constructor(){}static of(e){if(0==e.length)throw new RangeError("A document must have at least one line");return 1!=e.length||e[0]?e.length<=32?new n(e):r.from(n.split(e,[])):i.empty}}class n extends i{constructor(e,t=function(e){let t=-1;for(let i of e)t+=i.length+1;return t}(e)){super(),this.text=e,this.length=t}get lines(){return this.text.length}get children(){return null}lineInner(e,t,i,n){for(let r=0;;r++){let o=this.text[r],s=n+o.length;if((t?i:s)>=e)return new c(n,s,i,o);n=s+1,i++}}decompose(e,t,i,r){let a=e<=0&&t>=this.length?this:new n(s(this.text,e,t),Math.min(t,this.length)-Math.max(0,e));if(1&r){let e=i.pop(),t=o(a.text,e.text.slice(),0,a.length);if(t.length<=32)i.push(new n(t,e.length+a.length));else{let e=t.length>>1;i.push(new n(t.slice(0,e)),new n(t.slice(e)))}}else i.push(a)}replace(e,t,i){if(!(i instanceof n))return super.replace(e,t,i);[e,t]=d(this,e,t);let a=o(this.text,o(i.text,s(this.text,0,e)),t),l=this.length+i.length-(t-e);return a.length<=32?new n(a,l):r.from(n.split(a,[]),l)}sliceString(e,t=this.length,i="\n"){[e,t]=d(this,e,t);let n="";for(let r=0,o=0;r<=t&&o<this.text.length;o++){let s=this.text[o],a=r+s.length;r>e&&o&&(n+=i),e<a&&t>r&&(n+=s.slice(Math.max(0,e-r),t-r)),r=a+1}return n}flatten(e){for(let t of this.text)e.push(t)}scanIdentical(){return 0}static split(e,t){let i=[],r=-1;for(let o of e)i.push(o),r+=o.length+1,32==i.length&&(t.push(new n(i,r)),i=[],r=-1);return r>-1&&t.push(new n(i,r)),t}}class r extends i{constructor(e,t){super(),this.children=e,this.length=t,this.lines=0;for(let t of e)this.lines+=t.lines}lineInner(e,t,i,n){for(let r=0;;r++){let o=this.children[r],s=n+o.length,a=i+o.lines-1;if((t?a:s)>=e)return o.lineInner(e,t,i,n);n=s+1,i=a+1}}decompose(e,t,i,n){for(let r=0,o=0;o<=t&&r<this.children.length;r++){let s=this.children[r],a=o+s.length;if(e<=a&&t>=o){let r=n&((o<=e?1:0)|(a>=t?2:0));o>=e&&a<=t&&!r?i.push(s):s.decompose(e-o,t-o,i,r)}o=a+1}}replace(e,t,i){if([e,t]=d(this,e,t),i.lines<this.lines)for(let n=0,o=0;n<this.children.length;n++){let s=this.children[n],a=o+s.length;if(e>=o&&t<=a){let l=s.replace(e-o,t-o,i),h=this.lines-s.lines+l.lines;if(l.lines<h>>4&&l.lines>h>>6){let o=this.children.slice();return o[n]=l,new r(o,this.length-(t-e)+i.length)}return super.replace(o,a,l)}o=a+1}return super.replace(e,t,i)}sliceString(e,t=this.length,i="\n"){[e,t]=d(this,e,t);let n="";for(let r=0,o=0;r<this.children.length&&o<=t;r++){let s=this.children[r],a=o+s.length;o>e&&r&&(n+=i),e<a&&t>o&&(n+=s.sliceString(e-o,t-o,i)),o=a+1}return n}flatten(e){for(let t of this.children)t.flatten(e)}scanIdentical(e,t){if(!(e instanceof r))return 0;let i=0,[n,o,s,a]=t>0?[0,0,this.children.length,e.children.length]:[this.children.length-1,e.children.length-1,-1,-1];for(;;n+=t,o+=t){if(n==s||o==a)return i;let r=this.children[n],l=e.children[o];if(r!=l)return i+r.scanIdentical(l,t);i+=r.length+1}}static from(e,t=e.reduce(((e,t)=>e+t.length+1),-1)){let i=0;for(let t of e)i+=t.lines;if(i<32){let i=[];for(let t of e)t.flatten(i);return new n(i,t)}let o=Math.max(32,i>>5),s=o<<1,a=o>>1,l=[],h=0,c=-1,d=[];function u(e){let t;if(e.lines>s&&e instanceof r)for(let t of e.children)u(t);else e.lines>a&&(h>a||!h)?(f(),l.push(e)):e instanceof n&&h&&(t=d[d.length-1])instanceof n&&e.lines+t.lines<=32?(h+=e.lines,c+=e.length+1,d[d.length-1]=new n(t.text.concat(e.text),t.length+1+e.length)):(h+e.lines>o&&f(),h+=e.lines,c+=e.length+1,d.push(e))}function f(){0!=h&&(l.push(1==d.length?d[0]:r.from(d,c)),c=-1,h=d.length=0)}for(let t of e)u(t);return f(),1==l.length?l[0]:new r(l,t)}}function o(e,t,i=0,n=1e9){for(let r=0,o=0,s=!0;o<e.length&&r<=n;o++){let a=e[o],l=r+a.length;l>=i&&(l>n&&(a=a.slice(0,n-r)),r<i&&(a=a.slice(i-r)),s?(t[t.length-1]+=a,s=!1):t.push(a)),r=l+1}return t}function s(e,t,i){return o(e,[""],t,i)}i.empty=new n([""],0);class a{constructor(e,t=1){this.dir=t,this.done=!1,this.lineBreak=!1,this.value="",this.nodes=[e],this.offsets=[t>0?1:(e instanceof n?e.text.length:e.children.length)<<1]}nextInner(e,t){for(this.done=this.lineBreak=!1;;){let i=this.nodes.length-1,r=this.nodes[i],o=this.offsets[i],s=o>>1,a=r instanceof n?r.text.length:r.children.length;if(s==(t>0?a:0)){if(0==i)return this.done=!0,this.value="",this;t>0&&this.offsets[i-1]++,this.nodes.pop(),this.offsets.pop()}else if((1&o)==(t>0?0:1)){if(this.offsets[i]+=t,0==e)return this.lineBreak=!0,this.value="\n",this;e--}else if(r instanceof n){let n=r.text[s+(t<0?-1:0)];if(this.offsets[i]+=t,n.length>Math.max(0,e))return this.value=0==e?n:t>0?n.slice(e):n.slice(0,n.length-e),this;e-=n.length}else{let o=r.children[s+(t<0?-1:0)];e>o.length?(e-=o.length,this.offsets[i]+=t):(t<0&&this.offsets[i]--,this.nodes.push(o),this.offsets.push(t>0?1:(o instanceof n?o.text.length:o.children.length)<<1))}}}next(e=0){return e<0&&(this.nextInner(-e,-this.dir),e=this.value.length),this.nextInner(e,this.dir)}}class l{constructor(e,t,i){this.value="",this.done=!1,this.cursor=new a(e,t>i?-1:1),this.pos=t>i?e.length:0,this.from=Math.min(t,i),this.to=Math.max(t,i)}nextInner(e,t){if(t<0?this.pos<=this.from:this.pos>=this.to)return this.value="",this.done=!0,this;e+=Math.max(0,t<0?this.pos-this.to:this.from-this.pos);let i=t<0?this.pos-this.from:this.to-this.pos;e>i&&(e=i),i-=e;let{value:n}=this.cursor.next(e);return this.pos+=(n.length+e)*t,this.value=n.length<=i?n:t<0?n.slice(n.length-i):n.slice(0,i),this.done=!this.value,this}next(e=0){return e<0?e=Math.max(e,this.from-this.pos):e>0&&(e=Math.min(e,this.to-this.pos)),this.nextInner(e,this.cursor.dir)}get lineBreak(){return this.cursor.lineBreak&&""!=this.value}}class h{constructor(e){this.inner=e,this.afterBreak=!0,this.value="",this.done=!1}next(e=0){let{done:t,lineBreak:i,value:n}=this.inner.next(e);return t&&this.afterBreak?(this.value="",this.afterBreak=!1):t?(this.done=!0,this.value=""):i?this.afterBreak?this.value="":(this.afterBreak=!0,this.next()):(this.value=n,this.afterBreak=!1),this}get lineBreak(){return!1}}"undefined"!=typeof Symbol&&(i.prototype[Symbol.iterator]=function(){return this.iter()},a.prototype[Symbol.iterator]=l.prototype[Symbol.iterator]=h.prototype[Symbol.iterator]=function(){return this});class c{constructor(e,t,i,n){this.from=e,this.to=t,this.number=i,this.text=n}get length(){return this.to-this.from}}function d(e,t,i){return[t=Math.max(0,Math.min(e.length,t)),Math.max(t,Math.min(e.length,i))]}let u="lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((e=>e?parseInt(e,36):1));for(let e=1;e<u.length;e++)u[e]+=u[e-1];function f(e){for(let t=1;t<u.length;t+=2)if(u[t]>e)return u[t-1]<=e;return!1}function p(e){return e>=127462&&e<=127487}function O(e,t,i=!0,n=!0){return(i?m:g)(e,t,n)}function m(e,t,i){if(t==e.length)return t;t&&b(e.charCodeAt(t))&&w(e.charCodeAt(t-1))&&t--;let n=y(e,t);for(t+=v(n);t<e.length;){let r=y(e,t);if(8205==n||8205==r||i&&f(r))t+=v(r),n=r;else{if(!p(r))break;{let i=0,n=t-2;for(;n>=0&&p(y(e,n));)i++,n-=2;if(i%2==0)break;t+=2}}}return t}function g(e,t,i){for(;t>0;){let n=m(e,t-2,i);if(n<t)return n;t--}return 0}function b(e){return e>=56320&&e<57344}function w(e){return e>=55296&&e<56320}function y(e,t){let i=e.charCodeAt(t);if(!w(i)||t+1==e.length)return i;let n=e.charCodeAt(t+1);return b(n)?n-56320+(i-55296<<10)+65536:i}function v(e){return e<65536?1:2}const x=/\r\n?|\n/;var S;t.MapMode=void 0,(S=t.MapMode||(t.MapMode={}))[S.Simple=0]="Simple",S[S.TrackDel=1]="TrackDel",S[S.TrackBefore=2]="TrackBefore",S[S.TrackAfter=3]="TrackAfter";class k{constructor(e){this.sections=e}get length(){let e=0;for(let t=0;t<this.sections.length;t+=2)e+=this.sections[t];return e}get newLength(){let e=0;for(let t=0;t<this.sections.length;t+=2){let i=this.sections[t+1];e+=i<0?this.sections[t]:i}return e}get empty(){return 0==this.sections.length||2==this.sections.length&&this.sections[1]<0}iterGaps(e){for(let t=0,i=0,n=0;t<this.sections.length;){let r=this.sections[t++],o=this.sections[t++];o<0?(e(i,n,r),n+=r):n+=o,i+=r}}iterChangedRanges(e,t=!1){C(this,e,t)}get invertedDesc(){let e=[];for(let t=0;t<this.sections.length;){let i=this.sections[t++],n=this.sections[t++];n<0?e.push(i,n):e.push(n,i)}return new k(e)}composeDesc(e){return this.empty?e:e.empty?this:Z(this,e)}mapDesc(e,t=!1){return e.empty?this:$(this,e,t)}mapPos(e,i=-1,n=t.MapMode.Simple){let r=0,o=0;for(let s=0;s<this.sections.length;){let a=this.sections[s++],l=this.sections[s++],h=r+a;if(l<0){if(h>e)return o+(e-r);o+=a}else{if(n!=t.MapMode.Simple&&h>=e&&(n==t.MapMode.TrackDel&&r<e&&h>e||n==t.MapMode.TrackBefore&&r<e||n==t.MapMode.TrackAfter&&h>e))return null;if(h>e||h==e&&i<0&&!a)return e==r||i<0?o:o+l;o+=l}r=h}if(e>r)throw new RangeError(`Position ${e} is out of range for changeset of length ${r}`);return o}touchesRange(e,t=e){for(let i=0,n=0;i<this.sections.length&&n<=t;){let r=n+this.sections[i++];if(this.sections[i++]>=0&&n<=t&&r>=e)return!(n<e&&r>t)||"cover";n=r}return!1}toString(){let e="";for(let t=0;t<this.sections.length;){let i=this.sections[t++],n=this.sections[t++];e+=(e?" ":"")+i+(n>=0?":"+n:"")}return e}toJSON(){return this.sections}static fromJSON(e){if(!Array.isArray(e)||e.length%2||e.some((e=>"number"!=typeof e)))throw new RangeError("Invalid JSON representation of ChangeDesc");return new k(e)}static create(e){return new k(e)}}class A extends k{constructor(e,t){super(e),this.inserted=t}apply(e){if(this.length!=e.length)throw new RangeError("Applying change set to a document with the wrong length");return C(this,((t,i,n,r,o)=>e=e.replace(n,n+(i-t),o)),!1),e}mapDesc(e,t=!1){return $(this,e,t,!0)}invert(e){let t=this.sections.slice(),n=[];for(let r=0,o=0;r<t.length;r+=2){let s=t[r],a=t[r+1];if(a>=0){t[r]=a,t[r+1]=s;let l=r>>1;for(;n.length<l;)n.push(i.empty);n.push(s?e.slice(o,o+s):i.empty)}o+=s}return new A(t,n)}compose(e){return this.empty?e:e.empty?this:Z(this,e,!0)}map(e,t=!1){return e.empty?this:$(this,e,t,!0)}iterChanges(e,t=!1){C(this,e,t)}get desc(){return k.create(this.sections)}filter(e){let t=[],i=[],n=[],r=new T(this);e:for(let o=0,s=0;;){let a=o==e.length?1e9:e[o++];for(;s<a||s==a&&0==r.len;){if(r.done)break e;let e=Math.min(r.len,a-s);Q(n,e,-1);let o=-1==r.ins?-1:0==r.off?r.ins:0;Q(t,e,o),o>0&&P(i,t,r.text),r.forward(e),s+=e}let l=e[o++];for(;s<l;){if(r.done)break e;let e=Math.min(r.len,l-s);Q(t,e,-1),Q(n,e,-1==r.ins?-1:0==r.off?r.ins:0),r.forward(e),s+=e}}return{changes:new A(t,i),filtered:k.create(n)}}toJSON(){let e=[];for(let t=0;t<this.sections.length;t+=2){let i=this.sections[t],n=this.sections[t+1];n<0?e.push(i):0==n?e.push([i]):e.push([i].concat(this.inserted[t>>1].toJSON()))}return e}static of(e,t,n){let r=[],o=[],s=0,a=null;function l(e=!1){if(!e&&!r.length)return;s<t&&Q(r,t-s,-1);let i=new A(r,o);a=a?a.compose(i.map(a)):i,r=[],o=[],s=0}return function e(h){if(Array.isArray(h))for(let t of h)e(t);else if(h instanceof A){if(h.length!=t)throw new RangeError(`Mismatched change set length (got ${h.length}, expected ${t})`);l(),a=a?a.compose(h.map(a)):h}else{let{from:e,to:a=e,insert:c}=h;if(e>a||e<0||a>t)throw new RangeError(`Invalid change range ${e} to ${a} (in doc of length ${t})`);let d=c?"string"==typeof c?i.of(c.split(n||x)):c:i.empty,u=d.length;if(e==a&&0==u)return;e<s&&l(),e>s&&Q(r,e-s,-1),Q(r,a-e,u),P(o,r,d),s=a}}(e),l(!a),a}static empty(e){return new A(e?[e,-1]:[],[])}static fromJSON(e){if(!Array.isArray(e))throw new RangeError("Invalid JSON representation of ChangeSet");let t=[],n=[];for(let r=0;r<e.length;r++){let o=e[r];if("number"==typeof o)t.push(o,-1);else{if(!Array.isArray(o)||"number"!=typeof o[0]||o.some(((e,t)=>t&&"string"!=typeof e)))throw new RangeError("Invalid JSON representation of ChangeSet");if(1==o.length)t.push(o[0],0);else{for(;n.length<r;)n.push(i.empty);n[r]=i.of(o.slice(1)),t.push(o[0],n[r].length)}}}return new A(t,n)}static createSet(e,t){return new A(e,t)}}function Q(e,t,i,n=!1){if(0==t&&i<=0)return;let r=e.length-2;r>=0&&i<=0&&i==e[r+1]?e[r]+=t:0==t&&0==e[r]?e[r+1]+=i:n?(e[r]+=t,e[r+1]+=i):e.push(t,i)}function P(e,t,n){if(0==n.length)return;let r=t.length-2>>1;if(r<e.length)e[e.length-1]=e[e.length-1].append(n);else{for(;e.length<r;)e.push(i.empty);e.push(n)}}function C(e,t,n){let r=e.inserted;for(let o=0,s=0,a=0;a<e.sections.length;){let l=e.sections[a++],h=e.sections[a++];if(h<0)o+=l,s+=l;else{let c=o,d=s,u=i.empty;for(;c+=l,d+=h,h&&r&&(u=u.append(r[a-2>>1])),!(n||a==e.sections.length||e.sections[a+1]<0);)l=e.sections[a++],h=e.sections[a++];t(o,c,s,d,u),o=c,s=d}}}function $(e,t,i,n=!1){let r=[],o=n?[]:null,s=new T(e),a=new T(t);for(let e=-1;;)if(-1==s.ins&&-1==a.ins){let e=Math.min(s.len,a.len);Q(r,e,-1),s.forward(e),a.forward(e)}else if(a.ins>=0&&(s.ins<0||e==s.i||0==s.off&&(a.len<s.len||a.len==s.len&&!i))){let t=a.len;for(Q(r,a.ins,-1);t;){let i=Math.min(s.len,t);s.ins>=0&&e<s.i&&s.len<=i&&(Q(r,0,s.ins),o&&P(o,r,s.text),e=s.i),s.forward(i),t-=i}a.next()}else{if(!(s.ins>=0)){if(s.done&&a.done)return o?A.createSet(r,o):k.create(r);throw new Error("Mismatched change set lengths")}{let t=0,i=s.len;for(;i;)if(-1==a.ins){let e=Math.min(i,a.len);t+=e,i-=e,a.forward(e)}else{if(!(0==a.ins&&a.len<i))break;i-=a.len,a.next()}Q(r,t,e<s.i?s.ins:0),o&&e<s.i&&P(o,r,s.text),e=s.i,s.forward(s.len-i)}}}function Z(e,t,i=!1){let n=[],r=i?[]:null,o=new T(e),s=new T(t);for(let e=!1;;){if(o.done&&s.done)return r?A.createSet(n,r):k.create(n);if(0==o.ins)Q(n,o.len,0,e),o.next();else if(0!=s.len||s.done){if(o.done||s.done)throw new Error("Mismatched change set lengths");{let t=Math.min(o.len2,s.len),i=n.length;if(-1==o.ins){let i=-1==s.ins?-1:s.off?0:s.ins;Q(n,t,i,e),r&&i&&P(r,n,s.text)}else-1==s.ins?(Q(n,o.off?0:o.len,t,e),r&&P(r,n,o.textBit(t))):(Q(n,o.off?0:o.len,s.off?0:s.ins,e),r&&!s.off&&P(r,n,s.text));e=(o.ins>t||s.ins>=0&&s.len>t)&&(e||n.length>i),o.forward2(t),s.forward(t)}}else Q(n,0,s.ins,e),r&&P(r,n,s.text),s.next()}}class T{constructor(e){this.set=e,this.i=0,this.next()}next(){let{sections:e}=this.set;this.i<e.length?(this.len=e[this.i++],this.ins=e[this.i++]):(this.len=0,this.ins=-2),this.off=0}get done(){return-2==this.ins}get len2(){return this.ins<0?this.len:this.ins}get text(){let{inserted:e}=this.set,t=this.i-2>>1;return t>=e.length?i.empty:e[t]}textBit(e){let{inserted:t}=this.set,n=this.i-2>>1;return n>=t.length&&!e?i.empty:t[n].slice(this.off,null==e?void 0:this.off+e)}forward(e){e==this.len?this.next():(this.len-=e,this.off+=e)}forward2(e){-1==this.ins?this.forward(e):e==this.ins?this.next():(this.ins-=e,this.off+=e)}}class M{constructor(e,t,i){this.from=e,this.to=t,this.flags=i}get anchor(){return 32&this.flags?this.to:this.from}get head(){return 32&this.flags?this.from:this.to}get empty(){return this.from==this.to}get assoc(){return 8&this.flags?-1:16&this.flags?1:0}get bidiLevel(){let e=7&this.flags;return 7==e?null:e}get goalColumn(){let e=this.flags>>6;return 16777215==e?void 0:e}map(e,t=-1){let i,n;return this.empty?i=n=e.mapPos(this.from,t):(i=e.mapPos(this.from,1),n=e.mapPos(this.to,-1)),i==this.from&&n==this.to?this:new M(i,n,this.flags)}extend(e,t=e){if(e<=this.anchor&&t>=this.anchor)return E.range(e,t);let i=Math.abs(e-this.anchor)>Math.abs(t-this.anchor)?e:t;return E.range(this.anchor,i)}eq(e,t=!1){return!(this.anchor!=e.anchor||this.head!=e.head||t&&this.empty&&this.assoc!=e.assoc)}toJSON(){return{anchor:this.anchor,head:this.head}}static fromJSON(e){if(!e||"number"!=typeof e.anchor||"number"!=typeof e.head)throw new RangeError("Invalid JSON representation for SelectionRange");return E.range(e.anchor,e.head)}static create(e,t,i){return new M(e,t,i)}}class E{constructor(e,t){this.ranges=e,this.mainIndex=t}map(e,t=-1){return e.empty?this:E.create(this.ranges.map((i=>i.map(e,t))),this.mainIndex)}eq(e,t=!1){if(this.ranges.length!=e.ranges.length||this.mainIndex!=e.mainIndex)return!1;for(let i=0;i<this.ranges.length;i++)if(!this.ranges[i].eq(e.ranges[i],t))return!1;return!0}get main(){return this.ranges[this.mainIndex]}asSingle(){return 1==this.ranges.length?this:new E([this.main],0)}addRange(e,t=!0){return E.create([e].concat(this.ranges),t?0:this.mainIndex+1)}replaceRange(e,t=this.mainIndex){let i=this.ranges.slice();return i[t]=e,E.create(i,this.mainIndex)}toJSON(){return{ranges:this.ranges.map((e=>e.toJSON())),main:this.mainIndex}}static fromJSON(e){if(!e||!Array.isArray(e.ranges)||"number"!=typeof e.main||e.main>=e.ranges.length)throw new RangeError("Invalid JSON representation for EditorSelection");return new E(e.ranges.map((e=>M.fromJSON(e))),e.main)}static single(e,t=e){return new E([E.range(e,t)],0)}static create(e,t=0){if(0==e.length)throw new RangeError("A selection needs at least one range");for(let i=0,n=0;n<e.length;n++){let r=e[n];if(r.empty?r.from<=i:r.from<i)return E.normalized(e.slice(),t);i=r.to}return new E(e,t)}static cursor(e,t=0,i,n){return M.create(e,e,(0==t?0:t<0?8:16)|(null==i?7:Math.min(6,i))|(null!=n?n:16777215)<<6)}static range(e,t,i,n){let r=(null!=i?i:16777215)<<6|(null==n?7:Math.min(6,n));return t<e?M.create(t,e,48|r):M.create(e,t,(t>e?8:0)|r)}static normalized(e,t=0){let i=e[t];e.sort(((e,t)=>e.from-t.from)),t=e.indexOf(i);for(let i=1;i<e.length;i++){let n=e[i],r=e[i-1];if(n.empty?n.from<=r.to:n.from<r.to){let o=r.from,s=Math.max(n.to,r.to);i<=t&&t--,e.splice(--i,2,n.anchor>n.head?E.range(s,o):E.range(o,s))}}return new E(e,t)}}function X(e,t){for(let i of e.ranges)if(i.to>t)throw new RangeError("Selection points outside of document")}let R=0;class _{constructor(e,t,i,n,r){this.combine=e,this.compareInput=t,this.compare=i,this.isStatic=n,this.id=R++,this.default=e([]),this.extensions="function"==typeof r?r(this):r}get reader(){return this}static define(e={}){return new _(e.combine||(e=>e),e.compareInput||((e,t)=>e===t),e.compare||(e.combine?(e,t)=>e===t:V),!!e.static,e.enables)}of(e){return new q([],this,0,e)}compute(e,t){if(this.isStatic)throw new Error("Can't compute a static facet");return new q(e,this,1,t)}computeN(e,t){if(this.isStatic)throw new Error("Can't compute a static facet");return new q(e,this,2,t)}from(e,t){return t||(t=e=>e),this.compute([e],(i=>t(i.field(e))))}}function V(e,t){return e==t||e.length==t.length&&e.every(((e,i)=>e===t[i]))}class q{constructor(e,t,i,n){this.dependencies=e,this.facet=t,this.type=i,this.value=n,this.id=R++}dynamicSlot(e){var t;let i=this.value,n=this.facet.compareInput,r=this.id,o=e[r]>>1,s=2==this.type,a=!1,l=!1,h=[];for(let i of this.dependencies)"doc"==i?a=!0:"selection"==i?l=!0:1&(null!==(t=e[i.id])&&void 0!==t?t:1)||h.push(e[i.id]);return{create:e=>(e.values[o]=i(e),1),update(e,t){if(a&&t.docChanged||l&&(t.docChanged||t.selection)||D(e,h)){let t=i(e);if(s?!B(t,e.values[o],n):!n(t,e.values[o]))return e.values[o]=t,1}return 0},reconfigure:(e,t)=>{let a,l=t.config.address[r];if(null!=l){let r=H(t,l);if(this.dependencies.every((i=>i instanceof _?t.facet(i)===e.facet(i):!(i instanceof j)||t.field(i,!1)==e.field(i,!1)))||(s?B(a=i(e),r,n):n(a=i(e),r)))return e.values[o]=r,0}else a=i(e);return e.values[o]=a,1}}}}function B(e,t,i){if(e.length!=t.length)return!1;for(let n=0;n<e.length;n++)if(!i(e[n],t[n]))return!1;return!0}function D(e,t){let i=!1;for(let n of t)1&F(e,n)&&(i=!0);return i}function z(e,t,i){let n=i.map((t=>e[t.id])),r=i.map((e=>e.type)),o=n.filter((e=>!(1&e))),s=e[t.id]>>1;function a(e){let i=[];for(let t=0;t<n.length;t++){let o=H(e,n[t]);if(2==r[t])for(let e of o)i.push(e);else i.push(o)}return t.combine(i)}return{create(e){for(let t of n)F(e,t);return e.values[s]=a(e),1},update(e,i){if(!D(e,o))return 0;let n=a(e);return t.compare(n,e.values[s])?0:(e.values[s]=n,1)},reconfigure(e,r){let o=D(e,n),l=r.config.facets[t.id],h=r.facet(t);if(l&&!o&&V(i,l))return e.values[s]=h,0;let c=a(e);return t.compare(c,h)?(e.values[s]=h,0):(e.values[s]=c,1)}}}const L=_.define({static:!0});class j{constructor(e,t,i,n,r){this.id=e,this.createF=t,this.updateF=i,this.compareF=n,this.spec=r,this.provides=void 0}static define(e){let t=new j(R++,e.create,e.update,e.compare||((e,t)=>e===t),e);return e.provide&&(t.provides=e.provide(t)),t}create(e){let t=e.facet(L).find((e=>e.field==this));return((null==t?void 0:t.create)||this.createF)(e)}slot(e){let t=e[this.id]>>1;return{create:e=>(e.values[t]=this.create(e),1),update:(e,i)=>{let n=e.values[t],r=this.updateF(n,i);return this.compareF(n,r)?0:(e.values[t]=r,1)},reconfigure:(e,i)=>null!=i.config.address[this.id]?(e.values[t]=i.field(this),0):(e.values[t]=this.create(e),1)}}init(e){return[this,L.of({field:this,create:e})]}get extension(){return this}}function W(e){return t=>new I(t,e)}const Y={highest:W(0),high:W(1),default:W(2),low:W(3),lowest:W(4)};class I{constructor(e,t){this.inner=e,this.prec=t}}class G{of(e){return new U(this,e)}reconfigure(e){return G.reconfigure.of({compartment:this,extension:e})}get(e){return e.config.compartments.get(this)}}class U{constructor(e,t){this.compartment=e,this.inner=t}}class N{constructor(e,t,i,n,r,o){for(this.base=e,this.compartments=t,this.dynamicSlots=i,this.address=n,this.staticValues=r,this.facets=o,this.statusTemplate=[];this.statusTemplate.length<i.length;)this.statusTemplate.push(0)}staticFacet(e){let t=this.address[e.id];return null==t?e.default:this.staticValues[t>>1]}static resolve(e,t,i){let n=[],r=Object.create(null),o=new Map;for(let i of function(e,t,i){let n=[[],[],[],[],[]],r=new Map;return function e(o,s){let a=r.get(o);if(null!=a){if(a<=s)return;let e=n[a].indexOf(o);e>-1&&n[a].splice(e,1),o instanceof U&&i.delete(o.compartment)}if(r.set(o,s),Array.isArray(o))for(let t of o)e(t,s);else if(o instanceof U){if(i.has(o.compartment))throw new RangeError("Duplicate use of compartment in extensions");let n=t.get(o.compartment)||o.inner;i.set(o.compartment,n),e(n,s)}else if(o instanceof I)e(o.inner,o.prec);else if(o instanceof j)n[s].push(o),o.provides&&e(o.provides,s);else if(o instanceof q)n[s].push(o),o.facet.extensions&&e(o.facet.extensions,2);else{let t=o.extension;if(!t)throw new Error(`Unrecognized extension value in extension set (${o}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);e(t,s)}}(e,2),n.reduce(((e,t)=>e.concat(t)))}(e,t,o))i instanceof j?n.push(i):(r[i.facet.id]||(r[i.facet.id]=[])).push(i);let s=Object.create(null),a=[],l=[];for(let e of n)s[e.id]=l.length<<1,l.push((t=>e.slot(t)));let h=null==i?void 0:i.config.facets;for(let e in r){let t=r[e],n=t[0].facet,o=h&&h[e]||[];if(t.every((e=>0==e.type)))if(s[n.id]=a.length<<1|1,V(o,t))a.push(i.facet(n));else{let e=n.combine(t.map((e=>e.value)));a.push(i&&n.compare(e,i.facet(n))?i.facet(n):e)}else{for(let e of t)0==e.type?(s[e.id]=a.length<<1|1,a.push(e.value)):(s[e.id]=l.length<<1,l.push((t=>e.dynamicSlot(t))));s[n.id]=l.length<<1,l.push((e=>z(e,n,t)))}}let c=l.map((e=>e(s)));return new N(e,o,c,s,a,r)}}function F(e,t){if(1&t)return 2;let i=t>>1,n=e.status[i];if(4==n)throw new Error("Cyclic dependency between fields and/or facets");if(2&n)return n;e.status[i]=4;let r=e.computeSlot(e,e.config.dynamicSlots[i]);return e.status[i]=2|r}function H(e,t){return 1&t?e.config.staticValues[t>>1]:e.values[t>>1]}const K=_.define(),J=_.define({combine:e=>e.some((e=>e)),static:!0}),ee=_.define({combine:e=>e.length?e[0]:void 0,static:!0}),te=_.define(),ie=_.define(),ne=_.define(),re=_.define({combine:e=>!!e.length&&e[0]});class oe{constructor(e,t){this.type=e,this.value=t}static define(){return new se}}class se{of(e){return new oe(this,e)}}class ae{constructor(e){this.map=e}of(e){return new le(this,e)}}class le{constructor(e,t){this.type=e,this.value=t}map(e){let t=this.type.map(this.value,e);return void 0===t?void 0:t==this.value?this:new le(this.type,t)}is(e){return this.type==e}static define(e={}){return new ae(e.map||(e=>e))}static mapEffects(e,t){if(!e.length)return e;let i=[];for(let n of e){let e=n.map(t);e&&i.push(e)}return i}}le.reconfigure=le.define(),le.appendConfig=le.define();class he{constructor(e,t,i,n,r,o){this.startState=e,this.changes=t,this.selection=i,this.effects=n,this.annotations=r,this.scrollIntoView=o,this._doc=null,this._state=null,i&&X(i,t.newLength),r.some((e=>e.type==he.time))||(this.annotations=r.concat(he.time.of(Date.now())))}static create(e,t,i,n,r,o){return new he(e,t,i,n,r,o)}get newDoc(){return this._doc||(this._doc=this.changes.apply(this.startState.doc))}get newSelection(){return this.selection||this.startState.selection.map(this.changes)}get state(){return this._state||this.startState.applyTransaction(this),this._state}annotation(e){for(let t of this.annotations)if(t.type==e)return t.value}get docChanged(){return!this.changes.empty}get reconfigured(){return this.startState.config!=this.state.config}isUserEvent(e){let t=this.annotation(he.userEvent);return!(!t||!(t==e||t.length>e.length&&t.slice(0,e.length)==e&&"."==t[e.length]))}}function ce(e,t){let i=[];for(let n=0,r=0;;){let o,s;if(n<e.length&&(r==t.length||t[r]>=e[n]))o=e[n++],s=e[n++];else{if(!(r<t.length))return i;o=t[r++],s=t[r++]}!i.length||i[i.length-1]<o?i.push(o,s):i[i.length-1]<s&&(i[i.length-1]=s)}}function de(e,t,i){var n;let r,o,s;return i?(r=t.changes,o=A.empty(t.changes.length),s=e.changes.compose(t.changes)):(r=t.changes.map(e.changes),o=e.changes.mapDesc(t.changes,!0),s=e.changes.compose(r)),{changes:s,selection:t.selection?t.selection.map(o):null===(n=e.selection)||void 0===n?void 0:n.map(r),effects:le.mapEffects(e.effects,r).concat(le.mapEffects(t.effects,o)),annotations:e.annotations.length?e.annotations.concat(t.annotations):t.annotations,scrollIntoView:e.scrollIntoView||t.scrollIntoView}}function ue(e,t,i){let n=t.selection,r=Oe(t.annotations);return t.userEvent&&(r=r.concat(he.userEvent.of(t.userEvent))),{changes:t.changes instanceof A?t.changes:A.of(t.changes||[],i,e.facet(ee)),selection:n&&(n instanceof E?n:E.single(n.anchor,n.head)),effects:Oe(t.effects),annotations:r,scrollIntoView:!!t.scrollIntoView}}function fe(e,t,i){let n=ue(e,t.length?t[0]:{},e.doc.length);t.length&&!1===t[0].filter&&(i=!1);for(let r=1;r<t.length;r++){!1===t[r].filter&&(i=!1);let o=!!t[r].sequential;n=de(n,ue(e,t[r],o?n.changes.newLength:e.doc.length),o)}let r=he.create(e,n.changes,n.selection,n.effects,n.annotations,n.scrollIntoView);return function(e){let t=e.startState,i=t.facet(ne),n=e;for(let r=i.length-1;r>=0;r--){let o=i[r](e);o&&Object.keys(o).length&&(n=de(n,ue(t,o,e.changes.newLength),!0))}return n==e?e:he.create(t,e.changes,e.selection,n.effects,n.annotations,n.scrollIntoView)}(i?function(e){let t=e.startState,i=!0;for(let n of t.facet(te)){let t=n(e);if(!1===t){i=!1;break}Array.isArray(t)&&(i=!0===i?t:ce(i,t))}if(!0!==i){let n,r;if(!1===i)r=e.changes.invertedDesc,n=A.empty(t.doc.length);else{let t=e.changes.filter(i);n=t.changes,r=t.filtered.mapDesc(t.changes).invertedDesc}e=he.create(t,n,e.selection&&e.selection.map(r),le.mapEffects(e.effects,r),e.annotations,e.scrollIntoView)}let n=t.facet(ie);for(let i=n.length-1;i>=0;i--){let r=n[i](e);e=r instanceof he?r:Array.isArray(r)&&1==r.length&&r[0]instanceof he?r[0]:fe(t,Oe(r),!1)}return e}(r):r)}he.time=oe.define(),he.userEvent=oe.define(),he.addToHistory=oe.define(),he.remote=oe.define();const pe=[];function Oe(e){return null==e?pe:Array.isArray(e)?e:[e]}var me;t.CharCategory=void 0,(me=t.CharCategory||(t.CharCategory={}))[me.Word=0]="Word",me[me.Space=1]="Space",me[me.Other=2]="Other";const ge=/[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;let be;try{be=new RegExp("[\\p{Alphabetic}\\p{Number}_]","u")}catch(e){}class we{constructor(e,t,i,n,r,o){this.config=e,this.doc=t,this.selection=i,this.values=n,this.status=e.statusTemplate.slice(),this.computeSlot=r,o&&(o._state=this);for(let e=0;e<this.config.dynamicSlots.length;e++)F(this,e<<1);this.computeSlot=null}field(e,t=!0){let i=this.config.address[e.id];if(null!=i)return F(this,i),H(this,i);if(t)throw new RangeError("Field is not present in this state")}update(...e){return fe(this,e,!0)}applyTransaction(e){let t,i=this.config,{base:n,compartments:r}=i;for(let t of e.effects)t.is(G.reconfigure)?(i&&(r=new Map,i.compartments.forEach(((e,t)=>r.set(t,e))),i=null),r.set(t.value.compartment,t.value.extension)):t.is(le.reconfigure)?(i=null,n=t.value):t.is(le.appendConfig)&&(i=null,n=Oe(n).concat(t.value));i?t=e.startState.values.slice():(i=N.resolve(n,r,this),t=new we(i,this.doc,this.selection,i.dynamicSlots.map((()=>null)),((e,t)=>t.reconfigure(e,this)),null).values);let o=e.startState.facet(J)?e.newSelection:e.newSelection.asSingle();new we(i,e.newDoc,o,t,((t,i)=>i.update(t,e)),e)}replaceSelection(e){return"string"==typeof e&&(e=this.toText(e)),this.changeByRange((t=>({changes:{from:t.from,to:t.to,insert:e},range:E.cursor(t.from+e.length)})))}changeByRange(e){let t=this.selection,i=e(t.ranges[0]),n=this.changes(i.changes),r=[i.range],o=Oe(i.effects);for(let i=1;i<t.ranges.length;i++){let s=e(t.ranges[i]),a=this.changes(s.changes),l=a.map(n);for(let e=0;e<i;e++)r[e]=r[e].map(l);let h=n.mapDesc(a,!0);r.push(s.range.map(h)),n=n.compose(l),o=le.mapEffects(o,l).concat(le.mapEffects(Oe(s.effects),h))}return{changes:n,selection:E.create(r,t.mainIndex),effects:o}}changes(e=[]){return e instanceof A?e:A.of(e,this.doc.length,this.facet(we.lineSeparator))}toText(e){return i.of(e.split(this.facet(we.lineSeparator)||x))}sliceDoc(e=0,t=this.doc.length){return this.doc.sliceString(e,t,this.lineBreak)}facet(e){let t=this.config.address[e.id];return null==t?e.default:(F(this,t),H(this,t))}toJSON(e){let t={doc:this.sliceDoc(),selection:this.selection.toJSON()};if(e)for(let i in e){let n=e[i];n instanceof j&&null!=this.config.address[n.id]&&(t[i]=n.spec.toJSON(this.field(e[i]),this))}return t}static fromJSON(e,t={},i){if(!e||"string"!=typeof e.doc)throw new RangeError("Invalid JSON representation for EditorState");let n=[];if(i)for(let t in i)if(Object.prototype.hasOwnProperty.call(e,t)){let r=i[t],o=e[t];n.push(r.init((e=>r.spec.fromJSON(o,e))))}return we.create({doc:e.doc,selection:E.fromJSON(e.selection),extensions:t.extensions?n.concat([t.extensions]):n})}static create(e={}){let t=N.resolve(e.extensions||[],new Map),n=e.doc instanceof i?e.doc:i.of((e.doc||"").split(t.staticFacet(we.lineSeparator)||x)),r=e.selection?e.selection instanceof E?e.selection:E.single(e.selection.anchor,e.selection.head):E.single(0);return X(r,n.length),t.staticFacet(J)||(r=r.asSingle()),new we(t,n,r,t.dynamicSlots.map((()=>null)),((e,t)=>t.create(e)),null)}get tabSize(){return this.facet(we.tabSize)}get lineBreak(){return this.facet(we.lineSeparator)||"\n"}get readOnly(){return this.facet(re)}phrase(e,...t){for(let t of this.facet(we.phrases))if(Object.prototype.hasOwnProperty.call(t,e)){e=t[e];break}return t.length&&(e=e.replace(/\$(\$|\d*)/g,((e,i)=>{if("$"==i)return"$";let n=+(i||1);return!n||n>t.length?e:t[n-1]}))),e}languageDataAt(e,t,i=-1){let n=[];for(let r of this.facet(K))for(let o of r(this,t,i))Object.prototype.hasOwnProperty.call(o,e)&&n.push(o[e]);return n}charCategorizer(e){return i=this.languageDataAt("wordChars",e).join(""),e=>{if(!/\S/.test(e))return t.CharCategory.Space;if(function(e){if(be)return be.test(e);for(let t=0;t<e.length;t++){let i=e[t];if(/\w/.test(i)||i>""&&(i.toUpperCase()!=i.toLowerCase()||ge.test(i)))return!0}return!1}(e))return t.CharCategory.Word;for(let n=0;n<i.length;n++)if(e.indexOf(i[n])>-1)return t.CharCategory.Word;return t.CharCategory.Other};var i}wordAt(e){let{text:i,from:n,length:r}=this.doc.lineAt(e),o=this.charCategorizer(e),s=e-n,a=e-n;for(;s>0;){let e=O(i,s,!1);if(o(i.slice(e,s))!=t.CharCategory.Word)break;s=e}for(;a<r;){let e=O(i,a);if(o(i.slice(a,e))!=t.CharCategory.Word)break;a=e}return s==a?null:E.range(s+n,a+n)}}we.allowMultipleSelections=J,we.tabSize=_.define({combine:e=>e.length?e[0]:4}),we.lineSeparator=ee,we.readOnly=re,we.phrases=_.define({compare(e,t){let i=Object.keys(e),n=Object.keys(t);return i.length==n.length&&i.every((i=>e[i]==t[i]))}}),we.languageData=K,we.changeFilter=te,we.transactionFilter=ie,we.transactionExtender=ne,G.reconfigure=le.define();class ye{eq(e){return this==e}range(e,t=e){return ve.create(e,t,this)}}ye.prototype.startSide=ye.prototype.endSide=0,ye.prototype.point=!1,ye.prototype.mapMode=t.MapMode.TrackDel;class ve{constructor(e,t,i){this.from=e,this.to=t,this.value=i}static create(e,t,i){return new ve(e,t,i)}}function xe(e,t){return e.from-t.from||e.value.startSide-t.value.startSide}class Se{constructor(e,t,i,n){this.from=e,this.to=t,this.value=i,this.maxPoint=n}get length(){return this.to[this.to.length-1]}findIndex(e,t,i,n=0){let r=i?this.to:this.from;for(let o=n,s=r.length;;){if(o==s)return o;let n=o+s>>1,a=r[n]-e||(i?this.value[n].endSide:this.value[n].startSide)-t;if(n==o)return a>=0?o:s;a>=0?s=n:o=n+1}}between(e,t,i,n){for(let r=this.findIndex(t,-1e9,!0),o=this.findIndex(i,1e9,!1,r);r<o;r++)if(!1===n(this.from[r]+e,this.to[r]+e,this.value[r]))return!1}map(e,t){let i=[],n=[],r=[],o=-1,s=-1;for(let a=0;a<this.value.length;a++){let l,h,c=this.value[a],d=this.from[a]+e,u=this.to[a]+e;if(d==u){let e=t.mapPos(d,c.startSide,c.mapMode);if(null==e)continue;if(l=h=e,c.startSide!=c.endSide&&(h=t.mapPos(d,c.endSide),h<l))continue}else if(l=t.mapPos(d,c.startSide),h=t.mapPos(u,c.endSide),l>h||l==h&&c.startSide>0&&c.endSide<=0)continue;(h-l||c.endSide-c.startSide)<0||(o<0&&(o=l),c.point&&(s=Math.max(s,h-l)),i.push(c),n.push(l-o),r.push(h-o))}return{mapped:i.length?new Se(n,r,i,s):null,pos:o}}}class ke{constructor(e,t,i,n){this.chunkPos=e,this.chunk=t,this.nextLayer=i,this.maxPoint=n}static create(e,t,i,n){return new ke(e,t,i,n)}get length(){let e=this.chunk.length-1;return e<0?0:Math.max(this.chunkEnd(e),this.nextLayer.length)}get size(){if(this.isEmpty)return 0;let e=this.nextLayer.size;for(let t of this.chunk)e+=t.value.length;return e}chunkEnd(e){return this.chunkPos[e]+this.chunk[e].length}update(e){let{add:t=[],sort:i=!1,filterFrom:n=0,filterTo:r=this.length}=e,o=e.filter;if(0==t.length&&!o)return this;if(i&&(t=t.slice().sort(xe)),this.isEmpty)return t.length?ke.of(t):this;let s=new Pe(this,null,-1).goto(0),a=0,l=[],h=new Ae;for(;s.value||a<t.length;)if(a<t.length&&(s.from-t[a].from||s.startSide-t[a].value.startSide)>=0){let e=t[a++];h.addInner(e.from,e.to,e.value)||l.push(e)}else 1==s.rangeIndex&&s.chunkIndex<this.chunk.length&&(a==t.length||this.chunkEnd(s.chunkIndex)<t[a].from)&&(!o||n>this.chunkEnd(s.chunkIndex)||r<this.chunkPos[s.chunkIndex])&&h.addChunk(this.chunkPos[s.chunkIndex],this.chunk[s.chunkIndex])?s.nextChunk():((!o||n>s.to||r<s.from||o(s.from,s.to,s.value))&&(h.addInner(s.from,s.to,s.value)||l.push(ve.create(s.from,s.to,s.value))),s.next());return h.finishInner(this.nextLayer.isEmpty&&!l.length?ke.empty:this.nextLayer.update({add:l,filter:o,filterFrom:n,filterTo:r}))}map(e){if(e.empty||this.isEmpty)return this;let t=[],i=[],n=-1;for(let r=0;r<this.chunk.length;r++){let o=this.chunkPos[r],s=this.chunk[r],a=e.touchesRange(o,o+s.length);if(!1===a)n=Math.max(n,s.maxPoint),t.push(s),i.push(e.mapPos(o));else if(!0===a){let{mapped:r,pos:a}=s.map(o,e);r&&(n=Math.max(n,r.maxPoint),t.push(r),i.push(a))}}let r=this.nextLayer.map(e);return 0==t.length?r:new ke(i,t,r||ke.empty,n)}between(e,t,i){if(!this.isEmpty){for(let n=0;n<this.chunk.length;n++){let r=this.chunkPos[n],o=this.chunk[n];if(t>=r&&e<=r+o.length&&!1===o.between(r,e-r,t-r,i))return}this.nextLayer.between(e,t,i)}}iter(e=0){return Ce.from([this]).goto(e)}get isEmpty(){return this.nextLayer==this}static iter(e,t=0){return Ce.from(e).goto(t)}static compare(e,t,i,n,r=-1){let o=e.filter((e=>e.maxPoint>0||!e.isEmpty&&e.maxPoint>=r)),s=t.filter((e=>e.maxPoint>0||!e.isEmpty&&e.maxPoint>=r)),a=Qe(o,s,i),l=new Ze(o,a,r),h=new Ze(s,a,r);i.iterGaps(((e,t,i)=>Te(l,e,h,t,i,n))),i.empty&&0==i.length&&Te(l,0,h,0,0,n)}static eq(e,t,i=0,n){null==n&&(n=999999999);let r=e.filter((e=>!e.isEmpty&&t.indexOf(e)<0)),o=t.filter((t=>!t.isEmpty&&e.indexOf(t)<0));if(r.length!=o.length)return!1;if(!r.length)return!0;let s=Qe(r,o),a=new Ze(r,s,0).goto(i),l=new Ze(o,s,0).goto(i);for(;;){if(a.to!=l.to||!Me(a.active,l.active)||a.point&&(!l.point||!a.point.eq(l.point)))return!1;if(a.to>n)return!0;a.next(),l.next()}}static spans(e,t,i,n,r=-1){let o=new Ze(e,null,r).goto(t),s=t,a=o.openStart;for(;;){let e=Math.min(o.to,i);if(o.point){let i=o.activeForPoint(o.to),r=o.pointFrom<t?i.length+1:o.point.startSide<0?i.length:Math.min(i.length,a);n.point(s,e,o.point,i,r,o.pointRank),a=Math.min(o.openEnd(e),i.length)}else e>s&&(n.span(s,e,o.active,a),a=o.openEnd(e));if(o.to>i)return a+(o.point&&o.to>i?1:0);s=o.to,o.next()}}static of(e,t=!1){let i=new Ae;for(let n of e instanceof ve?[e]:t?function(e){if(e.length>1)for(let t=e[0],i=1;i<e.length;i++){let n=e[i];if(xe(t,n)>0)return e.slice().sort(xe);t=n}return e}(e):e)i.add(n.from,n.to,n.value);return i.finish()}static join(e){if(!e.length)return ke.empty;let t=e[e.length-1];for(let i=e.length-2;i>=0;i--)for(let n=e[i];n!=ke.empty;n=n.nextLayer)t=new ke(n.chunkPos,n.chunk,t,Math.max(n.maxPoint,t.maxPoint));return t}}ke.empty=new ke([],[],null,-1),ke.empty.nextLayer=ke.empty;class Ae{finishChunk(e){this.chunks.push(new Se(this.from,this.to,this.value,this.maxPoint)),this.chunkPos.push(this.chunkStart),this.chunkStart=-1,this.setMaxPoint=Math.max(this.setMaxPoint,this.maxPoint),this.maxPoint=-1,e&&(this.from=[],this.to=[],this.value=[])}constructor(){this.chunks=[],this.chunkPos=[],this.chunkStart=-1,this.last=null,this.lastFrom=-1e9,this.lastTo=-1e9,this.from=[],this.to=[],this.value=[],this.maxPoint=-1,this.setMaxPoint=-1,this.nextLayer=null}add(e,t,i){this.addInner(e,t,i)||(this.nextLayer||(this.nextLayer=new Ae)).add(e,t,i)}addInner(e,t,i){let n=e-this.lastTo||i.startSide-this.last.endSide;if(n<=0&&(e-this.lastFrom||i.startSide-this.last.startSide)<0)throw new Error("Ranges must be added sorted by `from` position and `startSide`");return!(n<0||(250==this.from.length&&this.finishChunk(!0),this.chunkStart<0&&(this.chunkStart=e),this.from.push(e-this.chunkStart),this.to.push(t-this.chunkStart),this.last=i,this.lastFrom=e,this.lastTo=t,this.value.push(i),i.point&&(this.maxPoint=Math.max(this.maxPoint,t-e)),0))}addChunk(e,t){if((e-this.lastTo||t.value[0].startSide-this.last.endSide)<0)return!1;this.from.length&&this.finishChunk(!0),this.setMaxPoint=Math.max(this.setMaxPoint,t.maxPoint),this.chunks.push(t),this.chunkPos.push(e);let i=t.value.length-1;return this.last=t.value[i],this.lastFrom=t.from[i]+e,this.lastTo=t.to[i]+e,!0}finish(){return this.finishInner(ke.empty)}finishInner(e){if(this.from.length&&this.finishChunk(!1),0==this.chunks.length)return e;let t=ke.create(this.chunkPos,this.chunks,this.nextLayer?this.nextLayer.finishInner(e):e,this.setMaxPoint);return this.from=null,t}}function Qe(e,t,i){let n=new Map;for(let t of e)for(let e=0;e<t.chunk.length;e++)t.chunk[e].maxPoint<=0&&n.set(t.chunk[e],t.chunkPos[e]);let r=new Set;for(let e of t)for(let t=0;t<e.chunk.length;t++){let o=n.get(e.chunk[t]);null==o||(i?i.mapPos(o):o)!=e.chunkPos[t]||(null==i?void 0:i.touchesRange(o,o+e.chunk[t].length))||r.add(e.chunk[t])}return r}class Pe{constructor(e,t,i,n=0){this.layer=e,this.skip=t,this.minPoint=i,this.rank=n}get startSide(){return this.value?this.value.startSide:0}get endSide(){return this.value?this.value.endSide:0}goto(e,t=-1e9){return this.chunkIndex=this.rangeIndex=0,this.gotoInner(e,t,!1),this}gotoInner(e,t,i){for(;this.chunkIndex<this.layer.chunk.length;){let t=this.layer.chunk[this.chunkIndex];if(!(this.skip&&this.skip.has(t)||this.layer.chunkEnd(this.chunkIndex)<e||t.maxPoint<this.minPoint))break;this.chunkIndex++,i=!1}if(this.chunkIndex<this.layer.chunk.length){let n=this.layer.chunk[this.chunkIndex].findIndex(e-this.layer.chunkPos[this.chunkIndex],t,!0);(!i||this.rangeIndex<n)&&this.setRangeIndex(n)}this.next()}forward(e,t){(this.to-e||this.endSide-t)<0&&this.gotoInner(e,t,!0)}next(){for(;;){if(this.chunkIndex==this.layer.chunk.length){this.from=this.to=1e9,this.value=null;break}{let e=this.layer.chunkPos[this.chunkIndex],t=this.layer.chunk[this.chunkIndex],i=e+t.from[this.rangeIndex];if(this.from=i,this.to=e+t.to[this.rangeIndex],this.value=t.value[this.rangeIndex],this.setRangeIndex(this.rangeIndex+1),this.minPoint<0||this.value.point&&this.to-this.from>=this.minPoint)break}}}setRangeIndex(e){if(e==this.layer.chunk[this.chunkIndex].value.length){if(this.chunkIndex++,this.skip)for(;this.chunkIndex<this.layer.chunk.length&&this.skip.has(this.layer.chunk[this.chunkIndex]);)this.chunkIndex++;this.rangeIndex=0}else this.rangeIndex=e}nextChunk(){this.chunkIndex++,this.rangeIndex=0,this.next()}compare(e){return this.from-e.from||this.startSide-e.startSide||this.rank-e.rank||this.to-e.to||this.endSide-e.endSide}}class Ce{constructor(e){this.heap=e}static from(e,t=null,i=-1){let n=[];for(let r=0;r<e.length;r++)for(let o=e[r];!o.isEmpty;o=o.nextLayer)o.maxPoint>=i&&n.push(new Pe(o,t,i,r));return 1==n.length?n[0]:new Ce(n)}get startSide(){return this.value?this.value.startSide:0}goto(e,t=-1e9){for(let i of this.heap)i.goto(e,t);for(let e=this.heap.length>>1;e>=0;e--)$e(this.heap,e);return this.next(),this}forward(e,t){for(let i of this.heap)i.forward(e,t);for(let e=this.heap.length>>1;e>=0;e--)$e(this.heap,e);(this.to-e||this.value.endSide-t)<0&&this.next()}next(){if(0==this.heap.length)this.from=this.to=1e9,this.value=null,this.rank=-1;else{let e=this.heap[0];this.from=e.from,this.to=e.to,this.value=e.value,this.rank=e.rank,e.value&&e.next(),$e(this.heap,0)}}}function $e(e,t){for(let i=e[t];;){let n=1+(t<<1);if(n>=e.length)break;let r=e[n];if(n+1<e.length&&r.compare(e[n+1])>=0&&(r=e[n+1],n++),i.compare(r)<0)break;e[n]=i,e[t]=r,t=n}}class Ze{constructor(e,t,i){this.minPoint=i,this.active=[],this.activeTo=[],this.activeRank=[],this.minActive=-1,this.point=null,this.pointFrom=0,this.pointRank=0,this.to=-1e9,this.endSide=0,this.openStart=-1,this.cursor=Ce.from(e,t,i)}goto(e,t=-1e9){return this.cursor.goto(e,t),this.active.length=this.activeTo.length=this.activeRank.length=0,this.minActive=-1,this.to=e,this.endSide=t,this.openStart=-1,this.next(),this}forward(e,t){for(;this.minActive>-1&&(this.activeTo[this.minActive]-e||this.active[this.minActive].endSide-t)<0;)this.removeActive(this.minActive);this.cursor.forward(e,t)}removeActive(e){Ee(this.active,e),Ee(this.activeTo,e),Ee(this.activeRank,e),this.minActive=Re(this.active,this.activeTo)}addActive(e){let t=0,{value:i,to:n,rank:r}=this.cursor;for(;t<this.activeRank.length&&(r-this.activeRank[t]||n-this.activeTo[t])>0;)t++;Xe(this.active,t,i),Xe(this.activeTo,t,n),Xe(this.activeRank,t,r),e&&Xe(e,t,this.cursor.from),this.minActive=Re(this.active,this.activeTo)}next(){let e=this.to,t=this.point;this.point=null;let i=this.openStart<0?[]:null;for(;;){let n=this.minActive;if(n>-1&&(this.activeTo[n]-this.cursor.from||this.active[n].endSide-this.cursor.startSide)<0){if(this.activeTo[n]>e){this.to=this.activeTo[n],this.endSide=this.active[n].endSide;break}this.removeActive(n),i&&Ee(i,n)}else{if(!this.cursor.value){this.to=this.endSide=1e9;break}if(this.cursor.from>e){this.to=this.cursor.from,this.endSide=this.cursor.startSide;break}{let e=this.cursor.value;if(e.point){if(!(t&&this.cursor.to==this.to&&this.cursor.from<this.cursor.to)){this.point=e,this.pointFrom=this.cursor.from,this.pointRank=this.cursor.rank,this.to=this.cursor.to,this.endSide=e.endSide,this.cursor.next(),this.forward(this.to,this.endSide);break}this.cursor.next()}else this.addActive(i),this.cursor.next()}}}if(i){this.openStart=0;for(let t=i.length-1;t>=0&&i[t]<e;t--)this.openStart++}}activeForPoint(e){if(!this.active.length)return this.active;let t=[];for(let i=this.active.length-1;i>=0&&!(this.activeRank[i]<this.pointRank);i--)(this.activeTo[i]>e||this.activeTo[i]==e&&this.active[i].endSide>=this.point.endSide)&&t.push(this.active[i]);return t.reverse()}openEnd(e){let t=0;for(let i=this.activeTo.length-1;i>=0&&this.activeTo[i]>e;i--)t++;return t}}function Te(e,t,i,n,r,o){e.goto(t),i.goto(n);let s=n+r,a=n,l=n-t;for(;;){let t=e.to+l-i.to||e.endSide-i.endSide,n=t<0?e.to+l:i.to,r=Math.min(n,s);if(e.point||i.point?e.point&&i.point&&(e.point==i.point||e.point.eq(i.point))&&Me(e.activeForPoint(e.to),i.activeForPoint(i.to))||o.comparePoint(a,r,e.point,i.point):r>a&&!Me(e.active,i.active)&&o.compareRange(a,r,e.active,i.active),n>s)break;a=n,t<=0&&e.next(),t>=0&&i.next()}}function Me(e,t){if(e.length!=t.length)return!1;for(let i=0;i<e.length;i++)if(e[i]!=t[i]&&!e[i].eq(t[i]))return!1;return!0}function Ee(e,t){for(let i=t,n=e.length-1;i<n;i++)e[i]=e[i+1];e.pop()}function Xe(e,t,i){for(let i=e.length-1;i>=t;i--)e[i+1]=e[i];e[t]=i}function Re(e,t){let i=-1,n=1e9;for(let r=0;r<t.length;r++)(t[r]-n||e[r].endSide-e[i].endSide)<0&&(i=r,n=t[r]);return i}t.Annotation=oe,t.AnnotationType=se,t.ChangeDesc=k,t.ChangeSet=A,t.Compartment=G,t.EditorSelection=E,t.EditorState=we,t.Facet=_,t.Line=c,t.Prec=Y,t.Range=ve,t.RangeSet=ke,t.RangeSetBuilder=Ae,t.RangeValue=ye,t.SelectionRange=M,t.StateEffect=le,t.StateEffectType=ae,t.StateField=j,t.Text=i,t.Transaction=he,t.codePointAt=y,t.codePointSize=v,t.combineConfig=function(e,t,i={}){let n={};for(let t of e)for(let e of Object.keys(t)){let r=t[e],o=n[e];if(void 0===o)n[e]=r;else if(o===r||void 0===r);else{if(!Object.hasOwnProperty.call(i,e))throw new Error("Config merge conflict for field "+e);n[e]=i[e](o,r)}}for(let e in t)void 0===n[e]&&(n[e]=t[e]);return n},t.countColumn=function(e,t,i=e.length){let n=0;for(let r=0;r<i;)9==e.charCodeAt(r)?(n+=t-n%t,r++):(n++,r=O(e,r));return n},t.findClusterBreak=O,t.findColumn=function(e,t,i,n){for(let n=0,r=0;;){if(r>=t)return n;if(n==e.length)break;r+=9==e.charCodeAt(n)?i-r%i:1,n=O(e,n)}return!0===n?-1:e.length},t.fromCodePoint=function(e){return e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(55296+(e>>10),56320+(1023&e)))}},1506:(e,t,i)=>{"use strict";var n=i(9064),r=i(9172),o=i(6237);function s(e){let t;return t=11==e.nodeType?e.getSelection?e:e.ownerDocument:e,t.getSelection()}function a(e,t){return!!t&&(e==t||e.contains(1!=t.nodeType?t.parentNode:t))}function l(e,t){if(!t.anchorNode)return!1;try{return a(e,t.anchorNode)}catch(e){return!1}}function h(e){return 3==e.nodeType?x(e,0,e.nodeValue.length).getClientRects():1==e.nodeType?e.getClientRects():[]}function c(e,t,i,n){return!!i&&(f(e,t,i,n,-1)||f(e,t,i,n,1))}function d(e){for(var t=0;;t++)if(!(e=e.previousSibling))return t}function u(e){return 1==e.nodeType&&/^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(e.nodeName)}function f(e,t,i,n,r){for(;;){if(e==i&&t==n)return!0;if(t==(r<0?0:p(e))){if("DIV"==e.nodeName)return!1;let i=e.parentNode;if(!i||1!=i.nodeType)return!1;t=d(e)+(r<0?0:1),e=i}else{if(1!=e.nodeType)return!1;if(1==(e=e.childNodes[t+(r<0?-1:0)]).nodeType&&"false"==e.contentEditable)return!1;t=r<0?p(e):0}}}function p(e){return 3==e.nodeType?e.nodeValue.length:e.childNodes.length}function O(e,t){let i=t?e.left:e.right;return{left:i,right:i,top:e.top,bottom:e.bottom}}function m(e){let t=e.visualViewport;return t?{left:0,right:t.width,top:0,bottom:t.height}:{left:0,right:e.innerWidth,top:0,bottom:e.innerHeight}}function g(e,t){let i=t.width/e.offsetWidth,n=t.height/e.offsetHeight;return(i>.995&&i<1.005||!isFinite(i)||Math.abs(t.width-e.offsetWidth)<1)&&(i=1),(n>.995&&n<1.005||!isFinite(n)||Math.abs(t.height-e.offsetHeight)<1)&&(n=1),{scaleX:i,scaleY:n}}class b{constructor(){this.anchorNode=null,this.anchorOffset=0,this.focusNode=null,this.focusOffset=0}eq(e){return this.anchorNode==e.anchorNode&&this.anchorOffset==e.anchorOffset&&this.focusNode==e.focusNode&&this.focusOffset==e.focusOffset}setRange(e){let{anchorNode:t,focusNode:i}=e;this.set(t,Math.min(e.anchorOffset,t?p(t):0),i,Math.min(e.focusOffset,i?p(i):0))}set(e,t,i,n){this.anchorNode=e,this.anchorOffset=t,this.focusNode=i,this.focusOffset=n}}let w,y=null;function v(e){if(e.setActive)return e.setActive();if(y)return e.focus(y);let t=[];for(let i=e;i&&(t.push(i,i.scrollTop,i.scrollLeft),i!=i.ownerDocument);i=i.parentNode);if(e.focus(null==y?{get preventScroll(){return y={preventScroll:!0},!0}}:void 0),!y){y=!1;for(let e=0;e<t.length;){let i=t[e++],n=t[e++],r=t[e++];i.scrollTop!=n&&(i.scrollTop=n),i.scrollLeft!=r&&(i.scrollLeft=r)}}}function x(e,t,i=t){let n=w||(w=document.createRange());return n.setEnd(e,i),n.setStart(e,t),n}function S(e,t,i,n){let r={key:t,code:t,keyCode:i,which:i,cancelable:!0};n&&({altKey:r.altKey,ctrlKey:r.ctrlKey,shiftKey:r.shiftKey,metaKey:r.metaKey}=n);let o=new KeyboardEvent("keydown",r);o.synthetic=!0,e.dispatchEvent(o);let s=new KeyboardEvent("keyup",r);return s.synthetic=!0,e.dispatchEvent(s),o.defaultPrevented||s.defaultPrevented}function k(e){for(;e.attributes.length;)e.removeAttributeNode(e.attributes[0])}function A(e){return e.scrollTop>Math.max(1,e.scrollHeight-e.clientHeight-4)}function Q(e,t){for(let i=e,n=t;;){if(3==i.nodeType&&n>0)return{node:i,offset:n};if(1==i.nodeType&&n>0){if("false"==i.contentEditable)return null;i=i.childNodes[n-1],n=p(i)}else{if(!i.parentNode||u(i))return null;n=d(i),i=i.parentNode}}}function P(e,t){for(let i=e,n=t;;){if(3==i.nodeType&&n<i.nodeValue.length)return{node:i,offset:n};if(1==i.nodeType&&n<i.childNodes.length){if("false"==i.contentEditable)return null;i=i.childNodes[n],n=0}else{if(!i.parentNode||u(i))return null;n=d(i)+1,i=i.parentNode}}}class C{constructor(e,t,i=!0){this.node=e,this.offset=t,this.precise=i}static before(e,t){return new C(e.parentNode,d(e),t)}static after(e,t){return new C(e.parentNode,d(e)+1,t)}}const $=[];class Z{constructor(){this.parent=null,this.dom=null,this.flags=2}get overrideDOMText(){return null}get posAtStart(){return this.parent?this.parent.posBefore(this):0}get posAtEnd(){return this.posAtStart+this.length}posBefore(e){let t=this.posAtStart;for(let i of this.children){if(i==e)return t;t+=i.length+i.breakAfter}throw new RangeError("Invalid child in posBefore")}posAfter(e){return this.posBefore(e)+e.length}sync(e,t){if(2&this.flags){let i,n=this.dom,r=null;for(let o of this.children){if(7&o.flags){if(!o.dom&&(i=r?r.nextSibling:n.firstChild)){let e=Z.get(i);(!e||!e.parent&&e.canReuseDOM(o))&&o.reuseDOM(i)}o.sync(e,t),o.flags&=-8}if(i=r?r.nextSibling:n.firstChild,t&&!t.written&&t.node==n&&i!=o.dom&&(t.written=!0),o.dom.parentNode==n)for(;i&&i!=o.dom;)i=T(i);else n.insertBefore(o.dom,i);r=o.dom}for(i=r?r.nextSibling:n.firstChild,i&&t&&t.node==n&&(t.written=!0);i;)i=T(i)}else if(1&this.flags)for(let i of this.children)7&i.flags&&(i.sync(e,t),i.flags&=-8)}reuseDOM(e){}localPosFromDOM(e,t){let i;if(e==this.dom)i=this.dom.childNodes[t];else{let n=0==p(e)?0:0==t?-1:1;for(;;){let t=e.parentNode;if(t==this.dom)break;0==n&&t.firstChild!=t.lastChild&&(n=e==t.firstChild?-1:1),e=t}i=n<0?e:e.nextSibling}if(i==this.dom.firstChild)return 0;for(;i&&!Z.get(i);)i=i.nextSibling;if(!i)return this.length;for(let e=0,t=0;;e++){let n=this.children[e];if(n.dom==i)return t;t+=n.length+n.breakAfter}}domBoundsAround(e,t,i=0){let n=-1,r=-1,o=-1,s=-1;for(let a=0,l=i,h=i;a<this.children.length;a++){let i=this.children[a],c=l+i.length;if(l<e&&c>t)return i.domBoundsAround(e,t,l);if(c>=e&&-1==n&&(n=a,r=l),l>t&&i.dom.parentNode==this.dom){o=a,s=h;break}h=c,l=c+i.breakAfter}return{from:r,to:s<0?i+this.length:s,startDOM:(n?this.children[n-1].dom.nextSibling:null)||this.dom.firstChild,endDOM:o<this.children.length&&o>=0?this.children[o].dom:null}}markDirty(e=!1){this.flags|=2,this.markParentsDirty(e)}markParentsDirty(e){for(let t=this.parent;t;t=t.parent){if(e&&(t.flags|=2),1&t.flags)return;t.flags|=1,e=!1}}setParent(e){this.parent!=e&&(this.parent=e,7&this.flags&&this.markParentsDirty(!0))}setDOM(e){this.dom!=e&&(this.dom&&(this.dom.cmView=null),this.dom=e,e.cmView=this)}get rootView(){for(let e=this;;){let t=e.parent;if(!t)return e;e=t}}replaceChildren(e,t,i=$){this.markDirty();for(let n=e;n<t;n++){let e=this.children[n];e.parent==this&&i.indexOf(e)<0&&e.destroy()}i.length<250?this.children.splice(e,t-e,...i):this.children=[].concat(this.children.slice(0,e),i,this.children.slice(t));for(let e=0;e<i.length;e++)i[e].setParent(this)}ignoreMutation(e){return!1}ignoreEvent(e){return!1}childCursor(e=this.length){return new M(this.children,e,this.children.length)}childPos(e,t=1){return this.childCursor().findPos(e,t)}toString(){let e=this.constructor.name.replace("View","");return e+(this.children.length?"("+this.children.join()+")":this.length?"["+("Text"==e?this.text:this.length)+"]":"")+(this.breakAfter?"#":"")}static get(e){return e.cmView}get isEditable(){return!0}get isWidget(){return!1}get isHidden(){return!1}merge(e,t,i,n,r,o){return!1}become(e){return!1}canReuseDOM(e){return e.constructor==this.constructor&&!(8&(this.flags|e.flags))}getSide(){return 0}destroy(){for(let e of this.children)e.parent==this&&e.destroy();this.parent=null}}function T(e){let t=e.nextSibling;return e.parentNode.removeChild(e),t}Z.prototype.breakAfter=0;class M{constructor(e,t,i){this.children=e,this.pos=t,this.i=i,this.off=0}findPos(e,t=1){for(;;){if(e>this.pos||e==this.pos&&(t>0||0==this.i||this.children[this.i-1].breakAfter))return this.off=e-this.pos,this;let i=this.children[--this.i];this.pos-=i.length+i.breakAfter}}}function E(e,t,i,n,r,o,s,a,l){let{children:h}=e,c=h.length?h[t]:null,d=o.length?o[o.length-1]:null,u=d?d.breakAfter:s;if(!(t==n&&c&&!s&&!u&&o.length<2&&c.merge(i,r,o.length?d:null,0==i,a,l))){if(n<h.length){let e=h[n];e&&(r<e.length||e.breakAfter&&(null==d?void 0:d.breakAfter))?(t==n&&(e=e.split(r),r=0),!u&&d&&e.merge(0,r,d,!0,0,l)?o[o.length-1]=e:((r||e.children.length&&!e.children[0].length)&&e.merge(0,r,null,!1,0,l),o.push(e))):(null==e?void 0:e.breakAfter)&&(d?d.breakAfter=1:s=1),n++}for(c&&(c.breakAfter=s,i>0&&(!s&&o.length&&c.merge(i,c.length,o[0],!1,a,0)?c.breakAfter=o.shift().breakAfter:(i<c.length||c.children.length&&0==c.children[c.children.length-1].length)&&c.merge(i,c.length,null,!1,a,0),t++));t<n&&o.length;)if(h[n-1].become(o[o.length-1]))n--,o.pop(),l=o.length?0:a;else{if(!h[t].become(o[0]))break;t++,o.shift(),a=o.length?0:l}!o.length&&t&&n<h.length&&!h[t-1].breakAfter&&h[n].merge(0,0,h[t-1],!1,a,l)&&t--,(t<n||o.length)&&e.replaceChildren(t,n,o)}}function X(e,t,i,n,r,o){let s=e.childCursor(),{i:a,off:l}=s.findPos(i,1),{i:h,off:c}=s.findPos(t,-1),d=t-i;for(let e of n)d+=e.length;e.length+=d,E(e,h,c,a,l,n,0,r,o)}let R="undefined"!=typeof navigator?navigator:{userAgent:"",vendor:"",platform:""},_="undefined"!=typeof document?document:{documentElement:{style:{}}};const V=/Edge\/(\d+)/.exec(R.userAgent),q=/MSIE \d/.test(R.userAgent),B=/Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(R.userAgent),D=!!(q||B||V),z=!D&&/gecko\/(\d+)/i.test(R.userAgent),L=!D&&/Chrome\/(\d+)/.exec(R.userAgent),j="webkitFontSmoothing"in _.documentElement.style,W=!D&&/Apple Computer/.test(R.vendor),Y=W&&(/Mobile\/\w+/.test(R.userAgent)||R.maxTouchPoints>2);var I={mac:Y||/Mac/.test(R.platform),windows:/Win/.test(R.platform),linux:/Linux|X11/.test(R.platform),ie:D,ie_version:q?_.documentMode||6:B?+B[1]:V?+V[1]:0,gecko:z,gecko_version:z?+(/Firefox\/(\d+)/.exec(R.userAgent)||[0,0])[1]:0,chrome:!!L,chrome_version:L?+L[1]:0,ios:Y,android:/Android\b/.test(R.userAgent),webkit:j,safari:W,webkit_version:j?+(/\bAppleWebKit\/(\d+)/.exec(R.userAgent)||[0,0])[1]:0,tabSize:null!=_.documentElement.style.tabSize?"tab-size":"-moz-tab-size"};class G extends Z{constructor(e){super(),this.text=e}get length(){return this.text.length}createDOM(e){this.setDOM(e||document.createTextNode(this.text))}sync(e,t){this.dom||this.createDOM(),this.dom.nodeValue!=this.text&&(t&&t.node==this.dom&&(t.written=!0),this.dom.nodeValue=this.text)}reuseDOM(e){3==e.nodeType&&this.createDOM(e)}merge(e,t,i){return!(8&this.flags||i&&(!(i instanceof G)||this.length-(t-e)+i.length>256||8&i.flags)||(this.text=this.text.slice(0,e)+(i?i.text:"")+this.text.slice(t),this.markDirty(),0))}split(e){let t=new G(this.text.slice(e));return this.text=this.text.slice(0,e),this.markDirty(),t.flags|=8&this.flags,t}localPosFromDOM(e,t){return e==this.dom?t:t?this.text.length:0}domAtPos(e){return new C(this.dom,e)}domBoundsAround(e,t,i){return{from:i,to:i+this.length,startDOM:this.dom,endDOM:this.dom.nextSibling}}coordsAt(e,t){return function(e,t,i){let n=e.nodeValue.length;t>n&&(t=n);let r=t,o=t,s=0;0==t&&i<0||t==n&&i>=0?I.chrome||I.gecko||(t?(r--,s=1):o<n&&(o++,s=-1)):i<0?r--:o<n&&o++;let a=x(e,r,o).getClientRects();if(!a.length)return null;let l=a[(s?s<0:i>=0)?0:a.length-1];return I.safari&&!s&&0==l.width&&(l=Array.prototype.find.call(a,(e=>e.width))||l),s?O(l,s<0):l||null}(this.dom,e,t)}}class U extends Z{constructor(e,t=[],i=0){super(),this.mark=e,this.children=t,this.length=i;for(let e of t)e.setParent(this)}setAttrs(e){if(k(e),this.mark.class&&(e.className=this.mark.class),this.mark.attrs)for(let t in this.mark.attrs)e.setAttribute(t,this.mark.attrs[t]);return e}canReuseDOM(e){return super.canReuseDOM(e)&&!(8&(this.flags|e.flags))}reuseDOM(e){e.nodeName==this.mark.tagName.toUpperCase()&&(this.setDOM(e),this.flags|=6)}sync(e,t){this.dom?4&this.flags&&this.setAttrs(this.dom):this.setDOM(this.setAttrs(document.createElement(this.mark.tagName))),super.sync(e,t)}merge(e,t,i,n,r,o){return!(i&&(!(i instanceof U&&i.mark.eq(this.mark))||e&&r<=0||t<this.length&&o<=0)||(X(this,e,t,i?i.children.slice():[],r-1,o-1),this.markDirty(),0))}split(e){let t=[],i=0,n=-1,r=0;for(let o of this.children){let s=i+o.length;s>e&&t.push(i<e?o.split(e-i):o),n<0&&i>=e&&(n=r),i=s,r++}let o=this.length-e;return this.length=e,n>-1&&(this.children.length=n,this.markDirty()),new U(this.mark,t,o)}domAtPos(e){return H(this,e)}coordsAt(e,t){return J(this,e,t)}}class N extends Z{static create(e,t,i){return new N(e,t,i)}constructor(e,t,i){super(),this.widget=e,this.length=t,this.side=i,this.prevWidget=null}split(e){let t=N.create(this.widget,this.length-e,this.side);return this.length-=e,t}sync(e){this.dom&&this.widget.updateDOM(this.dom,e)||(this.dom&&this.prevWidget&&this.prevWidget.destroy(this.dom),this.prevWidget=null,this.setDOM(this.widget.toDOM(e)),this.widget.editable||(this.dom.contentEditable="false"))}getSide(){return this.side}merge(e,t,i,n,r,o){return!(i&&(!(i instanceof N&&this.widget.compare(i.widget))||e>0&&r<=0||t<this.length&&o<=0)||(this.length=e+(i?i.length:0)+(this.length-t),0))}become(e){return e instanceof N&&e.side==this.side&&this.widget.constructor==e.widget.constructor&&(this.widget.compare(e.widget)||this.markDirty(!0),this.dom&&!this.prevWidget&&(this.prevWidget=this.widget),this.widget=e.widget,this.length=e.length,!0)}ignoreMutation(){return!0}ignoreEvent(e){return this.widget.ignoreEvent(e)}get overrideDOMText(){if(0==this.length)return n.Text.empty;let e=this;for(;e.parent;)e=e.parent;let{view:t}=e,i=t&&t.state.doc,r=this.posAtStart;return i?i.slice(r,r+this.length):n.Text.empty}domAtPos(e){return(this.length?0==e:this.side>0)?C.before(this.dom):C.after(this.dom,e==this.length)}domBoundsAround(){return null}coordsAt(e,t){let i=this.widget.coordsAt(this.dom,e,t);if(i)return i;let n=this.dom.getClientRects(),r=null;if(!n.length)return null;let o=this.side?this.side<0:e>0;for(let t=o?n.length-1:0;r=n[t],!(e>0?0==t:t==n.length-1||r.top<r.bottom);t+=o?-1:1);return O(r,!o)}get isEditable(){return!1}get isWidget(){return!0}get isHidden(){return this.widget.isHidden}destroy(){super.destroy(),this.dom&&this.widget.destroy(this.dom)}}class F extends Z{constructor(e){super(),this.side=e}get length(){return 0}merge(){return!1}become(e){return e instanceof F&&e.side==this.side}split(){return new F(this.side)}sync(){if(!this.dom){let e=document.createElement("img");e.className="cm-widgetBuffer",e.setAttribute("aria-hidden","true"),this.setDOM(e)}}getSide(){return this.side}domAtPos(e){return this.side>0?C.before(this.dom):C.after(this.dom)}localPosFromDOM(){return 0}domBoundsAround(){return null}coordsAt(e){return this.dom.getBoundingClientRect()}get overrideDOMText(){return n.Text.empty}get isHidden(){return!0}}function H(e,t){let i=e.dom,{children:n}=e,r=0;for(let e=0;r<n.length;r++){let o=n[r],s=e+o.length;if(!(s==e&&o.getSide()<=0)){if(t>e&&t<s&&o.dom.parentNode==i)return o.domAtPos(t-e);if(t<=e)break;e=s}}for(let e=r;e>0;e--){let t=n[e-1];if(t.dom.parentNode==i)return t.domAtPos(t.length)}for(let e=r;e<n.length;e++){let t=n[e];if(t.dom.parentNode==i)return t.domAtPos(0)}return new C(i,0)}function K(e,t,i){let n,{children:r}=e;i>0&&t instanceof U&&r.length&&(n=r[r.length-1])instanceof U&&n.mark.eq(t.mark)?K(n,t.children[0],i-1):(r.push(t),t.setParent(e)),e.length+=t.length}function J(e,t,i){let n=null,r=-1,o=null,s=-1;!function e(t,a){for(let l=0,h=0;l<t.children.length&&h<=a;l++){let c=t.children[l],d=h+c.length;d>=a&&(c.children.length?e(c,a-h):(!o||o.isHidden&&i>0)&&(d>a||h==d&&c.getSide()>0)?(o=c,s=a-h):(h<a||h==d&&c.getSide()<0&&!c.isHidden)&&(n=c,r=a-h)),h=d}}(e,t);let a=(i<0?n:o)||n||o;return a?a.coordsAt(Math.max(0,a==n?r:s),i):function(e){let t=e.dom.lastChild;if(!t)return e.dom.getBoundingClientRect();let i=h(t);return i[i.length-1]||null}(e)}function ee(e,t){for(let i in e)"class"==i&&t.class?t.class+=" "+e.class:"style"==i&&t.style?t.style+=";"+e.style:t[i]=e[i];return t}G.prototype.children=N.prototype.children=F.prototype.children=$;const te=Object.create(null);function ie(e,t,i){if(e==t)return!0;e||(e=te),t||(t=te);let n=Object.keys(e),r=Object.keys(t);if(n.length-(i&&n.indexOf(i)>-1?1:0)!=r.length-(i&&r.indexOf(i)>-1?1:0))return!1;for(let o of n)if(o!=i&&(-1==r.indexOf(o)||e[o]!==t[o]))return!1;return!0}function ne(e,t,i){let n=!1;if(t)for(let r in t)i&&r in i||(n=!0,"style"==r?e.style.cssText="":e.removeAttribute(r));if(i)for(let r in i)t&&t[r]==i[r]||(n=!0,"style"==r?e.style.cssText=i[r]:e.setAttribute(r,i[r]));return n}function re(e){let t=Object.create(null);for(let i=0;i<e.attributes.length;i++){let n=e.attributes[i];t[n.name]=n.value}return t}class oe{eq(e){return!1}updateDOM(e,t){return!1}compare(e){return this==e||this.constructor==e.constructor&&this.eq(e)}get estimatedHeight(){return-1}get lineBreaks(){return 0}ignoreEvent(e){return!0}coordsAt(e,t,i){return null}get isHidden(){return!1}get editable(){return!1}destroy(e){}}var se,ae;t.BlockType=void 0,(se=t.BlockType||(t.BlockType={}))[se.Text=0]="Text",se[se.WidgetBefore=1]="WidgetBefore",se[se.WidgetAfter=2]="WidgetAfter",se[se.WidgetRange=3]="WidgetRange";class le extends n.RangeValue{constructor(e,t,i,n){super(),this.startSide=e,this.endSide=t,this.widget=i,this.spec=n}get heightRelevant(){return!1}static mark(e){return new he(e)}static widget(e){let t=Math.max(-1e4,Math.min(1e4,e.side||0)),i=!!e.block;return t+=i&&!e.inlineOrder?t>0?3e8:-4e8:t>0?1e8:-1e8,new de(e,t,t,i,e.widget||null,!1)}static replace(e){let t,i,n=!!e.block;if(e.isBlockGap)t=-5e8,i=4e8;else{let{start:r,end:o}=ue(e,n);t=(r?n?-3e8:-1:5e8)-1,i=1+(o?n?2e8:1:-6e8)}return new de(e,t,i,n,e.widget||null,!0)}static line(e){return new ce(e)}static set(e,t=!1){return n.RangeSet.of(e,t)}hasHeight(){return!!this.widget&&this.widget.estimatedHeight>-1}}le.none=n.RangeSet.empty;class he extends le{constructor(e){let{start:t,end:i}=ue(e);super(t?-1:5e8,i?1:-6e8,null,e),this.tagName=e.tagName||"span",this.class=e.class||"",this.attrs=e.attributes||null}eq(e){var t,i;return this==e||e instanceof he&&this.tagName==e.tagName&&(this.class||(null===(t=this.attrs)||void 0===t?void 0:t.class))==(e.class||(null===(i=e.attrs)||void 0===i?void 0:i.class))&&ie(this.attrs,e.attrs,"class")}range(e,t=e){if(e>=t)throw new RangeError("Mark decorations may not be empty");return super.range(e,t)}}he.prototype.point=!1;class ce extends le{constructor(e){super(-2e8,-2e8,null,e)}eq(e){return e instanceof ce&&this.spec.class==e.spec.class&&ie(this.spec.attributes,e.spec.attributes)}range(e,t=e){if(t!=e)throw new RangeError("Line decoration ranges must be zero-length");return super.range(e,t)}}ce.prototype.mapMode=n.MapMode.TrackBefore,ce.prototype.point=!0;class de extends le{constructor(e,t,i,r,o,s){super(t,i,o,e),this.block=r,this.isReplace=s,this.mapMode=r?t<=0?n.MapMode.TrackBefore:n.MapMode.TrackAfter:n.MapMode.TrackDel}get type(){return this.startSide!=this.endSide?t.BlockType.WidgetRange:this.startSide<=0?t.BlockType.WidgetBefore:t.BlockType.WidgetAfter}get heightRelevant(){return this.block||!!this.widget&&(this.widget.estimatedHeight>=5||this.widget.lineBreaks>0)}eq(e){return e instanceof de&&((t=this.widget)==(i=e.widget)||!!(t&&i&&t.compare(i)))&&this.block==e.block&&this.startSide==e.startSide&&this.endSide==e.endSide;var t,i}range(e,t=e){if(this.isReplace&&(e>t||e==t&&this.startSide>0&&this.endSide<=0))throw new RangeError("Invalid range for replacement decoration");if(!this.isReplace&&t!=e)throw new RangeError("Widget decorations can only have zero-length ranges");return super.range(e,t)}}function ue(e,t=!1){let{inclusiveStart:i,inclusiveEnd:n}=e;return null==i&&(i=e.inclusive),null==n&&(n=e.inclusive),{start:null!=i?i:t,end:null!=n?n:t}}function fe(e,t,i,n=0){let r=i.length-1;r>=0&&i[r]+n>=e?i[r]=Math.max(i[r],t):i.push(e,t)}de.prototype.point=!0;class pe extends Z{constructor(){super(...arguments),this.children=[],this.length=0,this.prevAttrs=void 0,this.attrs=null,this.breakAfter=0}merge(e,t,i,n,r,o){if(i){if(!(i instanceof pe))return!1;this.dom||i.transferDOM(this)}return n&&this.setDeco(i?i.attrs:null),X(this,e,t,i?i.children.slice():[],r,o),!0}split(e){let t=new pe;if(t.breakAfter=this.breakAfter,0==this.length)return t;let{i,off:n}=this.childPos(e);n&&(t.append(this.children[i].split(n),0),this.children[i].merge(n,this.children[i].length,null,!1,0,0),i++);for(let e=i;e<this.children.length;e++)t.append(this.children[e],0);for(;i>0&&0==this.children[i-1].length;)this.children[--i].destroy();return this.children.length=i,this.markDirty(),this.length=e,t}transferDOM(e){this.dom&&(this.markDirty(),e.setDOM(this.dom),e.prevAttrs=void 0===this.prevAttrs?this.attrs:this.prevAttrs,this.prevAttrs=void 0,this.dom=null)}setDeco(e){ie(this.attrs,e)||(this.dom&&(this.prevAttrs=this.attrs,this.markDirty()),this.attrs=e)}append(e,t){K(this,e,t)}addLineDeco(e){let t=e.spec.attributes,i=e.spec.class;t&&(this.attrs=ee(t,this.attrs||{})),i&&(this.attrs=ee({class:i},this.attrs||{}))}domAtPos(e){return H(this,e)}reuseDOM(e){"DIV"==e.nodeName&&(this.setDOM(e),this.flags|=6)}sync(e,t){var i;this.dom?4&this.flags&&(k(this.dom),this.dom.className="cm-line",this.prevAttrs=this.attrs?null:void 0):(this.setDOM(document.createElement("div")),this.dom.className="cm-line",this.prevAttrs=this.attrs?null:void 0),void 0!==this.prevAttrs&&(ne(this.dom,this.prevAttrs,this.attrs),this.dom.classList.add("cm-line"),this.prevAttrs=void 0),super.sync(e,t);let n=this.dom.lastChild;for(;n&&Z.get(n)instanceof U;)n=n.lastChild;if(!(n&&this.length&&("BR"==n.nodeName||0!=(null===(i=Z.get(n))||void 0===i?void 0:i.isEditable)||I.ios&&this.children.some((e=>e instanceof G))))){let e=document.createElement("BR");e.cmIgnore=!0,this.dom.appendChild(e)}}measureTextSize(){if(0==this.children.length||this.length>20)return null;let e,t=0;for(let i of this.children){if(!(i instanceof G)||/[^ -~]/.test(i.text))return null;let n=h(i.dom);if(1!=n.length)return null;t+=n[0].width,e=n[0].height}return t?{lineHeight:this.dom.getBoundingClientRect().height,charWidth:t/this.length,textHeight:e}:null}coordsAt(e,t){let i=J(this,e,t);if(!this.children.length&&i&&this.parent){let{heightOracle:e}=this.parent.view.viewState,t=i.bottom-i.top;if(Math.abs(t-e.lineHeight)<2&&e.textHeight<t){let n=(t-e.textHeight)/2;return{top:i.top+n,bottom:i.bottom-n,left:i.left,right:i.left}}}return i}become(e){return e instanceof pe&&0==this.children.length&&0==e.children.length&&ie(this.attrs,e.attrs)&&this.breakAfter==e.breakAfter}covers(){return!0}static find(e,t){for(let i=0,n=0;i<e.children.length;i++){let r=e.children[i],o=n+r.length;if(o>=t){if(r instanceof pe)return r;if(o>t)break}n=o+r.breakAfter}return null}}class Oe extends Z{constructor(e,t,i){super(),this.widget=e,this.length=t,this.deco=i,this.breakAfter=0,this.prevWidget=null}merge(e,t,i,n,r,o){return!(i&&(!(i instanceof Oe&&this.widget.compare(i.widget))||e>0&&r<=0||t<this.length&&o<=0)||(this.length=e+(i?i.length:0)+(this.length-t),0))}domAtPos(e){return 0==e?C.before(this.dom):C.after(this.dom,e==this.length)}split(e){let t=this.length-e;this.length=e;let i=new Oe(this.widget,t,this.deco);return i.breakAfter=this.breakAfter,i}get children(){return $}sync(e){this.dom&&this.widget.updateDOM(this.dom,e)||(this.dom&&this.prevWidget&&this.prevWidget.destroy(this.dom),this.prevWidget=null,this.setDOM(this.widget.toDOM(e)),this.widget.editable||(this.dom.contentEditable="false"))}get overrideDOMText(){return this.parent?this.parent.view.state.doc.slice(this.posAtStart,this.posAtEnd):n.Text.empty}domBoundsAround(){return null}become(e){return e instanceof Oe&&e.widget.constructor==this.widget.constructor&&(e.widget.compare(this.widget)||this.markDirty(!0),this.dom&&!this.prevWidget&&(this.prevWidget=this.widget),this.widget=e.widget,this.length=e.length,this.deco=e.deco,this.breakAfter=e.breakAfter,!0)}ignoreMutation(){return!0}ignoreEvent(e){return this.widget.ignoreEvent(e)}get isEditable(){return!1}get isWidget(){return!0}coordsAt(e,t){return this.widget.coordsAt(this.dom,e,t)||(this.widget instanceof me?null:O(this.dom.getBoundingClientRect(),this.length?0==e:t<=0))}destroy(){super.destroy(),this.dom&&this.widget.destroy(this.dom)}covers(e){let{startSide:t,endSide:i}=this.deco;return t!=i&&(e<0?t<0:i>0)}}class me extends oe{constructor(e){super(),this.height=e}toDOM(){let e=document.createElement("div");return e.className="cm-gap",this.updateDOM(e),e}eq(e){return e.height==this.height}updateDOM(e){return e.style.height=this.height+"px",!0}get editable(){return!0}get estimatedHeight(){return this.height}ignoreEvent(){return!1}}class ge{constructor(e,t,i,n){this.doc=e,this.pos=t,this.end=i,this.disallowBlockEffectsFor=n,this.content=[],this.curLine=null,this.breakAtStart=0,this.pendingBuffer=0,this.bufferMarks=[],this.atCursorPos=!0,this.openStart=-1,this.openEnd=-1,this.text="",this.textOff=0,this.cursor=e.iter(),this.skip=t}posCovered(){if(0==this.content.length)return!this.breakAtStart&&this.doc.lineAt(this.pos).from!=this.pos;let e=this.content[this.content.length-1];return!(e.breakAfter||e instanceof Oe&&e.deco.endSide<0)}getLine(){return this.curLine||(this.content.push(this.curLine=new pe),this.atCursorPos=!0),this.curLine}flushBuffer(e=this.bufferMarks){this.pendingBuffer&&(this.curLine.append(be(new F(-1),e),e.length),this.pendingBuffer=0)}addBlockWidget(e){this.flushBuffer(),this.curLine=null,this.content.push(e)}finish(e){this.pendingBuffer&&e<=this.bufferMarks.length?this.flushBuffer():this.pendingBuffer=0,this.posCovered()||e&&this.content.length&&this.content[this.content.length-1]instanceof Oe||this.getLine()}buildText(e,t,i){for(;e>0;){if(this.textOff==this.text.length){let{value:t,lineBreak:i,done:n}=this.cursor.next(this.skip);if(this.skip=0,n)throw new Error("Ran out of text content when drawing inline views");if(i){this.posCovered()||this.getLine(),this.content.length?this.content[this.content.length-1].breakAfter=1:this.breakAtStart=1,this.flushBuffer(),this.curLine=null,this.atCursorPos=!0,e--;continue}this.text=t,this.textOff=0}let n=Math.min(this.text.length-this.textOff,e,512);this.flushBuffer(t.slice(t.length-i)),this.getLine().append(be(new G(this.text.slice(this.textOff,this.textOff+n)),t),i),this.atCursorPos=!0,this.textOff+=n,e-=n,i=0}}span(e,t,i,n){this.buildText(t-e,i,n),this.pos=t,this.openStart<0&&(this.openStart=n)}point(e,t,i,n,r,o){if(this.disallowBlockEffectsFor[o]&&i instanceof de){if(i.block)throw new RangeError("Block decorations may not be specified via plugins");if(t>this.doc.lineAt(this.pos).to)throw new RangeError("Decorations that replace line breaks may not be specified via plugins")}let s=t-e;if(i instanceof de)if(i.block)i.startSide>0&&!this.posCovered()&&this.getLine(),this.addBlockWidget(new Oe(i.widget||we.block,s,i));else{let o=N.create(i.widget||we.inline,s,s?0:i.startSide),a=this.atCursorPos&&!o.isEditable&&r<=n.length&&(e<t||i.startSide>0),l=!o.isEditable&&(e<t||r>n.length||i.startSide<=0),h=this.getLine();2!=this.pendingBuffer||a||o.isEditable||(this.pendingBuffer=0),this.flushBuffer(n),a&&(h.append(be(new F(1),n),r),r=n.length+Math.max(0,r-n.length)),h.append(be(o,n),r),this.atCursorPos=l,this.pendingBuffer=l?e<t||r>n.length?1:2:0,this.pendingBuffer&&(this.bufferMarks=n.slice())}else this.doc.lineAt(this.pos).from==this.pos&&this.getLine().addLineDeco(i);s&&(this.textOff+s<=this.text.length?this.textOff+=s:(this.skip+=s-(this.text.length-this.textOff),this.text="",this.textOff=0),this.pos=t),this.openStart<0&&(this.openStart=r)}static build(e,t,i,r,o){let s=new ge(e,t,i,o);return s.openEnd=n.RangeSet.spans(r,t,i,s),s.openStart<0&&(s.openStart=s.openEnd),s.finish(s.openEnd),s}}function be(e,t){for(let i of t)e=new U(i,[e],e.length);return e}class we extends oe{constructor(e){super(),this.tag=e}eq(e){return e.tag==this.tag}toDOM(){return document.createElement(this.tag)}updateDOM(e){return e.nodeName.toLowerCase()==this.tag}get isHidden(){return!0}}we.inline=new we("span"),we.block=new we("div"),t.Direction=void 0,(ae=t.Direction||(t.Direction={}))[ae.LTR=0]="LTR",ae[ae.RTL=1]="RTL";const ye=t.Direction.LTR,ve=t.Direction.RTL;function xe(e){let t=[];for(let i=0;i<e.length;i++)t.push(1<<+e[i]);return t}const Se=xe("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"),ke=xe("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333"),Ae=Object.create(null),Qe=[];for(let e of["()","[]","{}"]){let t=e.charCodeAt(0),i=e.charCodeAt(1);Ae[t]=i,Ae[i]=-t}function Pe(e){return e<=247?Se[e]:1424<=e&&e<=1524?2:1536<=e&&e<=1785?ke[e-1536]:1774<=e&&e<=2220?4:8192<=e&&e<=8204?256:64336<=e&&e<=65023?4:1}const Ce=/[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;class $e{get dir(){return this.level%2?ve:ye}constructor(e,t,i){this.from=e,this.to=t,this.level=i}side(e,t){return this.dir==t==e?this.to:this.from}forward(e,t){return e==(this.dir==t)}static find(e,t,i,n){let r=-1;for(let o=0;o<e.length;o++){let s=e[o];if(s.from<=t&&s.to>=t){if(s.level==i)return o;(r<0||(0!=n?n<0?s.from<t:s.to>t:e[r].level>s.level))&&(r=o)}}if(r<0)throw new RangeError("Index out of range");return r}}function Ze(e,t){if(e.length!=t.length)return!1;for(let i=0;i<e.length;i++){let n=e[i],r=t[i];if(n.from!=r.from||n.to!=r.to||n.direction!=r.direction||!Ze(n.inner,r.inner))return!1}return!0}const Te=[];function Me(e,t,i,n,r,o,s){let a=n%2?2:1;if(n%2==r%2)for(let l=t,h=0;l<i;){let t=!0,c=!1;if(h==o.length||l<o[h].from){let e=Te[l];e!=a&&(t=!1,c=16==e)}let d=t||1!=a?null:[],u=t?n:n+1,f=l;e:for(;;)if(h<o.length&&f==o[h].from){if(c)break e;let p=o[h];if(!t)for(let e=p.to,t=h+1;;){if(e==i)break e;if(!(t<o.length&&o[t].from==e)){if(Te[e]==a)break e;break}e=o[t++].to}h++,d?d.push(p):(p.from>l&&s.push(new $e(l,p.from,u)),Ee(e,p.direction==ye!=!(u%2)?n+1:n,r,p.inner,p.from,p.to,s),l=p.to),f=p.to}else{if(f==i||(t?Te[f]!=a:Te[f]==a))break;f++}d?Me(e,l,f,n+1,r,d,s):l<f&&s.push(new $e(l,f,u)),l=f}else for(let l=i,h=o.length;l>t;){let i=!0,c=!1;if(!h||l>o[h-1].to){let e=Te[l-1];e!=a&&(i=!1,c=16==e)}let d=i||1!=a?null:[],u=i?n:n+1,f=l;e:for(;;)if(h&&f==o[h-1].to){if(c)break e;let p=o[--h];if(!i)for(let e=p.from,i=h;;){if(e==t)break e;if(!i||o[i-1].to!=e){if(Te[e-1]==a)break e;break}e=o[--i].from}d?d.push(p):(p.to<l&&s.push(new $e(p.to,l,u)),Ee(e,p.direction==ye!=!(u%2)?n+1:n,r,p.inner,p.from,p.to,s),l=p.from),f=p.from}else{if(f==t||(i?Te[f-1]!=a:Te[f-1]==a))break;f--}d?Me(e,f,l,n+1,r,d,s):f<l&&s.push(new $e(f,l,u)),l=f}}function Ee(e,t,i,n,r,o,s){let a=t%2?2:1;!function(e,t,i,n,r){for(let o=0;o<=n.length;o++){let s=o?n[o-1].to:t,a=o<n.length?n[o].from:i,l=o?256:r;for(let t=s,i=l,n=l;t<a;t++){let r=Pe(e.charCodeAt(t));512==r?r=i:8==r&&4==n&&(r=16),Te[t]=4==r?2:r,7&r&&(n=r),i=r}for(let e=s,t=l,n=l;e<a;e++){let r=Te[e];if(128==r)e<a-1&&t==Te[e+1]&&24&t?r=Te[e]=t:Te[e]=256;else if(64==r){let r=e+1;for(;r<a&&64==Te[r];)r++;let o=e&&8==t||r<i&&8==Te[r]?1==n?1:8:256;for(let t=e;t<r;t++)Te[t]=o;e=r-1}else 8==r&&1==n&&(Te[e]=1);t=r,7&r&&(n=r)}}}(e,r,o,n,a),function(e,t,i,n,r){let o=1==r?2:1;for(let s=0,a=0,l=0;s<=n.length;s++){let h=s?n[s-1].to:t,c=s<n.length?n[s].from:i;for(let t,i,n,s=h;s<c;s++)if(i=Ae[t=e.charCodeAt(s)])if(i<0){for(let e=a-3;e>=0;e-=3)if(Qe[e+1]==-i){let t=Qe[e+2],i=2&t?r:4&t?1&t?o:r:0;i&&(Te[s]=Te[Qe[e]]=i),a=e;break}}else{if(189==Qe.length)break;Qe[a++]=s,Qe[a++]=t,Qe[a++]=l}else if(2==(n=Te[s])||1==n){let e=n==r;l=e?0:1;for(let t=a-3;t>=0;t-=3){let i=Qe[t+2];if(2&i)break;if(e)Qe[t+2]|=2;else{if(4&i)break;Qe[t+2]|=4}}}}}(e,r,o,n,a),function(e,t,i,n){for(let r=0,o=n;r<=i.length;r++){let s=r?i[r-1].to:e,a=r<i.length?i[r].from:t;for(let l=s;l<a;){let s=Te[l];if(256==s){let s=l+1;for(;;)if(s==a){if(r==i.length)break;s=i[r++].to,a=r<i.length?i[r].from:t}else{if(256!=Te[s])break;s++}let h=1==o,c=h==(1==(s<t?Te[s]:n))?h?1:2:n;for(let t=s,n=r,o=n?i[n-1].to:e;t>l;)t==o&&(t=i[--n].from,o=n?i[n-1].to:e),Te[--t]=c;l=s}else o=s,l++}}}(r,o,n,a),Me(e,r,o,t,i,n,s)}function Xe(e,t,i){if(!e)return[new $e(0,0,t==ve?1:0)];if(t==ye&&!i.length&&!Ce.test(e))return Re(e.length);if(i.length)for(;e.length>Te.length;)Te[Te.length]=256;let n=[],r=t==ye?0:1;return Ee(e,r,r,i,0,e.length,n),n}function Re(e){return[new $e(0,e,0)]}let _e="";function Ve(e,t,i,r,o){var s;let a=r.head-e.from,l=$e.find(t,a,null!==(s=r.bidiLevel)&&void 0!==s?s:-1,r.assoc),h=t[l],c=h.side(o,i);if(a==c){let e=l+=o?1:-1;if(e<0||e>=t.length)return null;h=t[l=e],a=h.side(!o,i),c=h.side(o,i)}let d=n.findClusterBreak(e.text,a,h.forward(o,i));(d<h.from||d>h.to)&&(d=c),_e=e.text.slice(Math.min(a,d),Math.max(a,d));let u=l==(o?t.length-1:0)?null:t[l+(o?1:-1)];return u&&d==c&&u.level+(o?0:1)<h.level?n.EditorSelection.cursor(u.side(!o,i)+e.from,u.forward(o,i)?1:-1,u.level):n.EditorSelection.cursor(d+e.from,h.forward(o,i)?-1:1,h.level)}function qe(e,t,i){for(let n=t;n<i;n++){let t=Pe(e.charCodeAt(n));if(1==t)return ye;if(2==t||4==t)return ve}return ye}const Be=n.Facet.define(),De=n.Facet.define(),ze=n.Facet.define(),Le=n.Facet.define(),je=n.Facet.define(),We=n.Facet.define(),Ye=n.Facet.define(),Ie=n.Facet.define(),Ge=n.Facet.define(),Ue=n.Facet.define({combine:e=>e.some((e=>e))}),Ne=n.Facet.define({combine:e=>e.some((e=>e))}),Fe=n.Facet.define();class He{constructor(e,t="nearest",i="nearest",n=5,r=5,o=!1){this.range=e,this.y=t,this.x=i,this.yMargin=n,this.xMargin=r,this.isSnapshot=o}map(e){return e.empty?this:new He(this.range.map(e),this.y,this.x,this.yMargin,this.xMargin,this.isSnapshot)}clip(e){return this.range.to<=e.doc.length?this:new He(n.EditorSelection.cursor(e.doc.length),this.y,this.x,this.yMargin,this.xMargin,this.isSnapshot)}}const Ke=n.StateEffect.define({map:(e,t)=>e.map(t)}),Je=n.StateEffect.define();function et(e,t,i){let n=e.facet(Le);n.length?n[0](t):window.onerror?window.onerror(String(t),i,void 0,void 0,t):i?console.error(i+":",t):console.error(t)}const tt=n.Facet.define({combine:e=>!e.length||e[0]});let it=0;const nt=n.Facet.define();class rt{constructor(e,t,i,n,r){this.id=e,this.create=t,this.domEventHandlers=i,this.domEventObservers=n,this.extension=r(this)}static define(e,t){const{eventHandlers:i,eventObservers:n,provide:r,decorations:o}=t||{};return new rt(it++,e,i,n,(e=>{let t=[nt.of(e)];return o&&t.push(lt.of((t=>{let i=t.plugin(e);return i?o(i):le.none}))),r&&t.push(r(e)),t}))}static fromClass(e,t){return rt.define((t=>new e(t)),t)}}class ot{constructor(e){this.spec=e,this.mustUpdate=null,this.value=null}update(e){if(this.value){if(this.mustUpdate){let e=this.mustUpdate;if(this.mustUpdate=null,this.value.update)try{this.value.update(e)}catch(t){if(et(e.state,t,"CodeMirror plugin crashed"),this.value.destroy)try{this.value.destroy()}catch(e){}this.deactivate()}}}else if(this.spec)try{this.value=this.spec.create(e)}catch(t){et(e.state,t,"CodeMirror plugin crashed"),this.deactivate()}return this}destroy(e){var t;if(null===(t=this.value)||void 0===t?void 0:t.destroy)try{this.value.destroy()}catch(t){et(e.state,t,"CodeMirror plugin crashed")}}deactivate(){this.spec=this.value=null}}const st=n.Facet.define(),at=n.Facet.define(),lt=n.Facet.define(),ht=n.Facet.define(),ct=n.Facet.define(),dt=n.Facet.define();function ut(e,t){let i=e.state.facet(dt);if(!i.length)return i;let r=i.map((t=>t instanceof Function?t(e):t)),o=[];return n.RangeSet.spans(r,t.from,t.to,{point(){},span(e,i,n,r){let s=e-t.from,a=i-t.from,l=o;for(let e=n.length-1;e>=0;e--,r--){let i,o=n[e].spec.bidiIsolate;if(null==o&&(o=qe(t.text,s,a)),r>0&&l.length&&(i=l[l.length-1]).to==s&&i.direction==o)i.to=a,l=i.inner;else{let e={from:s,to:a,direction:o,inner:[]};l.push(e),l=e.inner}}}}),o}const ft=n.Facet.define();function pt(e){let t=0,i=0,n=0,r=0;for(let o of e.state.facet(ft)){let s=o(e);s&&(null!=s.left&&(t=Math.max(t,s.left)),null!=s.right&&(i=Math.max(i,s.right)),null!=s.top&&(n=Math.max(n,s.top)),null!=s.bottom&&(r=Math.max(r,s.bottom)))}return{left:t,right:i,top:n,bottom:r}}const Ot=n.Facet.define();class mt{constructor(e,t,i,n){this.fromA=e,this.toA=t,this.fromB=i,this.toB=n}join(e){return new mt(Math.min(this.fromA,e.fromA),Math.max(this.toA,e.toA),Math.min(this.fromB,e.fromB),Math.max(this.toB,e.toB))}addToSet(e){let t=e.length,i=this;for(;t>0;t--){let n=e[t-1];if(!(n.fromA>i.toA)){if(n.toA<i.fromA)break;i=i.join(n),e.splice(t-1,1)}}return e.splice(t,0,i),e}static extendWithRanges(e,t){if(0==t.length)return e;let i=[];for(let n=0,r=0,o=0,s=0;;n++){let a=n==e.length?null:e[n],l=o-s,h=a?a.fromB:1e9;for(;r<t.length&&t[r]<h;){let e=t[r],n=t[r+1],o=Math.max(s,e),a=Math.min(h,n);if(o<=a&&new mt(o+l,a+l,o,a).addToSet(i),n>h)break;r+=2}if(!a)return i;new mt(a.fromA,a.toA,a.fromB,a.toB).addToSet(i),o=a.toA,s=a.toB}}}class gt{constructor(e,t,i){this.view=e,this.state=t,this.transactions=i,this.flags=0,this.startState=e.state,this.changes=n.ChangeSet.empty(this.startState.doc.length);for(let e of i)this.changes=this.changes.compose(e.changes);let r=[];this.changes.iterChangedRanges(((e,t,i,n)=>r.push(new mt(e,t,i,n)))),this.changedRanges=r}static create(e,t,i){return new gt(e,t,i)}get viewportChanged(){return(4&this.flags)>0}get heightChanged(){return(2&this.flags)>0}get geometryChanged(){return this.docChanged||(10&this.flags)>0}get focusChanged(){return(1&this.flags)>0}get docChanged(){return!this.changes.empty}get selectionSet(){return this.transactions.some((e=>e.selection))}get empty(){return 0==this.flags&&0==this.transactions.length}}class bt extends Z{get length(){return this.view.state.doc.length}constructor(e){super(),this.view=e,this.decorations=[],this.dynamicDecorationMap=[!1],this.domChanged=null,this.hasComposition=null,this.markedForComposition=new Set,this.editContextFormatting=le.none,this.lastCompositionAfterCursor=!1,this.minWidth=0,this.minWidthFrom=0,this.minWidthTo=0,this.impreciseAnchor=null,this.impreciseHead=null,this.forceSelection=!1,this.lastUpdate=Date.now(),this.setDOM(e.contentDOM),this.children=[new pe],this.children[0].setParent(this),this.updateDeco(),this.updateInner([new mt(0,0,0,e.state.doc.length)],0,null)}update(e){var t;let i=e.changedRanges;this.minWidth>0&&i.length&&(i.every((({fromA:e,toA:t})=>t<this.minWidthFrom||e>this.minWidthTo))?(this.minWidthFrom=e.changes.mapPos(this.minWidthFrom,1),this.minWidthTo=e.changes.mapPos(this.minWidthTo,1)):this.minWidth=this.minWidthFrom=this.minWidthTo=0),this.updateEditContextFormatting(e);let r=-1;this.view.inputState.composing>=0&&!this.view.observer.editContext&&((null===(t=this.domChanged)||void 0===t?void 0:t.newSel)?r=this.domChanged.newSel.head:function(e,t){let i=!1;return t&&e.iterChangedRanges(((e,n)=>{e<t.to&&n>t.from&&(i=!0)})),i}(e.changes,this.hasComposition)||e.selectionSet||(r=e.state.selection.main.head));let o=r>-1?function(e,t,i){let n=wt(e,i);if(!n)return null;let{node:r,from:o,to:s}=n,a=r.nodeValue;if(/[\n\r]/.test(a))return null;if(e.state.doc.sliceString(n.from,n.to)!=a)return null;let l=t.invertedDesc,h=new mt(l.mapPos(o),l.mapPos(s),o,s),c=[];for(let t=r.parentNode;;t=t.parentNode){let i=Z.get(t);if(i instanceof U)c.push({node:t,deco:i.mark});else{if(i instanceof pe||"DIV"==t.nodeName&&t.parentNode==e.contentDOM)return{range:h,text:r,marks:c,line:t};if(t==e.contentDOM)return null;c.push({node:t,deco:new he({inclusive:!0,attributes:re(t),tagName:t.tagName.toLowerCase()})})}}}(this.view,e.changes,r):null;if(this.domChanged=null,this.hasComposition){this.markedForComposition.clear();let{from:t,to:n}=this.hasComposition;i=new mt(t,n,e.changes.mapPos(t,-1),e.changes.mapPos(n,1)).addToSet(i.slice())}this.hasComposition=o?{from:o.range.fromB,to:o.range.toB}:null,(I.ie||I.chrome)&&!o&&e&&e.state.doc.lines!=e.startState.doc.lines&&(this.forceSelection=!0);let s=function(e,t,i){let r=new yt;return n.RangeSet.compare(e,t,i,r),r.changes}(this.decorations,this.updateDeco(),e.changes);return i=mt.extendWithRanges(i,s),!!(7&this.flags||0!=i.length)&&(this.updateInner(i,e.startState.doc.length,o),e.transactions.length&&(this.lastUpdate=Date.now()),!0)}updateInner(e,t,i){this.view.viewState.mustMeasureContent=!0,this.updateChildren(e,t,i);let{observer:n}=this.view;n.ignore((()=>{this.dom.style.height=this.view.viewState.contentHeight/this.view.scaleY+"px",this.dom.style.flexBasis=this.minWidth?this.minWidth+"px":"";let e=I.chrome||I.ios?{node:n.selectionRange.focusNode,written:!1}:void 0;this.sync(this.view,e),this.flags&=-8,e&&(e.written||n.selectionRange.focusNode!=e.node)&&(this.forceSelection=!0),this.dom.style.height=""})),this.markedForComposition.forEach((e=>e.flags&=-9));let r=[];if(this.view.viewport.from||this.view.viewport.to<this.view.state.doc.length)for(let e of this.children)e instanceof Oe&&e.widget instanceof me&&r.push(e.dom);n.updateGaps(r)}updateChildren(e,t,i){let n=i?i.range.addToSet(e.slice()):e,r=this.childCursor(t);for(let e=n.length-1;;e--){let t=e>=0?n[e]:null;if(!t)break;let o,s,a,l,{fromA:h,toA:c,fromB:d,toB:u}=t;if(i&&i.range.fromB<u&&i.range.toB>d){let e=ge.build(this.view.state.doc,d,i.range.fromB,this.decorations,this.dynamicDecorationMap),t=ge.build(this.view.state.doc,i.range.toB,u,this.decorations,this.dynamicDecorationMap);s=e.breakAtStart,a=e.openStart,l=t.openEnd;let n=this.compositionView(i);t.breakAtStart?n.breakAfter=1:t.content.length&&n.merge(n.length,n.length,t.content[0],!1,t.openStart,0)&&(n.breakAfter=t.content[0].breakAfter,t.content.shift()),e.content.length&&n.merge(0,0,e.content[e.content.length-1],!0,0,e.openEnd)&&e.content.pop(),o=e.content.concat(n).concat(t.content)}else({content:o,breakAtStart:s,openStart:a,openEnd:l}=ge.build(this.view.state.doc,d,u,this.decorations,this.dynamicDecorationMap));let{i:f,off:p}=r.findPos(c,1),{i:O,off:m}=r.findPos(h,-1);E(this,O,m,f,p,o,s,a,l)}i&&this.fixCompositionDOM(i)}updateEditContextFormatting(e){this.editContextFormatting=this.editContextFormatting.map(e.changes);for(let t of e.transactions)for(let e of t.effects)e.is(Je)&&(this.editContextFormatting=e.value)}compositionView(e){let t=new G(e.text.nodeValue);t.flags|=8;for(let{deco:i}of e.marks)t=new U(i,[t],t.length);let i=new pe;return i.append(t,0),i}fixCompositionDOM(e){let t=(e,t)=>{t.flags|=8|(t.children.some((e=>7&e.flags))?1:0),this.markedForComposition.add(t);let i=Z.get(e);i&&i!=t&&(i.dom=null),t.setDOM(e)},i=this.childPos(e.range.fromB,1),n=this.children[i.i];t(e.line,n);for(let r=e.marks.length-1;r>=-1;r--)i=n.childPos(i.off,1),n=n.children[i.i],t(r>=0?e.marks[r].node:e.text,n)}updateSelection(e=!1,t=!1){!e&&this.view.observer.selectionRange.focusNode||this.view.observer.readSelectionRange();let i=this.view.root.activeElement,n=i==this.dom,r=!n&&l(this.dom,this.view.observer.selectionRange)&&!(i&&this.dom.contains(i));if(!(n||t||r))return;let o=this.forceSelection;this.forceSelection=!1;let a=this.view.state.selection.main,h=this.moveToLine(this.domAtPos(a.anchor)),d=a.empty?h:this.moveToLine(this.domAtPos(a.head));if(I.gecko&&a.empty&&!this.hasComposition&&1==(u=h).node.nodeType&&u.node.firstChild&&(0==u.offset||"false"==u.node.childNodes[u.offset-1].contentEditable)&&(u.offset==u.node.childNodes.length||"false"==u.node.childNodes[u.offset].contentEditable)){let e=document.createTextNode("");this.view.observer.ignore((()=>h.node.insertBefore(e,h.node.childNodes[h.offset]||null))),h=d=new C(e,0),o=!0}var u;let f=this.view.observer.selectionRange;!o&&f.focusNode&&(c(h.node,h.offset,f.anchorNode,f.anchorOffset)&&c(d.node,d.offset,f.focusNode,f.focusOffset)||this.suppressWidgetCursorChange(f,a))||(this.view.observer.ignore((()=>{I.android&&I.chrome&&this.dom.contains(f.focusNode)&&function(e,t){for(let i=e;i&&i!=t;i=i.assignedSlot||i.parentNode)if(1==i.nodeType&&"false"==i.contentEditable)return!0;return!1}(f.focusNode,this.dom)&&(this.dom.blur(),this.dom.focus({preventScroll:!0}));let e=s(this.view.root);if(e)if(a.empty){if(I.gecko){let e=(t=h.node,n=h.offset,1!=t.nodeType?0:(n&&"false"==t.childNodes[n-1].contentEditable?1:0)|(n<t.childNodes.length&&"false"==t.childNodes[n].contentEditable?2:0));if(e&&3!=e){let t=(1==e?Q:P)(h.node,h.offset);t&&(h=new C(t.node,t.offset))}}e.collapse(h.node,h.offset),null!=a.bidiLevel&&void 0!==e.caretBidiLevel&&(e.caretBidiLevel=a.bidiLevel)}else if(e.extend){e.collapse(h.node,h.offset);try{e.extend(d.node,d.offset)}catch(e){}}else{let t=document.createRange();a.anchor>a.head&&([h,d]=[d,h]),t.setEnd(d.node,d.offset),t.setStart(h.node,h.offset),e.removeAllRanges(),e.addRange(t)}var t,n;r&&this.view.root.activeElement==this.dom&&(this.dom.blur(),i&&i.focus())})),this.view.observer.setSelectionRange(h,d)),this.impreciseAnchor=h.precise?null:new C(f.anchorNode,f.anchorOffset),this.impreciseHead=d.precise?null:new C(f.focusNode,f.focusOffset)}suppressWidgetCursorChange(e,t){return this.hasComposition&&t.empty&&c(e.focusNode,e.focusOffset,e.anchorNode,e.anchorOffset)&&this.posFromDOM(e.focusNode,e.focusOffset)==t.head}enforceCursorAssoc(){if(this.hasComposition)return;let{view:e}=this,t=e.state.selection.main,i=s(e.root),{anchorNode:n,anchorOffset:r}=e.observer.selectionRange;if(!(i&&t.empty&&t.assoc&&i.modify))return;let o=pe.find(this,t.head);if(!o)return;let a=o.posAtStart;if(t.head==a||t.head==a+o.length)return;let l=this.coordsAt(t.head,-1),h=this.coordsAt(t.head,1);if(!l||!h||l.bottom>h.top)return;let c=this.domAtPos(t.head+t.assoc);i.collapse(c.node,c.offset),i.modify("move",t.assoc<0?"forward":"backward","lineboundary"),e.observer.readSelectionRange();let d=e.observer.selectionRange;e.docView.posFromDOM(d.anchorNode,d.anchorOffset)!=t.from&&i.collapse(n,r)}moveToLine(e){let t,i=this.dom;if(e.node!=i)return e;for(let n=e.offset;!t&&n<i.childNodes.length;n++){let e=Z.get(i.childNodes[n]);e instanceof pe&&(t=e.domAtPos(0))}for(let n=e.offset-1;!t&&n>=0;n--){let e=Z.get(i.childNodes[n]);e instanceof pe&&(t=e.domAtPos(e.length))}return t?new C(t.node,t.offset,!0):e}nearest(e){for(let t=e;t;){let e=Z.get(t);if(e&&e.rootView==this)return e;t=t.parentNode}return null}posFromDOM(e,t){let i=this.nearest(e);if(!i)throw new RangeError("Trying to find position for a DOM position outside of the document");return i.localPosFromDOM(e,t)+i.posAtStart}domAtPos(e){let{i:t,off:i}=this.childCursor().findPos(e,-1);for(;t<this.children.length-1;){let e=this.children[t];if(i<e.length||e instanceof pe)break;t++,i=0}return this.children[t].domAtPos(i)}coordsAt(e,t){let i=null,n=0;for(let r=this.length,o=this.children.length-1;o>=0;o--){let s=this.children[o],a=r-s.breakAfter,l=a-s.length;if(a<e)break;if(l<=e&&(l<e||s.covers(-1))&&(a>e||s.covers(1))&&(!i||s instanceof pe&&!(i instanceof pe&&t>=0)))i=s,n=l;else if(i&&l==e&&a==e&&s instanceof Oe&&Math.abs(t)<2){if(s.deco.startSide<0)break;o&&(i=null)}r=l}return i?i.coordsAt(e-n,t):null}coordsForChar(e){let{i:t,off:i}=this.childPos(e,1),r=this.children[t];if(!(r instanceof pe))return null;for(;r.children.length;){let{i:e,off:t}=r.childPos(i,1);for(;;e++){if(e==r.children.length)return null;if((r=r.children[e]).length)break}i=t}if(!(r instanceof G))return null;let o=n.findClusterBreak(r.text,i);if(o==i)return null;let s=x(r.dom,i,o).getClientRects();for(let e=0;e<s.length;e++){let t=s[e];if(e==s.length-1||t.top<t.bottom&&t.left<t.right)return t}return null}measureVisibleLineHeights(e){let i=[],{from:n,to:r}=e,o=this.view.contentDOM.clientWidth,s=o>Math.max(this.view.scrollDOM.clientWidth,this.minWidth)+1,a=-1,l=this.view.textDirection==t.Direction.LTR;for(let e=0,t=0;t<this.children.length;t++){let c=this.children[t],d=e+c.length;if(d>r)break;if(e>=n){let t=c.dom.getBoundingClientRect();if(i.push(t.height),s){let i=c.dom.lastChild,n=i?h(i):[];if(n.length){let i=n[n.length-1],r=l?i.right-t.left:t.right-i.left;r>a&&(a=r,this.minWidth=o,this.minWidthFrom=e,this.minWidthTo=d)}}}e=d+c.breakAfter}return i}textDirectionAt(e){let{i}=this.childPos(e,1);return"rtl"==getComputedStyle(this.children[i].dom).direction?t.Direction.RTL:t.Direction.LTR}measureTextSize(){for(let e of this.children)if(e instanceof pe){let t=e.measureTextSize();if(t)return t}let e,t,i,n=document.createElement("div");return n.className="cm-line",n.style.width="99999px",n.style.position="absolute",n.textContent="abc def ghi jkl mno pqr stu",this.view.observer.ignore((()=>{this.dom.appendChild(n);let r=h(n.firstChild)[0];e=n.getBoundingClientRect().height,t=r?r.width/27:7,i=r?r.height:e,n.remove()})),{lineHeight:e,charWidth:t,textHeight:i}}childCursor(e=this.length){let t=this.children.length;return t&&(e-=this.children[--t].length),new M(this.children,e,t)}computeBlockGapDeco(){let e=[],t=this.view.viewState;for(let i=0,n=0;;n++){let r=n==t.viewports.length?null:t.viewports[n],o=r?r.from-1:this.length;if(o>i){let n=(t.lineBlockAt(o).bottom-t.lineBlockAt(i).top)/this.view.scaleY;e.push(le.replace({widget:new me(n),block:!0,inclusive:!0,isBlockGap:!0}).range(i,o))}if(!r)break;i=r.to+1}return le.set(e)}updateDeco(){let e=1,t=this.view.state.facet(lt).map((t=>(this.dynamicDecorationMap[e++]="function"==typeof t)?t(this.view):t)),i=!1,r=this.view.state.facet(ht).map(((e,t)=>{let n="function"==typeof e;return n&&(i=!0),n?e(this.view):e}));for(r.length&&(this.dynamicDecorationMap[e++]=i,t.push(n.RangeSet.join(r))),this.decorations=[this.editContextFormatting,...t,this.computeBlockGapDeco(),this.view.viewState.lineGapDeco];e<this.decorations.length;)this.dynamicDecorationMap[e++]=!1;return this.decorations}scrollIntoView(e){if(e.isSnapshot){let t=this.view.viewState.lineBlockAt(e.range.head);return this.view.scrollDOM.scrollTop=t.top-e.yMargin,void(this.view.scrollDOM.scrollLeft=e.xMargin)}for(let t of this.view.state.facet(Fe))try{if(t(this.view,e.range,e))return!0}catch(e){et(this.view.state,e,"scroll handler")}let i,{range:n}=e,r=this.coordsAt(n.head,n.empty?n.assoc:n.head>n.anchor?-1:1);if(!r)return;!n.empty&&(i=this.coordsAt(n.anchor,n.anchor>n.head?-1:1))&&(r={left:Math.min(r.left,i.left),top:Math.min(r.top,i.top),right:Math.max(r.right,i.right),bottom:Math.max(r.bottom,i.bottom)});let o=pt(this.view),s={left:r.left-o.left,top:r.top-o.top,right:r.right+o.right,bottom:r.bottom+o.bottom},{offsetWidth:a,offsetHeight:l}=this.view.scrollDOM;!function(e,t,i,n,r,o,s,a){let l=e.ownerDocument,h=l.defaultView||window;for(let c=e,d=!1;c&&!d;)if(1==c.nodeType){let e,u=c==l.body,f=1,p=1;if(u)e=m(h);else{if(/^(fixed|sticky)$/.test(getComputedStyle(c).position)&&(d=!0),c.scrollHeight<=c.clientHeight&&c.scrollWidth<=c.clientWidth){c=c.assignedSlot||c.parentNode;continue}let t=c.getBoundingClientRect();({scaleX:f,scaleY:p}=g(c,t)),e={left:t.left,right:t.left+c.clientWidth*f,top:t.top,bottom:t.top+c.clientHeight*p}}let O=0,b=0;if("nearest"==r)t.top<e.top?(b=-(e.top-t.top+s),i>0&&t.bottom>e.bottom+b&&(b=t.bottom-e.bottom+b+s)):t.bottom>e.bottom&&(b=t.bottom-e.bottom+s,i<0&&t.top-b<e.top&&(b=-(e.top+b-t.top+s)));else{let n=t.bottom-t.top,o=e.bottom-e.top;b=("center"==r&&n<=o?t.top+n/2-o/2:"start"==r||"center"==r&&i<0?t.top-s:t.bottom-o+s)-e.top}if("nearest"==n?t.left<e.left?(O=-(e.left-t.left+o),i>0&&t.right>e.right+O&&(O=t.right-e.right+O+o)):t.right>e.right&&(O=t.right-e.right+o,i<0&&t.left<e.left+O&&(O=-(e.left+O-t.left+o))):O=("center"==n?t.left+(t.right-t.left)/2-(e.right-e.left)/2:"start"==n==a?t.left-o:t.right-(e.right-e.left)+o)-e.left,O||b)if(u)h.scrollBy(O,b);else{let e=0,i=0;if(b){let e=c.scrollTop;c.scrollTop+=b/p,i=(c.scrollTop-e)*p}if(O){let t=c.scrollLeft;c.scrollLeft+=O/f,e=(c.scrollLeft-t)*f}t={left:t.left-e,top:t.top-i,right:t.right-e,bottom:t.bottom-i},e&&Math.abs(e-O)<1&&(n="nearest"),i&&Math.abs(i-b)<1&&(r="nearest")}if(u)break;c=c.assignedSlot||c.parentNode}else{if(11!=c.nodeType)break;c=c.host}}(this.view.scrollDOM,s,n.head<n.anchor?-1:1,e.x,e.y,Math.max(Math.min(e.xMargin,a),-a),Math.max(Math.min(e.yMargin,l),-l),this.view.textDirection==t.Direction.LTR)}}function wt(e,t){let i=e.observer.selectionRange;if(!i.focusNode)return null;let n=Q(i.focusNode,i.focusOffset),r=P(i.focusNode,i.focusOffset),o=n||r;if(r&&n&&r.node!=n.node){let t=Z.get(r.node);if(!t||t instanceof G&&t.text!=r.node.nodeValue)o=r;else if(e.docView.lastCompositionAfterCursor){let e=Z.get(n.node);!e||e instanceof G&&e.text!=n.node.nodeValue||(o=r)}}if(e.docView.lastCompositionAfterCursor=o!=n,!o)return null;let s=t-o.offset;return{from:s,to:s+o.node.nodeValue.length,node:o.node}}let yt=class{constructor(){this.changes=[]}compareRange(e,t){fe(e,t,this.changes)}comparePoint(e,t){fe(e,t,this.changes)}};function vt(e,t){return t.left>e?t.left-e:Math.max(0,e-t.right)}function xt(e,t){return t.top>e?t.top-e:Math.max(0,e-t.bottom)}function St(e,t){return e.top<t.bottom-1&&e.bottom>t.top+1}function kt(e,t){return t<e.top?{top:t,left:e.left,right:e.right,bottom:e.bottom}:e}function At(e,t){return t>e.bottom?{top:e.top,left:e.left,right:e.right,bottom:t}:e}function Qt(e,t,i){let n,r,o,s,a,l,c,d,u=!1;for(let f=e.firstChild;f;f=f.nextSibling){let e=h(f);for(let h=0;h<e.length;h++){let p=e[h];r&&St(r,p)&&(p=kt(At(p,r.bottom),r.top));let O=vt(t,p),m=xt(i,p);if(0==O&&0==m)return 3==f.nodeType?Pt(f,t,i):Qt(f,t,i);if(!n||s>m||s==m&&o>O){n=f,r=p,o=O,s=m;let a=m?i<p.top?-1:1:O?t<p.left?-1:1:0;u=!a||(a>0?h<e.length-1:h>0)}0==O?i>p.bottom&&(!c||c.bottom<p.bottom)?(a=f,c=p):i<p.top&&(!d||d.top>p.top)&&(l=f,d=p):c&&St(c,p)?c=At(c,p.bottom):d&&St(d,p)&&(d=kt(d,p.top))}}if(c&&c.bottom>=i?(n=a,r=c):d&&d.top<=i&&(n=l,r=d),!n)return{node:e,offset:0};let f=Math.max(r.left,Math.min(r.right,t));return 3==n.nodeType?Pt(n,f,i):u&&"false"!=n.contentEditable?Qt(n,f,i):{node:e,offset:Array.prototype.indexOf.call(e.childNodes,n)+(t>=(r.left+r.right)/2?1:0)}}function Pt(e,t,i){let n=e.nodeValue.length,r=-1,o=1e9,s=0;for(let a=0;a<n;a++){let n=x(e,a,a+1).getClientRects();for(let l=0;l<n.length;l++){let h=n[l];if(h.top==h.bottom)continue;s||(s=t-h.left);let c=(h.top>i?h.top-i:i-h.bottom)-1;if(h.left-1<=t&&h.right+1>=t&&c<o){let i=t>=(h.left+h.right)/2,n=i;if((I.chrome||I.gecko)&&x(e,a).getBoundingClientRect().left==h.right&&(n=!i),c<=0)return{node:e,offset:a+(n?1:0)};r=a+(n?1:0),o=c}}}return{node:e,offset:r>-1?r:s>0?e.nodeValue.length:0}}function Ct(e,i,n,r=-1){var o,s;let a,l=e.contentDOM.getBoundingClientRect(),h=l.top+e.viewState.paddingTop,{docHeight:c}=e.viewState,{x:d,y:u}=i,f=u-h;if(f<0)return 0;if(f>c)return e.state.doc.length;for(let i=e.viewState.heightOracle.textHeight/2,o=!1;a=e.elementAtHeight(f),a.type!=t.BlockType.Text;)for(;f=r>0?a.bottom+i:a.top-i,!(f>=0&&f<=c);){if(o)return n?null:0;o=!0,r=-r}u=h+f;let O=a.from;if(O<e.viewport.from)return 0==e.viewport.from?0:n?null:$t(e,l,a,d,u);if(O>e.viewport.to)return e.viewport.to==e.state.doc.length?e.state.doc.length:n?null:$t(e,l,a,d,u);let m=e.dom.ownerDocument,g=e.root.elementFromPoint?e.root:m,b=g.elementFromPoint(d,u);b&&!e.contentDOM.contains(b)&&(b=null),b||(d=Math.max(l.left+1,Math.min(l.right-1,d)),b=g.elementFromPoint(d,u),b&&!e.contentDOM.contains(b)&&(b=null));let w,y=-1;if(b&&0!=(null===(o=e.docView.nearest(b))||void 0===o?void 0:o.isEditable)){if(m.caretPositionFromPoint){let e=m.caretPositionFromPoint(d,u);e&&({offsetNode:w,offset:y}=e)}else if(m.caretRangeFromPoint){let t=m.caretRangeFromPoint(d,u);t&&(({startContainer:w,startOffset:y}=t),(!e.contentDOM.contains(w)||I.safari&&function(e,t,i){let n;if(3!=e.nodeType||t!=(n=e.nodeValue.length))return!1;for(let t=e.nextSibling;t;t=t.nextSibling)if(1!=t.nodeType||"BR"!=t.nodeName)return!1;return x(e,n-1,n).getBoundingClientRect().left>i}(w,y,d)||I.chrome&&function(e,t,i){if(0!=t)return!1;for(let t=e;;){let e=t.parentNode;if(!e||1!=e.nodeType||e.firstChild!=t)return!1;if(e.classList.contains("cm-line"))break;t=e}return i-(1==e.nodeType?e.getBoundingClientRect():x(e,0,Math.max(e.nodeValue.length,1)).getBoundingClientRect()).left>5}(w,y,d))&&(w=void 0))}w&&(y=Math.min(p(w),y))}if(!w||!e.docView.dom.contains(w)){let t=pe.find(e.docView,O);if(!t)return f>a.top+a.height/2?a.to:a.from;({node:w,offset:y}=Qt(t.dom,d,u))}let v=e.docView.nearest(w);if(!v)return null;if(v.isWidget&&1==(null===(s=v.dom)||void 0===s?void 0:s.nodeType)){let e=v.dom.getBoundingClientRect();return i.y<e.top||i.y<=e.bottom&&i.x<=(e.left+e.right)/2?v.posAtStart:v.posAtEnd}return v.localPosFromDOM(w,y)+v.posAtStart}function $t(e,t,i,r,o){let s=Math.round((r-t.left)*e.defaultCharacterWidth);if(e.lineWrapping&&i.height>1.5*e.defaultLineHeight){let t=e.viewState.heightOracle.textHeight;s+=Math.floor((o-i.top-.5*(e.defaultLineHeight-t))/t)*e.viewState.heightOracle.lineLength}let a=e.state.sliceDoc(i.from,i.to);return i.from+n.findColumn(a,s,e.state.tabSize)}function Zt(e,i){let n=e.lineBlockAt(i);if(Array.isArray(n.type))for(let e of n.type)if(e.to>i||e.to==i&&(e.to==n.to||e.type==t.BlockType.Text))return e;return n}function Tt(e,t,i,n){let r=e.state.doc.lineAt(t.head),o=e.bidiSpans(r),s=e.textDirectionAt(r.from);for(let a=t,l=null;;){let t=Ve(r,o,s,a,i),h=_e;if(!t){if(r.number==(i?e.state.doc.lines:1))return a;h="\n",r=e.state.doc.line(r.number+(i?1:-1)),o=e.bidiSpans(r),t=e.visualLineSide(r,!i)}if(l){if(!l(h))return a}else{if(!n)return t;l=n(h)}a=t}}function Mt(e,t,i){for(;;){let n=0;for(let r of e)r.between(t-1,t+1,((e,r,o)=>{if(t>e&&t<r){let o=n||i||(t-e<r-t?-1:1);t=o<0?e:r,n=o}}));if(!n)return t}}function Et(e,t,i){let r=Mt(e.state.facet(ct).map((t=>t(e))),i.from,t.head>i.from?-1:1);return r==i.from?i:n.EditorSelection.cursor(r,r<i.from?1:-1)}const Xt="￿";class Rt{constructor(e,t){this.points=e,this.text="",this.lineSeparator=t.facet(n.EditorState.lineSeparator)}append(e){this.text+=e}lineBreak(){this.text+=Xt}readRange(e,t){if(!e)return this;let i=e.parentNode;for(let n=e;;){this.findPointBefore(i,n);let e=this.text.length;this.readNode(n);let r=n.nextSibling;if(r==t)break;let o=Z.get(n),s=Z.get(r);(o&&s?o.breakAfter:(o?o.breakAfter:u(n))||u(r)&&("BR"!=n.nodeName||n.cmIgnore)&&this.text.length>e)&&this.lineBreak(),n=r}return this.findPointBefore(i,t),this}readTextNode(e){let t=e.nodeValue;for(let i of this.points)i.node==e&&(i.pos=this.text.length+Math.min(i.offset,t.length));for(let i=0,n=this.lineSeparator?null:/\r\n?|\n/g;;){let r,o=-1,s=1;if(this.lineSeparator?(o=t.indexOf(this.lineSeparator,i),s=this.lineSeparator.length):(r=n.exec(t))&&(o=r.index,s=r[0].length),this.append(t.slice(i,o<0?t.length:o)),o<0)break;if(this.lineBreak(),s>1)for(let t of this.points)t.node==e&&t.pos>this.text.length&&(t.pos-=s-1);i=o+s}}readNode(e){if(e.cmIgnore)return;let t=Z.get(e),i=t&&t.overrideDOMText;if(null!=i){this.findPointInside(e,i.length);for(let e=i.iter();!e.next().done;)e.lineBreak?this.lineBreak():this.append(e.value)}else 3==e.nodeType?this.readTextNode(e):"BR"==e.nodeName?e.nextSibling&&this.lineBreak():1==e.nodeType&&this.readRange(e.firstChild,null)}findPointBefore(e,t){for(let i of this.points)i.node==e&&e.childNodes[i.offset]==t&&(i.pos=this.text.length)}findPointInside(e,t){for(let i of this.points)(3==e.nodeType?i.node==e:e.contains(i.node))&&(i.pos=this.text.length+(_t(e,i.node,i.offset)?t:0))}}function _t(e,t,i){for(;;){if(!t||i<p(t))return!1;if(t==e)return!0;i=d(t)+1,t=t.parentNode}}class Vt{constructor(e,t){this.node=e,this.offset=t,this.pos=-1}}class qt{constructor(e,t,i,r){this.typeOver=r,this.bounds=null,this.text="",this.domChanged=t>-1;let{impreciseHead:o,impreciseAnchor:s}=e.docView;if(e.state.readOnly&&t>-1)this.newSel=null;else if(t>-1&&(this.bounds=e.docView.domBoundsAround(t,i,0))){let t=o||s?[]:function(e){let t=[];if(e.root.activeElement!=e.contentDOM)return t;let{anchorNode:i,anchorOffset:n,focusNode:r,focusOffset:o}=e.observer.selectionRange;return i&&(t.push(new Vt(i,n)),r==i&&o==n||t.push(new Vt(r,o))),t}(e),i=new Rt(t,e.state);i.readRange(this.bounds.startDOM,this.bounds.endDOM),this.text=i.text,this.newSel=function(e,t){if(0==e.length)return null;let i=e[0].pos,r=2==e.length?e[1].pos:i;return i>-1&&r>-1?n.EditorSelection.single(i+t,r+t):null}(t,this.bounds.from)}else{let t=e.observer.selectionRange,i=o&&o.node==t.focusNode&&o.offset==t.focusOffset||!a(e.contentDOM,t.focusNode)?e.state.selection.main.head:e.docView.posFromDOM(t.focusNode,t.focusOffset),r=s&&s.node==t.anchorNode&&s.offset==t.anchorOffset||!a(e.contentDOM,t.anchorNode)?e.state.selection.main.anchor:e.docView.posFromDOM(t.anchorNode,t.anchorOffset),l=e.viewport;if((I.ios||I.chrome)&&e.state.selection.main.empty&&i!=r&&(l.from>0||l.to<e.state.doc.length)){let t=Math.min(i,r),n=Math.max(i,r),o=l.from-t,s=l.to-n;0!=o&&1!=o&&0!=t||0!=s&&-1!=s&&n!=e.state.doc.length||(i=0,r=e.state.doc.length)}this.newSel=n.EditorSelection.single(r,i)}}}function Bt(e,t){let i,{newSel:r}=t,o=e.state.selection.main,s=e.inputState.lastKeyTime>Date.now()-100?e.inputState.lastKeyCode:-1;if(t.bounds){let{from:r,to:a}=t.bounds,l=o.from,h=null;(8===s||I.android&&t.text.length<a-r)&&(l=o.to,h="end");let c=function(e,t,i,n){let r=Math.min(e.length,t.length),o=0;for(;o<r&&e.charCodeAt(o)==t.charCodeAt(o);)o++;if(o==r&&e.length==t.length)return null;let s=e.length,a=t.length;for(;s>0&&a>0&&e.charCodeAt(s-1)==t.charCodeAt(a-1);)s--,a--;return"end"==n&&(i-=s+Math.max(0,o-Math.min(s,a))-o),s<o&&e.length<t.length?(o-=i<=o&&i>=s?o-i:0,a=o+(a-s),s=o):a<o&&(o-=i<=o&&i>=a?o-i:0,s=o+(s-a),a=o),{from:o,toA:s,toB:a}}(e.state.doc.sliceString(r,a,Xt),t.text,l-r,h);c&&(I.chrome&&13==s&&c.toB==c.from+2&&t.text.slice(c.from,c.toB)==Xt+Xt&&c.toB--,i={from:r+c.from,to:r+c.toA,insert:n.Text.of(t.text.slice(c.from,c.toB).split(Xt))})}else r&&(!e.hasFocus&&e.state.facet(tt)||r.main.eq(o))&&(r=null);if(!i&&!r)return!1;if(!i&&t.typeOver&&!o.empty&&r&&r.main.empty?i={from:o.from,to:o.to,insert:e.state.doc.slice(o.from,o.to)}:i&&i.from>=o.from&&i.to<=o.to&&(i.from!=o.from||i.to!=o.to)&&o.to-o.from-(i.to-i.from)<=4?i={from:o.from,to:o.to,insert:e.state.doc.slice(o.from,i.from).append(i.insert).append(e.state.doc.slice(i.to,o.to))}:(I.mac||I.android)&&i&&i.from==i.to&&i.from==o.head-1&&/^\. ?$/.test(i.insert.toString())&&"off"==e.contentDOM.getAttribute("autocorrect")?(r&&2==i.insert.length&&(r=n.EditorSelection.single(r.main.anchor-1,r.main.head-1)),i={from:o.from,to:o.to,insert:n.Text.of([" "])}):I.chrome&&i&&i.from==i.to&&i.from==o.head&&"\n "==i.insert.toString()&&e.lineWrapping&&(r&&(r=n.EditorSelection.single(r.main.anchor-1,r.main.head-1)),i={from:o.from,to:o.to,insert:n.Text.of([" "])}),i)return Dt(e,i,r,s);if(r&&!r.main.eq(o)){let t=!1,i="select";return e.inputState.lastSelectionTime>Date.now()-50&&("select"==e.inputState.lastSelectionOrigin&&(t=!0),i=e.inputState.lastSelectionOrigin),e.dispatch({selection:r,scrollIntoView:t,userEvent:i}),!0}return!1}function Dt(e,t,i,r=-1){if(I.ios&&e.inputState.flushIOSKey(t))return!0;let o=e.state.selection.main;if(I.android&&(t.to==o.to&&(t.from==o.from||t.from==o.from-1&&" "==e.state.sliceDoc(t.from,o.from))&&1==t.insert.length&&2==t.insert.lines&&S(e.contentDOM,"Enter",13)||(t.from==o.from-1&&t.to==o.to&&0==t.insert.length||8==r&&t.insert.length<t.to-t.from&&t.to>o.head)&&S(e.contentDOM,"Backspace",8)||t.from==o.from&&t.to==o.to+1&&0==t.insert.length&&S(e.contentDOM,"Delete",46)))return!0;let s,a=t.insert.toString();e.inputState.composing>=0&&e.inputState.composing++;let l=()=>s||(s=function(e,t,i){let r,o=e.state,s=o.selection.main;if(t.from>=s.from&&t.to<=s.to&&t.to-t.from>=(s.to-s.from)/3&&(!i||i.main.empty&&i.main.from==t.from+t.insert.length)&&e.inputState.composing<0){let i=s.from<t.from?o.sliceDoc(s.from,t.from):"",n=s.to>t.to?o.sliceDoc(t.to,s.to):"";r=o.replaceSelection(e.state.toText(i+t.insert.sliceString(0,void 0,e.state.lineBreak)+n))}else{let a=o.changes(t),l=i&&i.main.to<=a.newLength?i.main:void 0;if(o.selection.ranges.length>1&&e.inputState.composing>=0&&t.to<=s.to&&t.to>=s.to-10){let h,c=e.state.sliceDoc(t.from,t.to),d=i&&wt(e,i.main.head);if(d){let e=t.insert.length-(t.to-t.from);h={from:d.from,to:d.to-e}}else h=e.state.doc.lineAt(s.head);let u=s.to-t.to,f=s.to-s.from;r=o.changeByRange((i=>{if(i.from==s.from&&i.to==s.to)return{changes:a,range:l||i.map(a)};let r=i.to-u,d=r-c.length;if(i.to-i.from!=f||e.state.sliceDoc(d,r)!=c||i.to>=h.from&&i.from<=h.to)return{range:i};let p=o.changes({from:d,to:r,insert:t.insert}),O=i.to-s.to;return{changes:p,range:l?n.EditorSelection.range(Math.max(0,l.anchor+O),Math.max(0,l.head+O)):i.map(p)}}))}else r={changes:a,selection:l&&o.selection.replaceRange(l)}}let a="input.type";return(e.composing||e.inputState.compositionPendingChange&&e.inputState.compositionEndedAt>Date.now()-50)&&(e.inputState.compositionPendingChange=!1,a+=".compose",e.inputState.compositionFirstChange&&(a+=".start",e.inputState.compositionFirstChange=!1)),o.update(r,{userEvent:a,scrollIntoView:!0})}(e,t,i));return e.state.facet(We).some((i=>i(e,t.from,t.to,a,l)))||e.dispatch(l()),!0}class zt{setSelectionOrigin(e){this.lastSelectionOrigin=e,this.lastSelectionTime=Date.now()}constructor(e){this.view=e,this.lastKeyCode=0,this.lastKeyTime=0,this.lastTouchTime=0,this.lastFocusTime=0,this.lastScrollTop=0,this.lastScrollLeft=0,this.pendingIOSKey=void 0,this.tabFocusMode=-1,this.lastSelectionOrigin=null,this.lastSelectionTime=0,this.lastContextMenu=0,this.scrollHandlers=[],this.handlers=Object.create(null),this.composing=-1,this.compositionFirstChange=null,this.compositionEndedAt=0,this.compositionPendingKey=!1,this.compositionPendingChange=!1,this.mouseSelection=null,this.draggedContent=null,this.handleEvent=this.handleEvent.bind(this),this.notifiedFocused=e.hasFocus,I.safari&&e.contentDOM.addEventListener("input",(()=>null)),I.gecko&&function(e){pi.has(e)||(pi.add(e),e.addEventListener("copy",(()=>{})),e.addEventListener("cut",(()=>{})))}(e.contentDOM.ownerDocument)}handleEvent(e){(function(e,t){if(!t.bubbles)return!0;if(t.defaultPrevented)return!1;for(let i,n=t.target;n!=e.contentDOM;n=n.parentNode)if(!n||11==n.nodeType||(i=Z.get(n))&&i.ignoreEvent(t))return!1;return!0})(this.view,e)&&!this.ignoreDuringComposition(e)&&("keydown"==e.type&&this.keydown(e)||this.runHandlers(e.type,e))}runHandlers(e,t){let i=this.handlers[e];if(i){for(let e of i.observers)e(this.view,t);for(let e of i.handlers){if(t.defaultPrevented)break;if(e(this.view,t)){t.preventDefault();break}}}}ensureHandlers(e){let t=jt(e),i=this.handlers,n=this.view.contentDOM;for(let e in t)if("scroll"!=e){let r=!t[e].handlers.length,o=i[e];o&&r!=!o.handlers.length&&(n.removeEventListener(e,this.handleEvent),o=null),o||n.addEventListener(e,this.handleEvent,{passive:r})}for(let e in i)"scroll"==e||t[e]||n.removeEventListener(e,this.handleEvent);this.handlers=t}keydown(e){if(this.lastKeyCode=e.keyCode,this.lastKeyTime=Date.now(),9==e.keyCode&&this.tabFocusMode>-1&&(!this.tabFocusMode||Date.now()<=this.tabFocusMode))return!0;if(this.tabFocusMode>0&&27!=e.keyCode&&It.indexOf(e.keyCode)<0&&(this.tabFocusMode=-1),I.android&&I.chrome&&!e.synthetic&&(13==e.keyCode||8==e.keyCode))return this.view.observer.delayAndroidKey(e.key,e.keyCode),!0;let t;return!I.ios||e.synthetic||e.altKey||e.metaKey||!((t=Wt.find((t=>t.keyCode==e.keyCode)))&&!e.ctrlKey||Yt.indexOf(e.key)>-1&&e.ctrlKey&&!e.shiftKey)?(229!=e.keyCode&&this.view.observer.forceFlush(),!1):(this.pendingIOSKey=t||e,setTimeout((()=>this.flushIOSKey()),250),!0)}flushIOSKey(e){let t=this.pendingIOSKey;return!!t&&!("Enter"==t.key&&e&&e.from<e.to&&/^\S+$/.test(e.insert.toString()))&&(this.pendingIOSKey=void 0,S(this.view.contentDOM,t.key,t.keyCode,t instanceof KeyboardEvent?t:void 0))}ignoreDuringComposition(e){return!!/^key/.test(e.type)&&(this.composing>0||!!(I.safari&&!I.ios&&this.compositionPendingKey&&Date.now()-this.compositionEndedAt<100)&&(this.compositionPendingKey=!1,!0))}startMouseSelection(e){this.mouseSelection&&this.mouseSelection.destroy(),this.mouseSelection=e}update(e){this.view.observer.update(e),this.mouseSelection&&this.mouseSelection.update(e),this.draggedContent&&e.docChanged&&(this.draggedContent=this.draggedContent.map(e.changes)),e.transactions.length&&(this.lastKeyCode=this.lastSelectionTime=0)}destroy(){this.mouseSelection&&this.mouseSelection.destroy()}}function Lt(e,t){return(i,n)=>{try{return t.call(e,n,i)}catch(e){et(i.state,e)}}}function jt(e){let t=Object.create(null);function i(e){return t[e]||(t[e]={observers:[],handlers:[]})}for(let t of e){let e=t.spec;if(e&&e.domEventHandlers)for(let n in e.domEventHandlers){let r=e.domEventHandlers[n];r&&i(n).handlers.push(Lt(t.value,r))}if(e&&e.domEventObservers)for(let n in e.domEventObservers){let r=e.domEventObservers[n];r&&i(n).observers.push(Lt(t.value,r))}}for(let e in Nt)i(e).handlers.push(Nt[e]);for(let e in Ft)i(e).observers.push(Ft[e]);return t}const Wt=[{key:"Backspace",keyCode:8,inputType:"deleteContentBackward"},{key:"Enter",keyCode:13,inputType:"insertParagraph"},{key:"Enter",keyCode:13,inputType:"insertLineBreak"},{key:"Delete",keyCode:46,inputType:"deleteContentForward"}],Yt="dthko",It=[16,17,18,20,91,92,224,225];function Gt(e){return.7*Math.max(0,e)+8}class Ut{constructor(e,t,i,r){this.view=e,this.startEvent=t,this.style=i,this.mustSelect=r,this.scrollSpeed={x:0,y:0},this.scrolling=-1,this.lastEvent=t,this.scrollParents=function(e){let t,i,n=e.ownerDocument;for(let r=e.parentNode;r&&!(r==n.body||t&&i);)if(1==r.nodeType)!i&&r.scrollHeight>r.clientHeight&&(i=r),!t&&r.scrollWidth>r.clientWidth&&(t=r),r=r.assignedSlot||r.parentNode;else{if(11!=r.nodeType)break;r=r.host}return{x:t,y:i}}(e.contentDOM),this.atoms=e.state.facet(ct).map((t=>t(e)));let o=e.contentDOM.ownerDocument;o.addEventListener("mousemove",this.move=this.move.bind(this)),o.addEventListener("mouseup",this.up=this.up.bind(this)),this.extend=t.shiftKey,this.multiple=e.state.facet(n.EditorState.allowMultipleSelections)&&function(e,t){let i=e.state.facet(Be);return i.length?i[0](t):I.mac?t.metaKey:t.ctrlKey}(e,t),this.dragging=!(!function(e,t){let{main:i}=e.state.selection;if(i.empty)return!1;let n=s(e.root);if(!n||0==n.rangeCount)return!0;let r=n.getRangeAt(0).getClientRects();for(let e=0;e<r.length;e++){let i=r[e];if(i.left<=t.clientX&&i.right>=t.clientX&&i.top<=t.clientY&&i.bottom>=t.clientY)return!0}return!1}(e,t)||1!=li(t))&&null}start(e){!1===this.dragging&&this.select(e)}move(e){if(0==e.buttons)return this.destroy();if(this.dragging||null==this.dragging&&(t=this.startEvent,i=e,Math.max(Math.abs(t.clientX-i.clientX),Math.abs(t.clientY-i.clientY))<10))return;var t,i;this.select(this.lastEvent=e);let n=0,r=0,o=0,s=0,a=this.view.win.innerWidth,l=this.view.win.innerHeight;this.scrollParents.x&&({left:o,right:a}=this.scrollParents.x.getBoundingClientRect()),this.scrollParents.y&&({top:s,bottom:l}=this.scrollParents.y.getBoundingClientRect());let h=pt(this.view);e.clientX-h.left<=o+6?n=-Gt(o-e.clientX):e.clientX+h.right>=a-6&&(n=Gt(e.clientX-a)),e.clientY-h.top<=s+6?r=-Gt(s-e.clientY):e.clientY+h.bottom>=l-6&&(r=Gt(e.clientY-l)),this.setScrollSpeed(n,r)}up(e){null==this.dragging&&this.select(this.lastEvent),this.dragging||e.preventDefault(),this.destroy()}destroy(){this.setScrollSpeed(0,0);let e=this.view.contentDOM.ownerDocument;e.removeEventListener("mousemove",this.move),e.removeEventListener("mouseup",this.up),this.view.inputState.mouseSelection=this.view.inputState.draggedContent=null}setScrollSpeed(e,t){this.scrollSpeed={x:e,y:t},e||t?this.scrolling<0&&(this.scrolling=setInterval((()=>this.scroll()),50)):this.scrolling>-1&&(clearInterval(this.scrolling),this.scrolling=-1)}scroll(){let{x:e,y:t}=this.scrollSpeed;e&&this.scrollParents.x&&(this.scrollParents.x.scrollLeft+=e,e=0),t&&this.scrollParents.y&&(this.scrollParents.y.scrollTop+=t,t=0),(e||t)&&this.view.win.scrollBy(e,t),!1===this.dragging&&this.select(this.lastEvent)}skipAtoms(e){let t=null;for(let i=0;i<e.ranges.length;i++){let r=e.ranges[i],o=null;if(r.empty){let e=Mt(this.atoms,r.from,0);e!=r.from&&(o=n.EditorSelection.cursor(e,-1))}else{let e=Mt(this.atoms,r.from,-1),t=Mt(this.atoms,r.to,1);e==r.from&&t==r.to||(o=n.EditorSelection.range(r.from==r.anchor?e:t,r.from==r.head?e:t))}o&&(t||(t=e.ranges.slice()),t[i]=o)}return t?n.EditorSelection.create(t,e.mainIndex):e}select(e){let{view:t}=this,i=this.skipAtoms(this.style.get(e,this.extend,this.multiple));!this.mustSelect&&i.eq(t.state.selection,!1===this.dragging)||this.view.dispatch({selection:i,userEvent:"select.pointer"}),this.mustSelect=!1}update(e){e.transactions.some((e=>e.isUserEvent("input.type")))?this.destroy():this.style.update(e)&&setTimeout((()=>this.select(this.lastEvent)),20)}}const Nt=Object.create(null),Ft=Object.create(null),Ht=I.ie&&I.ie_version<15||I.ios&&I.webkit_version<604;function Kt(e,t,i){for(let n of e.facet(t))i=n(i,e);return i}function Jt(e,t){t=Kt(e.state,Ie,t);let i,{state:r}=e,o=1,s=r.toText(t),a=s.lines==r.selection.ranges.length;if(null!=ci&&r.selection.ranges.every((e=>e.empty))&&ci==s.toString()){let e=-1;i=r.changeByRange((i=>{let l=r.doc.lineAt(i.from);if(l.from==e)return{range:i};e=l.from;let h=r.toText((a?s.line(o++).text:t)+r.lineBreak);return{changes:{from:l.from,insert:h},range:n.EditorSelection.cursor(i.from+h.length)}}))}else i=a?r.changeByRange((e=>{let t=s.line(o++);return{changes:{from:e.from,to:e.to,insert:t.text},range:n.EditorSelection.cursor(e.from+t.length)}})):r.replaceSelection(s);e.dispatch(i,{userEvent:"input.paste",scrollIntoView:!0})}function ei(e,t,i,r){if(1==r)return n.EditorSelection.cursor(t,i);if(2==r)return function(e,t,i=1){let r=e.charCategorizer(t),o=e.doc.lineAt(t),s=t-o.from;if(0==o.length)return n.EditorSelection.cursor(t);0==s?i=1:s==o.length&&(i=-1);let a=s,l=s;i<0?a=n.findClusterBreak(o.text,s,!1):l=n.findClusterBreak(o.text,s);let h=r(o.text.slice(a,l));for(;a>0;){let e=n.findClusterBreak(o.text,a,!1);if(r(o.text.slice(e,a))!=h)break;a=e}for(;l<o.length;){let e=n.findClusterBreak(o.text,l);if(r(o.text.slice(l,e))!=h)break;l=e}return n.EditorSelection.range(a+o.from,l+o.from)}(e.state,t,i);{let i=pe.find(e.docView,t),r=e.state.doc.lineAt(i?i.posAtEnd:t),o=i?i.posAtStart:r.from,s=i?i.posAtEnd:r.to;return s<e.state.doc.length&&s==r.to&&s++,n.EditorSelection.range(o,s)}}Ft.scroll=e=>{e.inputState.lastScrollTop=e.scrollDOM.scrollTop,e.inputState.lastScrollLeft=e.scrollDOM.scrollLeft},Nt.keydown=(e,t)=>(e.inputState.setSelectionOrigin("select"),27==t.keyCode&&0!=e.inputState.tabFocusMode&&(e.inputState.tabFocusMode=Date.now()+2e3),!1),Ft.touchstart=(e,t)=>{e.inputState.lastTouchTime=Date.now(),e.inputState.setSelectionOrigin("select.pointer")},Ft.touchmove=e=>{e.inputState.setSelectionOrigin("select.pointer")},Nt.mousedown=(e,t)=>{if(e.observer.flush(),e.inputState.lastTouchTime>Date.now()-2e3)return!1;let i=null;for(let n of e.state.facet(ze))if(i=n(e,t),i)break;if(i||0!=t.button||(i=function(e,t){let i=ni(e,t),r=li(t),o=e.state.selection;return{update(e){e.docChanged&&(i.pos=e.changes.mapPos(i.pos),o=o.map(e.changes))},get(t,s,a){let l,h=ni(e,t),c=ei(e,h.pos,h.bias,r);if(i.pos!=h.pos&&!s){let t=ei(e,i.pos,i.bias,r),o=Math.min(t.from,c.from),s=Math.max(t.to,c.to);c=o<c.from?n.EditorSelection.range(o,s):n.EditorSelection.range(s,o)}return s?o.replaceRange(o.main.extend(c.from,c.to)):a&&1==r&&o.ranges.length>1&&(l=function(e,t){for(let i=0;i<e.ranges.length;i++){let{from:r,to:o}=e.ranges[i];if(r<=t&&o>=t)return n.EditorSelection.create(e.ranges.slice(0,i).concat(e.ranges.slice(i+1)),e.mainIndex==i?0:e.mainIndex-(e.mainIndex>i?1:0))}return null}(o,h.pos))?l:a?o.addRange(c):n.EditorSelection.create([c])}}}(e,t)),i){let n=!e.hasFocus;e.inputState.startMouseSelection(new Ut(e,t,i,n)),n&&e.observer.ignore((()=>{v(e.contentDOM);let t=e.root.activeElement;t&&!t.contains(e.contentDOM)&&t.blur()}));let r=e.inputState.mouseSelection;if(r)return r.start(t),!1===r.dragging}return!1};let ti=(e,t,i)=>t>=i.top&&t<=i.bottom&&e>=i.left&&e<=i.right;function ii(e,t,i,n){let r=pe.find(e.docView,t);if(!r)return 1;let o=t-r.posAtStart;if(0==o)return 1;if(o==r.length)return-1;let s=r.coordsAt(o,-1);if(s&&ti(i,n,s))return-1;let a=r.coordsAt(o,1);return a&&ti(i,n,a)?1:s&&s.bottom>=n?-1:1}function ni(e,t){let i=e.posAtCoords({x:t.clientX,y:t.clientY},!1);return{pos:i,bias:ii(e,i,t.clientX,t.clientY)}}const ri=I.ie&&I.ie_version<=11;let oi=null,si=0,ai=0;function li(e){if(!ri)return e.detail;let t=oi,i=ai;return oi=e,ai=Date.now(),si=!t||i>Date.now()-400&&Math.abs(t.clientX-e.clientX)<2&&Math.abs(t.clientY-e.clientY)<2?(si+1)%3:1}function hi(e,t,i,n){if(!(i=Kt(e.state,Ie,i)))return;let r=e.posAtCoords({x:t.clientX,y:t.clientY},!1),{draggedContent:o}=e.inputState,s=n&&o&&function(e,t){let i=e.state.facet(De);return i.length?i[0](t):I.mac?!t.altKey:!t.ctrlKey}(e,t)?{from:o.from,to:o.to}:null,a={from:r,insert:i},l=e.state.changes(s?[s,a]:a);e.focus(),e.dispatch({changes:l,selection:{anchor:l.mapPos(r,-1),head:l.mapPos(r,1)},userEvent:s?"move.drop":"input.drop"}),e.inputState.draggedContent=null}Nt.dragstart=(e,t)=>{let{selection:{main:i}}=e.state;if(t.target.draggable){let r=e.docView.nearest(t.target);if(r&&r.isWidget){let e=r.posAtStart,t=e+r.length;(e>=i.to||t<=i.from)&&(i=n.EditorSelection.range(e,t))}}let{inputState:r}=e;return r.mouseSelection&&(r.mouseSelection.dragging=!0),r.draggedContent=i,t.dataTransfer&&(t.dataTransfer.setData("Text",Kt(e.state,Ge,e.state.sliceDoc(i.from,i.to))),t.dataTransfer.effectAllowed="copyMove"),!1},Nt.dragend=e=>(e.inputState.draggedContent=null,!1),Nt.drop=(e,t)=>{if(!t.dataTransfer)return!1;if(e.state.readOnly)return!0;let i=t.dataTransfer.files;if(i&&i.length){let n=Array(i.length),r=0,o=()=>{++r==i.length&&hi(e,t,n.filter((e=>null!=e)).join(e.state.lineBreak),!1)};for(let e=0;e<i.length;e++){let t=new FileReader;t.onerror=o,t.onload=()=>{/[\x00-\x08\x0e-\x1f]{2}/.test(t.result)||(n[e]=t.result),o()},t.readAsText(i[e])}return!0}{let i=t.dataTransfer.getData("Text");if(i)return hi(e,t,i,!0),!0}return!1},Nt.paste=(e,t)=>{if(e.state.readOnly)return!0;e.observer.flush();let i=Ht?null:t.clipboardData;return i?(Jt(e,i.getData("text/plain")||i.getData("text/uri-list")),!0):(function(e){let t=e.dom.parentNode;if(!t)return;let i=t.appendChild(document.createElement("textarea"));i.style.cssText="position: fixed; left: -10000px; top: 10px",i.focus(),setTimeout((()=>{e.focus(),i.remove(),Jt(e,i.value)}),50)}(e),!1)};let ci=null;Nt.copy=Nt.cut=(e,t)=>{let{text:i,ranges:n,linewise:r}=function(e){let t=[],i=[],n=!1;for(let n of e.selection.ranges)n.empty||(t.push(e.sliceDoc(n.from,n.to)),i.push(n));if(!t.length){let r=-1;for(let{from:n}of e.selection.ranges){let o=e.doc.lineAt(n);o.number>r&&(t.push(o.text),i.push({from:o.from,to:Math.min(e.doc.length,o.to+1)})),r=o.number}n=!0}return{text:Kt(e,Ge,t.join(e.lineBreak)),ranges:i,linewise:n}}(e.state);if(!i&&!r)return!1;ci=r?i:null,"cut"!=t.type||e.state.readOnly||e.dispatch({changes:n,scrollIntoView:!0,userEvent:"delete.cut"});let o=Ht?null:t.clipboardData;return o?(o.clearData(),o.setData("text/plain",i),!0):(function(e,t){let i=e.dom.parentNode;if(!i)return;let n=i.appendChild(document.createElement("textarea"));n.style.cssText="position: fixed; left: -10000px; top: 10px",n.value=t,n.focus(),n.selectionEnd=t.length,n.selectionStart=0,setTimeout((()=>{n.remove(),e.focus()}),50)}(e,i),!1)};const di=n.Annotation.define();function ui(e,t){let i=[];for(let n of e.facet(Ye)){let r=n(e,t);r&&i.push(r)}return i?e.update({effects:i,annotations:di.of(!0)}):null}function fi(e){setTimeout((()=>{let t=e.hasFocus;if(t!=e.inputState.notifiedFocused){let i=ui(e.state,t);i?e.dispatch(i):e.update([])}}),10)}Ft.focus=e=>{e.inputState.lastFocusTime=Date.now(),e.scrollDOM.scrollTop||!e.inputState.lastScrollTop&&!e.inputState.lastScrollLeft||(e.scrollDOM.scrollTop=e.inputState.lastScrollTop,e.scrollDOM.scrollLeft=e.inputState.lastScrollLeft),fi(e)},Ft.blur=e=>{e.observer.clearSelectionRange(),fi(e)},Ft.compositionstart=Ft.compositionupdate=e=>{e.observer.editContext||(null==e.inputState.compositionFirstChange&&(e.inputState.compositionFirstChange=!0),e.inputState.composing<0&&(e.inputState.composing=0))},Ft.compositionend=e=>{e.observer.editContext||(e.inputState.composing=-1,e.inputState.compositionEndedAt=Date.now(),e.inputState.compositionPendingKey=!0,e.inputState.compositionPendingChange=e.observer.pendingRecords().length>0,e.inputState.compositionFirstChange=null,I.chrome&&I.android?e.observer.flushSoon():e.inputState.compositionPendingChange?Promise.resolve().then((()=>e.observer.flush())):setTimeout((()=>{e.inputState.composing<0&&e.docView.hasComposition&&e.update([])}),50))},Ft.contextmenu=e=>{e.inputState.lastContextMenu=Date.now()},Nt.beforeinput=(e,t)=>{var i,n;if("insertReplacementText"==t.inputType&&e.observer.editContext){let n=null===(i=t.dataTransfer)||void 0===i?void 0:i.getData("text/plain"),r=t.getTargetRanges();if(n&&r.length){let t=r[0],i=e.posAtDOM(t.startContainer,t.startOffset),o=e.posAtDOM(t.endContainer,t.endOffset);return Dt(e,{from:i,to:o,insert:e.state.toText(n)},null),!0}}let r;if(I.chrome&&I.android&&(r=Wt.find((e=>e.inputType==t.inputType)))&&(e.observer.delayAndroidKey(r.key,r.keyCode),"Backspace"==r.key||"Delete"==r.key)){let t=(null===(n=window.visualViewport)||void 0===n?void 0:n.height)||0;setTimeout((()=>{var i;((null===(i=window.visualViewport)||void 0===i?void 0:i.height)||0)>t+10&&e.hasFocus&&(e.contentDOM.blur(),e.focus())}),100)}return I.ios&&"deleteContentForward"==t.inputType&&e.observer.flushSoon(),I.safari&&"insertText"==t.inputType&&e.inputState.composing>=0&&setTimeout((()=>Ft.compositionend(e,t)),20),!1};const pi=new Set,Oi=["pre-wrap","normal","pre-line","break-spaces"];let mi=!1;function gi(){mi=!1}class bi{constructor(e){this.lineWrapping=e,this.doc=n.Text.empty,this.heightSamples={},this.lineHeight=14,this.charWidth=7,this.textHeight=14,this.lineLength=30}heightForGap(e,t){let i=this.doc.lineAt(t).number-this.doc.lineAt(e).number+1;return this.lineWrapping&&(i+=Math.max(0,Math.ceil((t-e-i*this.lineLength*.5)/this.lineLength))),this.lineHeight*i}heightForLine(e){return this.lineWrapping?(1+Math.max(0,Math.ceil((e-this.lineLength)/(this.lineLength-5))))*this.lineHeight:this.lineHeight}setDoc(e){return this.doc=e,this}mustRefreshForWrapping(e){return Oi.indexOf(e)>-1!=this.lineWrapping}mustRefreshForHeights(e){let t=!1;for(let i=0;i<e.length;i++){let n=e[i];n<0?i++:this.heightSamples[Math.floor(10*n)]||(t=!0,this.heightSamples[Math.floor(10*n)]=!0)}return t}refresh(e,t,i,n,r,o){let s=Oi.indexOf(e)>-1,a=Math.round(t)!=Math.round(this.lineHeight)||this.lineWrapping!=s;if(this.lineWrapping=s,this.lineHeight=t,this.charWidth=i,this.textHeight=n,this.lineLength=r,a){this.heightSamples={};for(let e=0;e<o.length;e++){let t=o[e];t<0?e++:this.heightSamples[Math.floor(10*t)]=!0}}return a}}class wi{constructor(e,t){this.from=e,this.heights=t,this.index=0}get more(){return this.index<this.heights.length}}class yi{constructor(e,t,i,n,r){this.from=e,this.length=t,this.top=i,this.height=n,this._content=r}get type(){return"number"==typeof this._content?t.BlockType.Text:Array.isArray(this._content)?this._content:this._content.type}get to(){return this.from+this.length}get bottom(){return this.top+this.height}get widget(){return this._content instanceof de?this._content.widget:null}get widgetLineBreaks(){return"number"==typeof this._content?this._content:0}join(e){let t=(Array.isArray(this._content)?this._content:[this]).concat(Array.isArray(e._content)?e._content:[e]);return new yi(this.from,this.length+e.length,this.top,this.height+e.height,t)}}var vi;!function(e){e[e.ByPos=0]="ByPos",e[e.ByHeight=1]="ByHeight",e[e.ByPosNoHeight=2]="ByPosNoHeight"}(vi||(vi={}));const xi=.001;class Si{constructor(e,t,i=2){this.length=e,this.height=t,this.flags=i}get outdated(){return(2&this.flags)>0}set outdated(e){this.flags=(e?2:0)|-3&this.flags}setHeight(e){this.height!=e&&(Math.abs(this.height-e)>xi&&(mi=!0),this.height=e)}replace(e,t,i){return Si.of(i)}decomposeLeft(e,t){t.push(this)}decomposeRight(e,t){t.push(this)}applyChanges(e,t,i,n){let r=this,o=i.doc;for(let s=n.length-1;s>=0;s--){let{fromA:a,toA:l,fromB:h,toB:c}=n[s],d=r.lineAt(a,vi.ByPosNoHeight,i.setDoc(t),0,0),u=d.to>=l?d:r.lineAt(l,vi.ByPosNoHeight,i,0,0);for(c+=u.to-l,l=u.to;s>0&&d.from<=n[s-1].toA;)a=n[s-1].fromA,h=n[s-1].fromB,s--,a<d.from&&(d=r.lineAt(a,vi.ByPosNoHeight,i,0,0));h+=d.from-a,a=d.from;let f=Zi.build(i.setDoc(o),e,h,c);r=ki(r,r.replace(a,l,f))}return r.updateHeight(i,0)}static empty(){return new Qi(0,0)}static of(e){if(1==e.length)return e[0];let t=0,i=e.length,n=0,r=0;for(;;)if(t==i)if(n>2*r){let r=e[t-1];r.break?e.splice(--t,1,r.left,null,r.right):e.splice(--t,1,r.left,r.right),i+=1+r.break,n-=r.size}else{if(!(r>2*n))break;{let t=e[i];t.break?e.splice(i,1,t.left,null,t.right):e.splice(i,1,t.left,t.right),i+=2+t.break,r-=t.size}}else if(n<r){let i=e[t++];i&&(n+=i.size)}else{let t=e[--i];t&&(r+=t.size)}let o=0;return null==e[t-1]?(o=1,t--):null==e[t]&&(o=1,i++),new Ci(Si.of(e.slice(0,t)),o,Si.of(e.slice(i)))}}function ki(e,t){return e==t?e:(e.constructor!=t.constructor&&(mi=!0),t)}Si.prototype.size=1;class Ai extends Si{constructor(e,t,i){super(e,t),this.deco=i}blockAt(e,t,i,n){return new yi(n,this.length,i,this.height,this.deco||0)}lineAt(e,t,i,n,r){return this.blockAt(0,i,n,r)}forEachLine(e,t,i,n,r,o){e<=r+this.length&&t>=r&&o(this.blockAt(0,i,n,r))}updateHeight(e,t=0,i=!1,n){return n&&n.from<=t&&n.more&&this.setHeight(n.heights[n.index++]),this.outdated=!1,this}toString(){return`block(${this.length})`}}class Qi extends Ai{constructor(e,t){super(e,t,null),this.collapsed=0,this.widgetHeight=0,this.breaks=0}blockAt(e,t,i,n){return new yi(n,this.length,i,this.height,this.breaks)}replace(e,t,i){let n=i[0];return 1==i.length&&(n instanceof Qi||n instanceof Pi&&4&n.flags)&&Math.abs(this.length-n.length)<10?(n instanceof Pi?n=new Qi(n.length,this.height):n.height=this.height,this.outdated||(n.outdated=!1),n):Si.of(i)}updateHeight(e,t=0,i=!1,n){return n&&n.from<=t&&n.more?this.setHeight(n.heights[n.index++]):(i||this.outdated)&&this.setHeight(Math.max(this.widgetHeight,e.heightForLine(this.length-this.collapsed))+this.breaks*e.lineHeight),this.outdated=!1,this}toString(){return`line(${this.length}${this.collapsed?-this.collapsed:""}${this.widgetHeight?":"+this.widgetHeight:""})`}}class Pi extends Si{constructor(e){super(e,0)}heightMetrics(e,t){let i,n=e.doc.lineAt(t).number,r=e.doc.lineAt(t+this.length).number,o=r-n+1,s=0;if(e.lineWrapping){let t=Math.min(this.height,e.lineHeight*o);i=t/o,this.length>o+1&&(s=(this.height-t)/(this.length-o-1))}else i=this.height/o;return{firstLine:n,lastLine:r,perLine:i,perChar:s}}blockAt(e,t,i,n){let{firstLine:r,lastLine:o,perLine:s,perChar:a}=this.heightMetrics(t,n);if(t.lineWrapping){let r=n+(e<t.lineHeight?0:Math.round(Math.max(0,Math.min(1,(e-i)/this.height))*this.length)),o=t.doc.lineAt(r),l=s+o.length*a,h=Math.max(i,e-l/2);return new yi(o.from,o.length,h,l,0)}{let n=Math.max(0,Math.min(o-r,Math.floor((e-i)/s))),{from:a,length:l}=t.doc.line(r+n);return new yi(a,l,i+s*n,s,0)}}lineAt(e,t,i,n,r){if(t==vi.ByHeight)return this.blockAt(e,i,n,r);if(t==vi.ByPosNoHeight){let{from:t,to:n}=i.doc.lineAt(e);return new yi(t,n-t,0,0,0)}let{firstLine:o,perLine:s,perChar:a}=this.heightMetrics(i,r),l=i.doc.lineAt(e),h=s+l.length*a,c=l.number-o,d=n+s*c+a*(l.from-r-c);return new yi(l.from,l.length,Math.max(n,Math.min(d,n+this.height-h)),h,0)}forEachLine(e,t,i,n,r,o){e=Math.max(e,r),t=Math.min(t,r+this.length);let{firstLine:s,perLine:a,perChar:l}=this.heightMetrics(i,r);for(let h=e,c=n;h<=t;){let t=i.doc.lineAt(h);if(h==e){let i=t.number-s;c+=a*i+l*(e-r-i)}let n=a+l*t.length;o(new yi(t.from,t.length,c,n,0)),c+=n,h=t.to+1}}replace(e,t,i){let n=this.length-t;if(n>0){let e=i[i.length-1];e instanceof Pi?i[i.length-1]=new Pi(e.length+n):i.push(null,new Pi(n-1))}if(e>0){let t=i[0];t instanceof Pi?i[0]=new Pi(e+t.length):i.unshift(new Pi(e-1),null)}return Si.of(i)}decomposeLeft(e,t){t.push(new Pi(e-1),null)}decomposeRight(e,t){t.push(null,new Pi(this.length-e-1))}updateHeight(e,t=0,i=!1,n){let r=t+this.length;if(n&&n.from<=t+this.length&&n.more){let i=[],o=Math.max(t,n.from),s=-1;for(n.from>t&&i.push(new Pi(n.from-t-1).updateHeight(e,t));o<=r&&n.more;){let t=e.doc.lineAt(o).length;i.length&&i.push(null);let r=n.heights[n.index++];-1==s?s=r:Math.abs(r-s)>=xi&&(s=-2);let a=new Qi(t,r);a.outdated=!1,i.push(a),o+=t+1}o<=r&&i.push(null,new Pi(r-o).updateHeight(e,o));let a=Si.of(i);return(s<0||Math.abs(a.height-this.height)>=xi||Math.abs(s-this.heightMetrics(e,t).perLine)>=xi)&&(mi=!0),ki(this,a)}return(i||this.outdated)&&(this.setHeight(e.heightForGap(t,t+this.length)),this.outdated=!1),this}toString(){return`gap(${this.length})`}}class Ci extends Si{constructor(e,t,i){super(e.length+t+i.length,e.height+i.height,t|(e.outdated||i.outdated?2:0)),this.left=e,this.right=i,this.size=e.size+i.size}get break(){return 1&this.flags}blockAt(e,t,i,n){let r=i+this.left.height;return e<r?this.left.blockAt(e,t,i,n):this.right.blockAt(e,t,r,n+this.left.length+this.break)}lineAt(e,t,i,n,r){let o=n+this.left.height,s=r+this.left.length+this.break,a=t==vi.ByHeight?e<o:e<s,l=a?this.left.lineAt(e,t,i,n,r):this.right.lineAt(e,t,i,o,s);if(this.break||(a?l.to<s:l.from>s))return l;let h=t==vi.ByPosNoHeight?vi.ByPosNoHeight:vi.ByPos;return a?l.join(this.right.lineAt(s,h,i,o,s)):this.left.lineAt(s,h,i,n,r).join(l)}forEachLine(e,t,i,n,r,o){let s=n+this.left.height,a=r+this.left.length+this.break;if(this.break)e<a&&this.left.forEachLine(e,t,i,n,r,o),t>=a&&this.right.forEachLine(e,t,i,s,a,o);else{let l=this.lineAt(a,vi.ByPos,i,n,r);e<l.from&&this.left.forEachLine(e,l.from-1,i,n,r,o),l.to>=e&&l.from<=t&&o(l),t>l.to&&this.right.forEachLine(l.to+1,t,i,s,a,o)}}replace(e,t,i){let n=this.left.length+this.break;if(t<n)return this.balanced(this.left.replace(e,t,i),this.right);if(e>this.left.length)return this.balanced(this.left,this.right.replace(e-n,t-n,i));let r=[];e>0&&this.decomposeLeft(e,r);let o=r.length;for(let e of i)r.push(e);if(e>0&&$i(r,o-1),t<this.length){let e=r.length;this.decomposeRight(t,r),$i(r,e)}return Si.of(r)}decomposeLeft(e,t){let i=this.left.length;if(e<=i)return this.left.decomposeLeft(e,t);t.push(this.left),this.break&&(i++,e>=i&&t.push(null)),e>i&&this.right.decomposeLeft(e-i,t)}decomposeRight(e,t){let i=this.left.length,n=i+this.break;if(e>=n)return this.right.decomposeRight(e-n,t);e<i&&this.left.decomposeRight(e,t),this.break&&e<n&&t.push(null),t.push(this.right)}balanced(e,t){return e.size>2*t.size||t.size>2*e.size?Si.of(this.break?[e,null,t]:[e,t]):(this.left=ki(this.left,e),this.right=ki(this.right,t),this.setHeight(e.height+t.height),this.outdated=e.outdated||t.outdated,this.size=e.size+t.size,this.length=e.length+this.break+t.length,this)}updateHeight(e,t=0,i=!1,n){let{left:r,right:o}=this,s=t+r.length+this.break,a=null;return n&&n.from<=t+r.length&&n.more?a=r=r.updateHeight(e,t,i,n):r.updateHeight(e,t,i),n&&n.from<=s+o.length&&n.more?a=o=o.updateHeight(e,s,i,n):o.updateHeight(e,s,i),a?this.balanced(r,o):(this.height=this.left.height+this.right.height,this.outdated=!1,this)}toString(){return this.left+(this.break?" ":"-")+this.right}}function $i(e,t){let i,n;null==e[t]&&(i=e[t-1])instanceof Pi&&(n=e[t+1])instanceof Pi&&e.splice(t-1,3,new Pi(i.length+1+n.length))}class Zi{constructor(e,t){this.pos=e,this.oracle=t,this.nodes=[],this.lineStart=-1,this.lineEnd=-1,this.covering=null,this.writtenTo=e}get isCovered(){return this.covering&&this.nodes[this.nodes.length-1]==this.covering}span(e,t){if(this.lineStart>-1){let e=Math.min(t,this.lineEnd),i=this.nodes[this.nodes.length-1];i instanceof Qi?i.length+=e-this.pos:(e>this.pos||!this.isCovered)&&this.nodes.push(new Qi(e-this.pos,-1)),this.writtenTo=e,t>e&&(this.nodes.push(null),this.writtenTo++,this.lineStart=-1)}this.pos=t}point(e,t,i){if(e<t||i.heightRelevant){let n=i.widget?i.widget.estimatedHeight:0,r=i.widget?i.widget.lineBreaks:0;n<0&&(n=this.oracle.lineHeight);let o=t-e;i.block?this.addBlock(new Ai(o,n,i)):(o||r||n>=5)&&this.addLineDeco(n,r,o)}else t>e&&this.span(e,t);this.lineEnd>-1&&this.lineEnd<this.pos&&(this.lineEnd=this.oracle.doc.lineAt(this.pos).to)}enterLine(){if(this.lineStart>-1)return;let{from:e,to:t}=this.oracle.doc.lineAt(this.pos);this.lineStart=e,this.lineEnd=t,this.writtenTo<e&&((this.writtenTo<e-1||null==this.nodes[this.nodes.length-1])&&this.nodes.push(this.blankContent(this.writtenTo,e-1)),this.nodes.push(null)),this.pos>e&&this.nodes.push(new Qi(this.pos-e,-1)),this.writtenTo=this.pos}blankContent(e,t){let i=new Pi(t-e);return this.oracle.doc.lineAt(e).to==t&&(i.flags|=4),i}ensureLine(){this.enterLine();let e=this.nodes.length?this.nodes[this.nodes.length-1]:null;if(e instanceof Qi)return e;let t=new Qi(0,-1);return this.nodes.push(t),t}addBlock(e){this.enterLine();let t=e.deco;t&&t.startSide>0&&!this.isCovered&&this.ensureLine(),this.nodes.push(e),this.writtenTo=this.pos=this.pos+e.length,t&&t.endSide>0&&(this.covering=e)}addLineDeco(e,t,i){let n=this.ensureLine();n.length+=i,n.collapsed+=i,n.widgetHeight=Math.max(n.widgetHeight,e),n.breaks+=t,this.writtenTo=this.pos=this.pos+i}finish(e){let t=0==this.nodes.length?null:this.nodes[this.nodes.length-1];!(this.lineStart>-1)||t instanceof Qi||this.isCovered?(this.writtenTo<this.pos||null==t)&&this.nodes.push(this.blankContent(this.writtenTo,this.pos)):this.nodes.push(new Qi(0,-1));let i=e;for(let e of this.nodes)e instanceof Qi&&e.updateHeight(this.oracle,i),i+=e?e.length:1;return this.nodes}static build(e,t,i,r){let o=new Zi(i,e);return n.RangeSet.spans(t,i,r,o,0),o.finish(i)}}class Ti{constructor(){this.changes=[]}compareRange(){}comparePoint(e,t,i,n){(e<t||i&&i.heightRelevant||n&&n.heightRelevant)&&fe(e,t,this.changes,5)}}function Mi(e,t){let i=e.getBoundingClientRect(),n=e.ownerDocument,r=n.defaultView||window,o=Math.max(0,i.left),s=Math.min(r.innerWidth,i.right),a=Math.max(0,i.top),l=Math.min(r.innerHeight,i.bottom);for(let t=e.parentNode;t&&t!=n.body;)if(1==t.nodeType){let i=t,n=window.getComputedStyle(i);if((i.scrollHeight>i.clientHeight||i.scrollWidth>i.clientWidth)&&"visible"!=n.overflow){let n=i.getBoundingClientRect();o=Math.max(o,n.left),s=Math.min(s,n.right),a=Math.max(a,n.top),l=Math.min(t==e.parentNode?r.innerHeight:l,n.bottom)}t="absolute"==n.position||"fixed"==n.position?i.offsetParent:i.parentNode}else{if(11!=t.nodeType)break;t=t.host}return{left:o-i.left,right:Math.max(o,s)-i.left,top:a-(i.top+t),bottom:Math.max(a,l)-(i.top+t)}}function Ei(e,t){let i=e.getBoundingClientRect();return{left:0,right:i.right-i.left,top:t,bottom:i.bottom-(i.top+t)}}class Xi{constructor(e,t,i,n){this.from=e,this.to=t,this.size=i,this.displaySize=n}static same(e,t){if(e.length!=t.length)return!1;for(let i=0;i<e.length;i++){let n=e[i],r=t[i];if(n.from!=r.from||n.to!=r.to||n.size!=r.size)return!1}return!0}draw(e,t){return le.replace({widget:new Ri(this.displaySize*(t?e.scaleY:e.scaleX),t)}).range(this.from,this.to)}}class Ri extends oe{constructor(e,t){super(),this.size=e,this.vertical=t}eq(e){return e.size==this.size&&e.vertical==this.vertical}toDOM(){let e=document.createElement("div");return this.vertical?e.style.height=this.size+"px":(e.style.width=this.size+"px",e.style.height="2px",e.style.display="inline-block"),e}get estimatedHeight(){return this.vertical?this.size:-1}}class _i{constructor(e){this.state=e,this.pixelViewport={left:0,right:window.innerWidth,top:0,bottom:0},this.inView=!0,this.paddingTop=0,this.paddingBottom=0,this.contentDOMWidth=0,this.contentDOMHeight=0,this.editorHeight=0,this.editorWidth=0,this.scrollTop=0,this.scrolledToBottom=!1,this.scaleX=1,this.scaleY=1,this.scrollAnchorPos=0,this.scrollAnchorHeight=-1,this.scaler=Di,this.scrollTarget=null,this.printing=!1,this.mustMeasureContent=!0,this.defaultTextDirection=t.Direction.LTR,this.visibleRanges=[],this.mustEnforceCursorAssoc=!1;let i=e.facet(at).some((e=>"function"!=typeof e&&"cm-lineWrapping"==e.class));this.heightOracle=new bi(i),this.stateDeco=e.facet(lt).filter((e=>"function"!=typeof e)),this.heightMap=Si.empty().applyChanges(this.stateDeco,n.Text.empty,this.heightOracle.setDoc(e.doc),[new mt(0,0,0,e.doc.length)]);for(let e=0;e<2&&(this.viewport=this.getViewport(0,null),this.updateForViewport());e++);this.updateViewportLines(),this.lineGaps=this.ensureLineGaps([]),this.lineGapDeco=le.set(this.lineGaps.map((e=>e.draw(this,!1)))),this.computeVisibleRanges()}updateForViewport(){let e=[this.viewport],{main:t}=this.state.selection;for(let i=0;i<=1;i++){let n=i?t.head:t.anchor;if(!e.some((({from:e,to:t})=>n>=e&&n<=t))){let{from:t,to:i}=this.lineBlockAt(n);e.push(new Vi(t,i))}}return this.viewports=e.sort(((e,t)=>e.from-t.from)),this.updateScaler()}updateScaler(){let e=this.scaler;return this.scaler=this.heightMap.height<=7e6?Di:new zi(this.heightOracle,this.heightMap,this.viewports),e.eq(this.scaler)?0:2}updateViewportLines(){this.viewportLines=[],this.heightMap.forEachLine(this.viewport.from,this.viewport.to,this.heightOracle.setDoc(this.state.doc),0,0,(e=>{this.viewportLines.push(Li(e,this.scaler))}))}update(e,t=null){this.state=e.state;let i=this.stateDeco;this.stateDeco=this.state.facet(lt).filter((e=>"function"!=typeof e));let r=e.changedRanges,o=mt.extendWithRanges(r,function(e,t,i){let r=new Ti;return n.RangeSet.compare(e,t,i,r,0),r.changes}(i,this.stateDeco,e?e.changes:n.ChangeSet.empty(this.state.doc.length))),s=this.heightMap.height,a=this.scrolledToBottom?null:this.scrollAnchorAt(this.scrollTop);gi(),this.heightMap=this.heightMap.applyChanges(this.stateDeco,e.startState.doc,this.heightOracle.setDoc(this.state.doc),o),(this.heightMap.height!=s||mi)&&(e.flags|=2),a?(this.scrollAnchorPos=e.changes.mapPos(a.from,-1),this.scrollAnchorHeight=a.top):(this.scrollAnchorPos=-1,this.scrollAnchorHeight=this.heightMap.height);let l=o.length?this.mapViewport(this.viewport,e.changes):this.viewport;(t&&(t.range.head<l.from||t.range.head>l.to)||!this.viewportIsAppropriate(l))&&(l=this.getViewport(0,t));let h=l.from!=this.viewport.from||l.to!=this.viewport.to;this.viewport=l,e.flags|=this.updateForViewport(),(h||!e.changes.empty||2&e.flags)&&this.updateViewportLines(),(this.lineGaps.length||this.viewport.to-this.viewport.from>4e3)&&this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps,e.changes))),e.flags|=this.computeVisibleRanges(),t&&(this.scrollTarget=t),!this.mustEnforceCursorAssoc&&e.selectionSet&&e.view.lineWrapping&&e.state.selection.main.empty&&e.state.selection.main.assoc&&!e.state.facet(Ne)&&(this.mustEnforceCursorAssoc=!0)}measure(e){let i=e.contentDOM,r=window.getComputedStyle(i),o=this.heightOracle,s=r.whiteSpace;this.defaultTextDirection="rtl"==r.direction?t.Direction.RTL:t.Direction.LTR;let a=this.heightOracle.mustRefreshForWrapping(s),l=i.getBoundingClientRect(),h=a||this.mustMeasureContent||this.contentDOMHeight!=l.height;this.contentDOMHeight=l.height,this.mustMeasureContent=!1;let c=0,d=0;if(l.width&&l.height){let{scaleX:e,scaleY:t}=g(i,l);(e>.005&&Math.abs(this.scaleX-e)>.005||t>.005&&Math.abs(this.scaleY-t)>.005)&&(this.scaleX=e,this.scaleY=t,c|=8,a=h=!0)}let u=(parseInt(r.paddingTop)||0)*this.scaleY,f=(parseInt(r.paddingBottom)||0)*this.scaleY;this.paddingTop==u&&this.paddingBottom==f||(this.paddingTop=u,this.paddingBottom=f,c|=10),this.editorWidth!=e.scrollDOM.clientWidth&&(o.lineWrapping&&(h=!0),this.editorWidth=e.scrollDOM.clientWidth,c|=8);let p=e.scrollDOM.scrollTop*this.scaleY;this.scrollTop!=p&&(this.scrollAnchorHeight=-1,this.scrollTop=p),this.scrolledToBottom=A(e.scrollDOM);let O=(this.printing?Ei:Mi)(i,this.paddingTop),m=O.top-this.pixelViewport.top,b=O.bottom-this.pixelViewport.bottom;this.pixelViewport=O;let w=this.pixelViewport.bottom>this.pixelViewport.top&&this.pixelViewport.right>this.pixelViewport.left;if(w!=this.inView&&(this.inView=w,w&&(h=!0)),!this.inView&&!this.scrollTarget)return 0;let y=l.width;if(this.contentDOMWidth==y&&this.editorHeight==e.scrollDOM.clientHeight||(this.contentDOMWidth=l.width,this.editorHeight=e.scrollDOM.clientHeight,c|=8),h){let t=e.docView.measureVisibleLineHeights(this.viewport);if(o.mustRefreshForHeights(t)&&(a=!0),a||o.lineWrapping&&Math.abs(y-this.contentDOMWidth)>o.charWidth){let{lineHeight:i,charWidth:n,textHeight:r}=e.docView.measureTextSize();a=i>0&&o.refresh(s,i,n,r,y/n,t),a&&(e.docView.minWidth=0,c|=8)}m>0&&b>0?d=Math.max(m,b):m<0&&b<0&&(d=Math.min(m,b)),gi();for(let i of this.viewports){let r=i.from==this.viewport.from?t:e.docView.measureVisibleLineHeights(i);this.heightMap=(a?Si.empty().applyChanges(this.stateDeco,n.Text.empty,this.heightOracle,[new mt(0,0,0,e.state.doc.length)]):this.heightMap).updateHeight(o,0,a,new wi(i.from,r))}mi&&(c|=2)}let v=!this.viewportIsAppropriate(this.viewport,d)||this.scrollTarget&&(this.scrollTarget.range.head<this.viewport.from||this.scrollTarget.range.head>this.viewport.to);return v&&(2&c&&(c|=this.updateScaler()),this.viewport=this.getViewport(d,this.scrollTarget),c|=this.updateForViewport()),(2&c||v)&&this.updateViewportLines(),(this.lineGaps.length||this.viewport.to-this.viewport.from>4e3)&&this.updateLineGaps(this.ensureLineGaps(a?[]:this.lineGaps,e)),c|=this.computeVisibleRanges(),this.mustEnforceCursorAssoc&&(this.mustEnforceCursorAssoc=!1,e.docView.enforceCursorAssoc()),c}get visibleTop(){return this.scaler.fromDOM(this.pixelViewport.top)}get visibleBottom(){return this.scaler.fromDOM(this.pixelViewport.bottom)}getViewport(e,t){let i=.5-Math.max(-.5,Math.min(.5,e/1e3/2)),n=this.heightMap,r=this.heightOracle,{visibleTop:o,visibleBottom:s}=this,a=new Vi(n.lineAt(o-1e3*i,vi.ByHeight,r,0,0).from,n.lineAt(s+1e3*(1-i),vi.ByHeight,r,0,0).to);if(t){let{head:e}=t.range;if(e<a.from||e>a.to){let i,o=Math.min(this.editorHeight,this.pixelViewport.bottom-this.pixelViewport.top),s=n.lineAt(e,vi.ByPos,r,0,0);i="center"==t.y?(s.top+s.bottom)/2-o/2:"start"==t.y||"nearest"==t.y&&e<a.from?s.top:s.bottom-o,a=new Vi(n.lineAt(i-500,vi.ByHeight,r,0,0).from,n.lineAt(i+o+500,vi.ByHeight,r,0,0).to)}}return a}mapViewport(e,t){let i=t.mapPos(e.from,-1),n=t.mapPos(e.to,1);return new Vi(this.heightMap.lineAt(i,vi.ByPos,this.heightOracle,0,0).from,this.heightMap.lineAt(n,vi.ByPos,this.heightOracle,0,0).to)}viewportIsAppropriate({from:e,to:t},i=0){if(!this.inView)return!0;let{top:n}=this.heightMap.lineAt(e,vi.ByPos,this.heightOracle,0,0),{bottom:r}=this.heightMap.lineAt(t,vi.ByPos,this.heightOracle,0,0),{visibleTop:o,visibleBottom:s}=this;return(0==e||n<=o-Math.max(10,Math.min(-i,250)))&&(t==this.state.doc.length||r>=s+Math.max(10,Math.min(i,250)))&&n>o-2e3&&r<s+2e3}mapLineGaps(e,t){if(!e.length||t.empty)return e;let i=[];for(let n of e)t.touchesRange(n.from,n.to)||i.push(new Xi(t.mapPos(n.from),t.mapPos(n.to),n.size,n.displaySize));return i}ensureLineGaps(e,i){let r=this.heightOracle.lineWrapping,o=r?1e4:2e3,s=o>>1,a=o<<1;if(this.defaultTextDirection!=t.Direction.LTR&&!r)return[];let l=[],h=(t,o,a,c)=>{if(o-t<s)return;let d=this.state.selection.main,u=[d.from];d.empty||u.push(d.to);for(let e of u)if(e>t&&e<o)return h(t,e-10,a,c),void h(e+10,o,a,c);let f=function(e,t){for(let i of e)if(t(i))return i}(e,(e=>e.from>=a.from&&e.to<=a.to&&Math.abs(e.from-t)<s&&Math.abs(e.to-o)<s&&!u.some((t=>e.from<t&&e.to>t))));if(!f){if(o<a.to&&i&&r&&i.visibleRanges.some((e=>e.from<=o&&e.to>=o))){let e=i.moveToLineBoundary(n.EditorSelection.cursor(o),!1,!0).head;e>t&&(o=e)}let e=this.gapSize(a,t,o,c);f=new Xi(t,o,e,r||e<2e6?e:2e6)}l.push(f)},c=i=>{if(i.length<a||i.type!=t.BlockType.Text)return;let s=function(e,t,i){let r=[],o=e,s=0;return n.RangeSet.spans(i,e,t,{span(){},point(e,t){e>o&&(r.push({from:o,to:e}),s+=e-o),o=t}},20),o<t&&(r.push({from:o,to:t}),s+=t-o),{total:s,ranges:r}}(i.from,i.to,this.stateDeco);if(s.total<a)return;let l,c,d=this.scrollTarget?this.scrollTarget.range.head:null;if(r){let e,t,n=o/this.heightOracle.lineLength*this.heightOracle.lineHeight;if(null!=d){let r=Bi(s,d),o=((this.visibleBottom-this.visibleTop)/2+n)/i.height;e=r-o,t=r+o}else e=(this.visibleTop-i.top-n)/i.height,t=(this.visibleBottom-i.top+n)/i.height;l=qi(s,e),c=qi(s,t)}else{let t=s.total*this.heightOracle.charWidth,n=o*this.heightOracle.charWidth,r=0;if(t>2e6)for(let t of e)t.from>=i.from&&t.from<i.to&&t.size!=t.displaySize&&t.from*this.heightOracle.charWidth+r<this.pixelViewport.left&&(r=t.size-t.displaySize);let a,h,u=this.pixelViewport.left+r,f=this.pixelViewport.right+r;if(null!=d){let e=Bi(s,d),i=((f-u)/2+n)/t;a=e-i,h=e+i}else a=(u-n)/t,h=(f+n)/t;l=qi(s,a),c=qi(s,h)}l>i.from&&h(i.from,l,i,s),c<i.to&&h(c,i.to,i,s)};for(let e of this.viewportLines)Array.isArray(e.type)?e.type.forEach(c):c(e);return l}gapSize(e,t,i,n){let r=Bi(n,i)-Bi(n,t);return this.heightOracle.lineWrapping?e.height*r:n.total*this.heightOracle.charWidth*r}updateLineGaps(e){Xi.same(e,this.lineGaps)||(this.lineGaps=e,this.lineGapDeco=le.set(e.map((e=>e.draw(this,this.heightOracle.lineWrapping)))))}computeVisibleRanges(){let e=this.stateDeco;this.lineGaps.length&&(e=e.concat(this.lineGapDeco));let t=[];n.RangeSet.spans(e,this.viewport.from,this.viewport.to,{span(e,i){t.push({from:e,to:i})},point(){}},20);let i=t.length!=this.visibleRanges.length||this.visibleRanges.some(((e,i)=>e.from!=t[i].from||e.to!=t[i].to));return this.visibleRanges=t,i?4:0}lineBlockAt(e){return e>=this.viewport.from&&e<=this.viewport.to&&this.viewportLines.find((t=>t.from<=e&&t.to>=e))||Li(this.heightMap.lineAt(e,vi.ByPos,this.heightOracle,0,0),this.scaler)}lineBlockAtHeight(e){return e>=this.viewportLines[0].top&&e<=this.viewportLines[this.viewportLines.length-1].bottom&&this.viewportLines.find((t=>t.top<=e&&t.bottom>=e))||Li(this.heightMap.lineAt(this.scaler.fromDOM(e),vi.ByHeight,this.heightOracle,0,0),this.scaler)}scrollAnchorAt(e){let t=this.lineBlockAtHeight(e+8);return t.from>=this.viewport.from||this.viewportLines[0].top-e>200?t:this.viewportLines[0]}elementAtHeight(e){return Li(this.heightMap.blockAt(this.scaler.fromDOM(e),this.heightOracle,0,0),this.scaler)}get docHeight(){return this.scaler.toDOM(this.heightMap.height)}get contentHeight(){return this.docHeight+this.paddingTop+this.paddingBottom}}class Vi{constructor(e,t){this.from=e,this.to=t}}function qi({total:e,ranges:t},i){if(i<=0)return t[0].from;if(i>=1)return t[t.length-1].to;let n=Math.floor(e*i);for(let e=0;;e++){let{from:i,to:r}=t[e],o=r-i;if(n<=o)return i+n;n-=o}}function Bi(e,t){let i=0;for(let{from:n,to:r}of e.ranges){if(t<=r){i+=t-n;break}i+=r-n}return i/e.total}const Di={toDOM:e=>e,fromDOM:e=>e,scale:1,eq(e){return e==this}};class zi{constructor(e,t,i){let n=0,r=0,o=0;this.viewports=i.map((({from:i,to:r})=>{let o=t.lineAt(i,vi.ByPos,e,0,0).top,s=t.lineAt(r,vi.ByPos,e,0,0).bottom;return n+=s-o,{from:i,to:r,top:o,bottom:s,domTop:0,domBottom:0}})),this.scale=(7e6-n)/(t.height-n);for(let e of this.viewports)e.domTop=o+(e.top-r)*this.scale,o=e.domBottom=e.domTop+(e.bottom-e.top),r=e.bottom}toDOM(e){for(let t=0,i=0,n=0;;t++){let r=t<this.viewports.length?this.viewports[t]:null;if(!r||e<r.top)return n+(e-i)*this.scale;if(e<=r.bottom)return r.domTop+(e-r.top);i=r.bottom,n=r.domBottom}}fromDOM(e){for(let t=0,i=0,n=0;;t++){let r=t<this.viewports.length?this.viewports[t]:null;if(!r||e<r.domTop)return i+(e-n)/this.scale;if(e<=r.domBottom)return r.top+(e-r.domTop);i=r.bottom,n=r.domBottom}}eq(e){return e instanceof zi&&this.scale==e.scale&&this.viewports.length==e.viewports.length&&this.viewports.every(((t,i)=>t.from==e.viewports[i].from&&t.to==e.viewports[i].to))}}function Li(e,t){if(1==t.scale)return e;let i=t.toDOM(e.top),n=t.toDOM(e.bottom);return new yi(e.from,e.length,i,n-i,Array.isArray(e._content)?e._content.map((e=>Li(e,t))):e._content)}const ji=n.Facet.define({combine:e=>e.join(" ")}),Wi=n.Facet.define({combine:e=>e.indexOf(!0)>-1}),Yi=r.StyleModule.newName(),Ii=r.StyleModule.newName(),Gi=r.StyleModule.newName(),Ui={"&light":"."+Ii,"&dark":"."+Gi};function Ni(e,t,i){return new r.StyleModule(t,{finish:t=>/&/.test(t)?t.replace(/&\w*/,(t=>{if("&"==t)return e;if(!i||!i[t])throw new RangeError(`Unsupported selector: ${t}`);return i[t]})):e+" "+t})}const Fi=Ni("."+Yi,{"&":{position:"relative !important",boxSizing:"border-box","&.cm-focused":{outline:"1px dotted #212121"},display:"flex !important",flexDirection:"column"},".cm-scroller":{display:"flex !important",alignItems:"flex-start !important",fontFamily:"monospace",lineHeight:1.4,height:"100%",overflowX:"auto",position:"relative",zIndex:0,overflowAnchor:"none"},".cm-content":{margin:0,flexGrow:2,flexShrink:0,display:"block",whiteSpace:"pre",wordWrap:"normal",boxSizing:"border-box",minHeight:"100%",padding:"4px 0",outline:"none","&[contenteditable=true]":{WebkitUserModify:"read-write-plaintext-only"}},".cm-lineWrapping":{whiteSpace_fallback:"pre-wrap",whiteSpace:"break-spaces",wordBreak:"break-word",overflowWrap:"anywhere",flexShrink:1},"&light .cm-content":{caretColor:"black"},"&dark .cm-content":{caretColor:"white"},".cm-line":{display:"block",padding:"0 2px 0 6px"},".cm-layer":{position:"absolute",left:0,top:0,contain:"size style","& > *":{position:"absolute"}},"&light .cm-selectionBackground":{background:"#d9d9d9"},"&dark .cm-selectionBackground":{background:"#222"},"&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground":{background:"#d7d4f0"},"&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground":{background:"#233"},".cm-cursorLayer":{pointerEvents:"none"},"&.cm-focused > .cm-scroller > .cm-cursorLayer":{animation:"steps(1) cm-blink 1.2s infinite"},"@keyframes cm-blink":{"0%":{},"50%":{opacity:0},"100%":{}},"@keyframes cm-blink2":{"0%":{},"50%":{opacity:0},"100%":{}},".cm-cursor, .cm-dropCursor":{borderLeft:"1.2px solid black",marginLeft:"-0.6px",pointerEvents:"none"},".cm-cursor":{display:"none"},"&dark .cm-cursor":{borderLeftColor:"#ddd"},".cm-dropCursor":{position:"absolute"},"&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor":{display:"block"},".cm-iso":{unicodeBidi:"isolate"},".cm-announced":{position:"fixed",top:"-10000px"},"@media print":{".cm-announced":{display:"none"}},"&light .cm-activeLine":{backgroundColor:"#cceeff44"},"&dark .cm-activeLine":{backgroundColor:"#99eeff33"},"&light .cm-specialChar":{color:"red"},"&dark .cm-specialChar":{color:"#f78"},".cm-gutters":{flexShrink:0,display:"flex",height:"100%",boxSizing:"border-box",insetInlineStart:0,zIndex:200},"&light .cm-gutters":{backgroundColor:"#f5f5f5",color:"#6c6c6c",borderRight:"1px solid #ddd"},"&dark .cm-gutters":{backgroundColor:"#333338",color:"#ccc"},".cm-gutter":{display:"flex !important",flexDirection:"column",flexShrink:0,boxSizing:"border-box",minHeight:"100%",overflow:"hidden"},".cm-gutterElement":{boxSizing:"border-box"},".cm-lineNumbers .cm-gutterElement":{padding:"0 3px 0 5px",minWidth:"20px",textAlign:"right",whiteSpace:"nowrap"},"&light .cm-activeLineGutter":{backgroundColor:"#e2f2ff"},"&dark .cm-activeLineGutter":{backgroundColor:"#222227"},".cm-panels":{boxSizing:"border-box",position:"sticky",left:0,right:0,zIndex:300},"&light .cm-panels":{backgroundColor:"#f5f5f5",color:"black"},"&light .cm-panels-top":{borderBottom:"1px solid #ddd"},"&light .cm-panels-bottom":{borderTop:"1px solid #ddd"},"&dark .cm-panels":{backgroundColor:"#333338",color:"white"},".cm-tab":{display:"inline-block",overflow:"hidden",verticalAlign:"bottom"},".cm-widgetBuffer":{verticalAlign:"text-top",height:"1em",width:0,display:"inline"},".cm-placeholder":{color:"#888",display:"inline-block",verticalAlign:"top"},".cm-highlightSpace":{backgroundImage:"radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)",backgroundPosition:"center"},".cm-highlightTab":{backgroundImage:'url(\'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>\')',backgroundSize:"auto 100%",backgroundPosition:"right 90%",backgroundRepeat:"no-repeat"},".cm-trailingSpace":{backgroundColor:"#ff332255"},".cm-button":{verticalAlign:"middle",color:"inherit",fontSize:"70%",padding:".2em 1em",borderRadius:"1px"},"&light .cm-button":{backgroundImage:"linear-gradient(#eff1f5, #d9d9df)",border:"1px solid #888","&:active":{backgroundImage:"linear-gradient(#b4b4b4, #d0d3d6)"}},"&dark .cm-button":{backgroundImage:"linear-gradient(#393939, #111)",border:"1px solid #888","&:active":{backgroundImage:"linear-gradient(#111, #333)"}},".cm-textfield":{verticalAlign:"middle",color:"inherit",fontSize:"70%",border:"1px solid silver",padding:".2em .5em"},"&light .cm-textfield":{backgroundColor:"white"},"&dark .cm-textfield":{border:"1px solid #555",backgroundColor:"inherit"}},Ui),Hi={childList:!0,characterData:!0,subtree:!0,attributes:!0,characterDataOldValue:!0},Ki=I.ie&&I.ie_version<=11;class Ji{constructor(e){this.view=e,this.active=!1,this.editContext=null,this.selectionRange=new b,this.selectionChanged=!1,this.delayedFlush=-1,this.resizeTimeout=-1,this.queue=[],this.delayedAndroidKey=null,this.flushingAndroidKey=-1,this.lastChange=0,this.scrollTargets=[],this.intersection=null,this.resizeScroll=null,this.intersecting=!1,this.gapIntersection=null,this.gaps=[],this.printQuery=null,this.parentCheck=-1,this.dom=e.contentDOM,this.observer=new MutationObserver((t=>{for(let e of t)this.queue.push(e);(I.ie&&I.ie_version<=11||I.ios&&e.composing)&&t.some((e=>"childList"==e.type&&e.removedNodes.length||"characterData"==e.type&&e.oldValue.length>e.target.nodeValue.length))?this.flushSoon():this.flush()})),!window.EditContext||!1===e.constructor.EDIT_CONTEXT||I.chrome&&I.chrome_version<126||(this.editContext=new nn(e),e.state.facet(tt)&&(e.contentDOM.editContext=this.editContext.editContext)),Ki&&(this.onCharData=e=>{this.queue.push({target:e.target,type:"characterData",oldValue:e.prevValue}),this.flushSoon()}),this.onSelectionChange=this.onSelectionChange.bind(this),this.onResize=this.onResize.bind(this),this.onPrint=this.onPrint.bind(this),this.onScroll=this.onScroll.bind(this),window.matchMedia&&(this.printQuery=window.matchMedia("print")),"function"==typeof ResizeObserver&&(this.resizeScroll=new ResizeObserver((()=>{var e;(null===(e=this.view.docView)||void 0===e?void 0:e.lastUpdate)<Date.now()-75&&this.onResize()})),this.resizeScroll.observe(e.scrollDOM)),this.addWindowListeners(this.win=e.win),this.start(),"function"==typeof IntersectionObserver&&(this.intersection=new IntersectionObserver((e=>{this.parentCheck<0&&(this.parentCheck=setTimeout(this.listenForScroll.bind(this),1e3)),e.length>0&&e[e.length-1].intersectionRatio>0!=this.intersecting&&(this.intersecting=!this.intersecting,this.intersecting!=this.view.inView&&this.onScrollChanged(document.createEvent("Event")))}),{threshold:[0,.001]}),this.intersection.observe(this.dom),this.gapIntersection=new IntersectionObserver((e=>{e.length>0&&e[e.length-1].intersectionRatio>0&&this.onScrollChanged(document.createEvent("Event"))}),{})),this.listenForScroll(),this.readSelectionRange()}onScrollChanged(e){this.view.inputState.runHandlers("scroll",e),this.intersecting&&this.view.measure()}onScroll(e){this.intersecting&&this.flush(!1),this.editContext&&this.view.requestMeasure(this.editContext.measureReq),this.onScrollChanged(e)}onResize(){this.resizeTimeout<0&&(this.resizeTimeout=setTimeout((()=>{this.resizeTimeout=-1,this.view.requestMeasure()}),50))}onPrint(e){("change"!=e.type&&e.type||e.matches)&&(this.view.viewState.printing=!0,this.view.measure(),setTimeout((()=>{this.view.viewState.printing=!1,this.view.requestMeasure()}),500))}updateGaps(e){if(this.gapIntersection&&(e.length!=this.gaps.length||this.gaps.some(((t,i)=>t!=e[i])))){this.gapIntersection.disconnect();for(let t of e)this.gapIntersection.observe(t);this.gaps=e}}onSelectionChange(e){let t=this.selectionChanged;if(!this.readSelectionRange()||this.delayedAndroidKey)return;let{view:i}=this,n=this.selectionRange;if(i.state.facet(tt)?i.root.activeElement!=this.dom:!l(this.dom,n))return;let r=n.anchorNode&&i.docView.nearest(n.anchorNode);r&&r.ignoreEvent(e)?t||(this.selectionChanged=!1):(I.ie&&I.ie_version<=11||I.android&&I.chrome)&&!i.state.selection.main.empty&&n.focusNode&&c(n.focusNode,n.focusOffset,n.anchorNode,n.anchorOffset)?this.flushSoon():this.flush(!1)}readSelectionRange(){let{view:e}=this,t=s(e.root);if(!t)return!1;let i=I.safari&&11==e.root.nodeType&&e.root.activeElement==this.dom&&function(e,t){if(t.getComposedRanges){let i=t.getComposedRanges(e.root)[0];if(i)return tn(e,i)}let i=null;function n(e){e.preventDefault(),e.stopImmediatePropagation(),i=e.getTargetRanges()[0]}return e.contentDOM.addEventListener("beforeinput",n,!0),e.dom.ownerDocument.execCommand("indent"),e.contentDOM.removeEventListener("beforeinput",n,!0),i?tn(e,i):null}(this.view,t)||t;if(!i||this.selectionRange.eq(i))return!1;let n=l(this.dom,i);return n&&!this.selectionChanged&&e.inputState.lastFocusTime>Date.now()-200&&e.inputState.lastTouchTime<Date.now()-300&&function(e,t){let i=t.focusNode,n=t.focusOffset;if(!i||t.anchorNode!=i||t.anchorOffset!=n)return!1;for(n=Math.min(n,p(i));;)if(n){if(1!=i.nodeType)return!1;let e=i.childNodes[n-1];"false"==e.contentEditable?n--:(i=e,n=p(i))}else{if(i==e)return!0;n=d(i),i=i.parentNode}}(this.dom,i)?(this.view.inputState.lastFocusTime=0,e.docView.updateSelection(),!1):(this.selectionRange.setRange(i),n&&(this.selectionChanged=!0),!0)}setSelectionRange(e,t){this.selectionRange.set(e.node,e.offset,t.node,t.offset),this.selectionChanged=!1}clearSelectionRange(){this.selectionRange.set(null,0,null,0)}listenForScroll(){this.parentCheck=-1;let e=0,t=null;for(let i=this.dom;i;)if(1==i.nodeType)!t&&e<this.scrollTargets.length&&this.scrollTargets[e]==i?e++:t||(t=this.scrollTargets.slice(0,e)),t&&t.push(i),i=i.assignedSlot||i.parentNode;else{if(11!=i.nodeType)break;i=i.host}if(e<this.scrollTargets.length&&!t&&(t=this.scrollTargets.slice(0,e)),t){for(let e of this.scrollTargets)e.removeEventListener("scroll",this.onScroll);for(let e of this.scrollTargets=t)e.addEventListener("scroll",this.onScroll)}}ignore(e){if(!this.active)return e();try{return this.stop(),e()}finally{this.start(),this.clear()}}start(){this.active||(this.observer.observe(this.dom,Hi),Ki&&this.dom.addEventListener("DOMCharacterDataModified",this.onCharData),this.active=!0)}stop(){this.active&&(this.active=!1,this.observer.disconnect(),Ki&&this.dom.removeEventListener("DOMCharacterDataModified",this.onCharData))}clear(){this.processRecords(),this.queue.length=0,this.selectionChanged=!1}delayAndroidKey(e,t){var i;if(!this.delayedAndroidKey){let e=()=>{let e=this.delayedAndroidKey;e&&(this.clearDelayedAndroidKey(),this.view.inputState.lastKeyCode=e.keyCode,this.view.inputState.lastKeyTime=Date.now(),!this.flush()&&e.force&&S(this.dom,e.key,e.keyCode))};this.flushingAndroidKey=this.view.win.requestAnimationFrame(e)}this.delayedAndroidKey&&"Enter"!=e||(this.delayedAndroidKey={key:e,keyCode:t,force:this.lastChange<Date.now()-50||!!(null===(i=this.delayedAndroidKey)||void 0===i?void 0:i.force)})}clearDelayedAndroidKey(){this.win.cancelAnimationFrame(this.flushingAndroidKey),this.delayedAndroidKey=null,this.flushingAndroidKey=-1}flushSoon(){this.delayedFlush<0&&(this.delayedFlush=this.view.win.requestAnimationFrame((()=>{this.delayedFlush=-1,this.flush()})))}forceFlush(){this.delayedFlush>=0&&(this.view.win.cancelAnimationFrame(this.delayedFlush),this.delayedFlush=-1),this.flush()}pendingRecords(){for(let e of this.observer.takeRecords())this.queue.push(e);return this.queue}processRecords(){let e=this.pendingRecords();e.length&&(this.queue=[]);let t=-1,i=-1,n=!1;for(let r of e){let e=this.readMutation(r);e&&(e.typeOver&&(n=!0),-1==t?({from:t,to:i}=e):(t=Math.min(e.from,t),i=Math.max(e.to,i)))}return{from:t,to:i,typeOver:n}}readChange(){let{from:e,to:t,typeOver:i}=this.processRecords(),n=this.selectionChanged&&l(this.dom,this.selectionRange);if(e<0&&!n)return null;e>-1&&(this.lastChange=Date.now()),this.view.inputState.lastFocusTime=0,this.selectionChanged=!1;let r=new qt(this.view,e,t,i);return this.view.docView.domChanged={newSel:r.newSel?r.newSel.main:null},r}flush(e=!0){if(this.delayedFlush>=0||this.delayedAndroidKey)return!1;e&&this.readSelectionRange();let t=this.readChange();if(!t)return this.view.requestMeasure(),!1;let i=this.view.state,n=Bt(this.view,t);return this.view.state==i&&(t.domChanged||t.newSel&&!t.newSel.main.eq(this.view.state.selection.main))&&this.view.update([]),n}readMutation(e){let t=this.view.docView.nearest(e.target);if(!t||t.ignoreMutation(e))return null;if(t.markDirty("attributes"==e.type),"attributes"==e.type&&(t.flags|=4),"childList"==e.type){let i=en(t,e.previousSibling||e.target.previousSibling,-1),n=en(t,e.nextSibling||e.target.nextSibling,1);return{from:i?t.posAfter(i):t.posAtStart,to:n?t.posBefore(n):t.posAtEnd,typeOver:!1}}return"characterData"==e.type?{from:t.posAtStart,to:t.posAtEnd,typeOver:e.target.nodeValue==e.oldValue}:null}setWindow(e){e!=this.win&&(this.removeWindowListeners(this.win),this.win=e,this.addWindowListeners(this.win))}addWindowListeners(e){e.addEventListener("resize",this.onResize),this.printQuery?this.printQuery.addEventListener?this.printQuery.addEventListener("change",this.onPrint):this.printQuery.addListener(this.onPrint):e.addEventListener("beforeprint",this.onPrint),e.addEventListener("scroll",this.onScroll),e.document.addEventListener("selectionchange",this.onSelectionChange)}removeWindowListeners(e){e.removeEventListener("scroll",this.onScroll),e.removeEventListener("resize",this.onResize),this.printQuery?this.printQuery.removeEventListener?this.printQuery.removeEventListener("change",this.onPrint):this.printQuery.removeListener(this.onPrint):e.removeEventListener("beforeprint",this.onPrint),e.document.removeEventListener("selectionchange",this.onSelectionChange)}update(e){this.editContext&&(this.editContext.update(e),e.startState.facet(tt)!=e.state.facet(tt)&&(e.view.contentDOM.editContext=e.state.facet(tt)?this.editContext.editContext:null))}destroy(){var e,t,i;this.stop(),null===(e=this.intersection)||void 0===e||e.disconnect(),null===(t=this.gapIntersection)||void 0===t||t.disconnect(),null===(i=this.resizeScroll)||void 0===i||i.disconnect();for(let e of this.scrollTargets)e.removeEventListener("scroll",this.onScroll);this.removeWindowListeners(this.win),clearTimeout(this.parentCheck),clearTimeout(this.resizeTimeout),this.win.cancelAnimationFrame(this.delayedFlush),this.win.cancelAnimationFrame(this.flushingAndroidKey),this.editContext&&(this.view.contentDOM.editContext=null,this.editContext.destroy())}}function en(e,t,i){for(;t;){let n=Z.get(t);if(n&&n.parent==e)return n;let r=t.parentNode;t=r!=e.dom?r:i>0?t.nextSibling:t.previousSibling}return null}function tn(e,t){let i=t.startContainer,n=t.startOffset,r=t.endContainer,o=t.endOffset,s=e.docView.domAtPos(e.state.selection.main.anchor);return c(s.node,s.offset,r,o)&&([i,n,r,o]=[r,o,i,n]),{anchorNode:i,anchorOffset:n,focusNode:r,focusOffset:o}}class nn{constructor(e){this.from=0,this.to=0,this.pendingContextChange=null,this.handlers=Object.create(null),this.composing=null,this.resetRange(e.state);let t=this.editContext=new window.EditContext({text:e.state.doc.sliceString(this.from,this.to),selectionStart:this.toContextPos(Math.max(this.from,Math.min(this.to,e.state.selection.main.anchor))),selectionEnd:this.toContextPos(e.state.selection.main.head)});this.handlers.textupdate=t=>{let{anchor:i}=e.state.selection.main,r=this.toEditorPos(t.updateRangeStart),o=this.toEditorPos(t.updateRangeEnd);e.inputState.composing>=0&&!this.composing&&(this.composing={contextBase:t.updateRangeStart,editorBase:r,drifted:!1});let s={from:r,to:o,insert:n.Text.of(t.text.split("\n"))};s.from==this.from&&i<this.from?s.from=i:s.to==this.to&&i>this.to&&(s.to=i),(s.from!=s.to||s.insert.length)&&(this.pendingContextChange=s,e.state.readOnly||Dt(e,s,n.EditorSelection.single(this.toEditorPos(t.selectionStart),this.toEditorPos(t.selectionEnd))),this.pendingContextChange&&(this.revertPending(e.state),this.setSelection(e.state)))},this.handlers.characterboundsupdate=i=>{let n=[],r=null;for(let t=this.toEditorPos(i.rangeStart),o=this.toEditorPos(i.rangeEnd);t<o;t++){let i=e.coordsForChar(t);r=i&&new DOMRect(i.left,i.top,i.right-i.left,i.bottom-i.top)||r||new DOMRect,n.push(r)}t.updateCharacterBounds(i.rangeStart,n)},this.handlers.textformatupdate=t=>{let i=[];for(let e of t.getTextFormats()){let t=e.underlineStyle,n=e.underlineThickness;if("None"!=t&&"None"!=n){let r=`text-decoration: underline ${"Dashed"==t?"dashed ":"Squiggle"==t?"wavy ":""}${"Thin"==n?1:2}px`;i.push(le.mark({attributes:{style:r}}).range(this.toEditorPos(e.rangeStart),this.toEditorPos(e.rangeEnd)))}}e.dispatch({effects:Je.of(le.set(i))})},this.handlers.compositionstart=()=>{e.inputState.composing<0&&(e.inputState.composing=0,e.inputState.compositionFirstChange=!0)},this.handlers.compositionend=()=>{if(e.inputState.composing=-1,e.inputState.compositionFirstChange=null,this.composing){let{drifted:t}=this.composing;this.composing=null,t&&this.reset(e.state)}};for(let e in this.handlers)t.addEventListener(e,this.handlers[e]);this.measureReq={read:e=>{this.editContext.updateControlBounds(e.contentDOM.getBoundingClientRect());let t=s(e.root);t&&t.rangeCount&&this.editContext.updateSelectionBounds(t.getRangeAt(0).getBoundingClientRect())}}}applyEdits(e){let t=0,i=!1,n=this.pendingContextChange;return e.changes.iterChanges(((r,o,s,a,l)=>{if(i)return;let h=l.length-(o-r);if(n&&o>=n.to){if(n.from==r&&n.to==o&&n.insert.eq(l))return n=this.pendingContextChange=null,t+=h,void(this.to+=h);n=null,this.revertPending(e.state)}if(r+=t,(o+=t)<=this.from)this.from+=h,this.to+=h;else if(r<this.to){if(r<this.from||o>this.to||this.to-this.from+l.length>3e4)return void(i=!0);this.editContext.updateText(this.toContextPos(r),this.toContextPos(o),l.toString()),this.to+=h}t+=h})),n&&!i&&this.revertPending(e.state),!i}update(e){let t=this.pendingContextChange;this.composing&&(this.composing.drifted||e.transactions.some((e=>!e.isUserEvent("input.type")&&e.changes.touchesRange(this.from,this.to))))?(this.composing.drifted=!0,this.composing.editorBase=e.changes.mapPos(this.composing.editorBase)):this.applyEdits(e)&&this.rangeIsValid(e.state)?(e.docChanged||e.selectionSet||t)&&this.setSelection(e.state):(this.pendingContextChange=null,this.reset(e.state)),(e.geometryChanged||e.docChanged||e.selectionSet)&&e.view.requestMeasure(this.measureReq)}resetRange(e){let{head:t}=e.selection.main;this.from=Math.max(0,t-1e4),this.to=Math.min(e.doc.length,t+1e4)}reset(e){this.resetRange(e),this.editContext.updateText(0,this.editContext.text.length,e.doc.sliceString(this.from,this.to)),this.setSelection(e)}revertPending(e){let t=this.pendingContextChange;this.pendingContextChange=null,this.editContext.updateText(this.toContextPos(t.from),this.toContextPos(t.from+t.insert.length),e.doc.sliceString(t.from,t.to))}setSelection(e){let{main:t}=e.selection,i=this.toContextPos(Math.max(this.from,Math.min(this.to,t.anchor))),n=this.toContextPos(t.head);this.editContext.selectionStart==i&&this.editContext.selectionEnd==n||this.editContext.updateSelection(i,n)}rangeIsValid(e){let{head:t}=e.selection.main;return!(this.from>0&&t-this.from<500||this.to<e.doc.length&&this.to-t<500||this.to-this.from>3e4)}toEditorPos(e){let t=this.composing;return t&&t.drifted?t.editorBase+(e-t.contextBase):e+this.from}toContextPos(e){let t=this.composing;return t&&t.drifted?t.contextBase+(e-t.editorBase):e-this.from}destroy(){for(let e in this.handlers)this.editContext.removeEventListener(e,this.handlers[e])}}class rn{get state(){return this.viewState.state}get viewport(){return this.viewState.viewport}get visibleRanges(){return this.viewState.visibleRanges}get inView(){return this.viewState.inView}get composing(){return this.inputState.composing>0}get compositionStarted(){return this.inputState.composing>=0}get root(){return this._root}get win(){return this.dom.ownerDocument.defaultView||window}constructor(e={}){var t;this.plugins=[],this.pluginMap=new Map,this.editorAttrs={},this.contentAttrs={},this.bidiCache=[],this.destroyed=!1,this.updateState=2,this.measureScheduled=-1,this.measureRequests=[],this.contentDOM=document.createElement("div"),this.scrollDOM=document.createElement("div"),this.scrollDOM.tabIndex=-1,this.scrollDOM.className="cm-scroller",this.scrollDOM.appendChild(this.contentDOM),this.announceDOM=document.createElement("div"),this.announceDOM.className="cm-announced",this.announceDOM.setAttribute("aria-live","polite"),this.dom=document.createElement("div"),this.dom.appendChild(this.announceDOM),this.dom.appendChild(this.scrollDOM),e.parent&&e.parent.appendChild(this.dom);let{dispatch:i}=e;this.dispatchTransactions=e.dispatchTransactions||i&&(e=>e.forEach((e=>i(e,this))))||(e=>this.update(e)),this.dispatch=this.dispatch.bind(this),this._root=e.root||function(e){for(;e;){if(e&&(9==e.nodeType||11==e.nodeType&&e.host))return e;e=e.assignedSlot||e.parentNode}return null}(e.parent)||document,this.viewState=new _i(e.state||n.EditorState.create(e)),e.scrollTo&&e.scrollTo.is(Ke)&&(this.viewState.scrollTarget=e.scrollTo.value.clip(this.viewState.state)),this.plugins=this.state.facet(nt).map((e=>new ot(e)));for(let e of this.plugins)e.update(this);this.observer=new Ji(this),this.inputState=new zt(this),this.inputState.ensureHandlers(this.plugins),this.docView=new bt(this),this.mountStyles(),this.updateAttrs(),this.updateState=0,this.requestMeasure(),(null===(t=document.fonts)||void 0===t?void 0:t.ready)&&document.fonts.ready.then((()=>this.requestMeasure()))}dispatch(...e){let t=1==e.length&&e[0]instanceof n.Transaction?e:1==e.length&&Array.isArray(e[0])?e[0]:[this.state.update(...e)];this.dispatchTransactions(t,this)}update(e){if(0!=this.updateState)throw new Error("Calls to EditorView.update are not allowed while an update is in progress");let t,i=!1,r=!1,o=this.state;for(let t of e){if(t.startState!=o)throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");o=t.state}if(this.destroyed)return void(this.viewState.state=o);let s=this.hasFocus,a=0,l=null;e.some((e=>e.annotation(di)))?(this.inputState.notifiedFocused=s,a=1):s!=this.inputState.notifiedFocused&&(this.inputState.notifiedFocused=s,l=ui(o,s),l||(a=1));let h=this.observer.delayedAndroidKey,c=null;if(h?(this.observer.clearDelayedAndroidKey(),c=this.observer.readChange(),(c&&!this.state.doc.eq(o.doc)||!this.state.selection.eq(o.selection))&&(c=null)):this.observer.clear(),o.facet(n.EditorState.phrases)!=this.state.facet(n.EditorState.phrases))return this.setState(o);t=gt.create(this,o,e),t.flags|=a;let d=this.viewState.scrollTarget;try{this.updateState=2;for(let t of e){if(d&&(d=d.map(t.changes)),t.scrollIntoView){let{main:e}=t.state.selection;d=new He(e.empty?e:n.EditorSelection.cursor(e.head,e.head>e.anchor?-1:1))}for(let e of t.effects)e.is(Ke)&&(d=e.value.clip(this.state))}this.viewState.update(t,d),this.bidiCache=an.update(this.bidiCache,t.changes),t.empty||(this.updatePlugins(t),this.inputState.update(t)),i=this.docView.update(t),this.state.facet(Ot)!=this.styleModules&&this.mountStyles(),r=this.updateAttrs(),this.showAnnouncements(e),this.docView.updateSelection(i,e.some((e=>e.isUserEvent("select.pointer"))))}finally{this.updateState=0}if(t.startState.facet(ji)!=t.state.facet(ji)&&(this.viewState.mustMeasureContent=!0),(i||r||d||this.viewState.mustEnforceCursorAssoc||this.viewState.mustMeasureContent)&&this.requestMeasure(),i&&this.docViewUpdate(),!t.empty)for(let e of this.state.facet(je))try{e(t)}catch(e){et(this.state,e,"update listener")}(l||c)&&Promise.resolve().then((()=>{l&&this.state==l.startState&&this.dispatch(l),c&&!Bt(this,c)&&h.force&&S(this.contentDOM,h.key,h.keyCode)}))}setState(e){if(0!=this.updateState)throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");if(this.destroyed)return void(this.viewState.state=e);this.updateState=2;let t=this.hasFocus;try{for(let e of this.plugins)e.destroy(this);this.viewState=new _i(e),this.plugins=e.facet(nt).map((e=>new ot(e))),this.pluginMap.clear();for(let e of this.plugins)e.update(this);this.docView.destroy(),this.docView=new bt(this),this.inputState.ensureHandlers(this.plugins),this.mountStyles(),this.updateAttrs(),this.bidiCache=[]}finally{this.updateState=0}t&&this.focus(),this.requestMeasure()}updatePlugins(e){let t=e.startState.facet(nt),i=e.state.facet(nt);if(t!=i){let n=[];for(let r of i){let i=t.indexOf(r);if(i<0)n.push(new ot(r));else{let t=this.plugins[i];t.mustUpdate=e,n.push(t)}}for(let t of this.plugins)t.mustUpdate!=e&&t.destroy(this);this.plugins=n,this.pluginMap.clear()}else for(let t of this.plugins)t.mustUpdate=e;for(let e=0;e<this.plugins.length;e++)this.plugins[e].update(this);t!=i&&this.inputState.ensureHandlers(this.plugins)}docViewUpdate(){for(let e of this.plugins){let t=e.value;if(t&&t.docViewUpdate)try{t.docViewUpdate(this)}catch(e){et(this.state,e,"doc view update listener")}}}measure(e=!0){if(this.destroyed)return;if(this.measureScheduled>-1&&this.win.cancelAnimationFrame(this.measureScheduled),this.observer.delayedAndroidKey)return this.measureScheduled=-1,void this.requestMeasure();this.measureScheduled=0,e&&this.observer.forceFlush();let t=null,i=this.scrollDOM,n=i.scrollTop*this.scaleY,{scrollAnchorPos:r,scrollAnchorHeight:o}=this.viewState;Math.abs(n-this.viewState.scrollTop)>1&&(o=-1),this.viewState.scrollAnchorHeight=-1;try{for(let e=0;;e++){if(o<0)if(A(i))r=-1,o=this.viewState.heightMap.height;else{let e=this.viewState.scrollAnchorAt(n);r=e.from,o=e.top}this.updateState=1;let s=this.viewState.measure(this);if(!s&&!this.measureRequests.length&&null==this.viewState.scrollTarget)break;if(e>5){console.warn(this.measureRequests.length?"Measure loop restarted more than 5 times":"Viewport failed to stabilize");break}let a=[];4&s||([this.measureRequests,a]=[a,this.measureRequests]);let l=a.map((e=>{try{return e.read(this)}catch(e){return et(this.state,e),sn}})),h=gt.create(this,this.state,[]),c=!1;h.flags|=s,t?t.flags|=s:t=h,this.updateState=2,h.empty||(this.updatePlugins(h),this.inputState.update(h),this.updateAttrs(),c=this.docView.update(h),c&&this.docViewUpdate());for(let e=0;e<a.length;e++)if(l[e]!=sn)try{let t=a[e];t.write&&t.write(l[e],this)}catch(e){et(this.state,e)}if(c&&this.docView.updateSelection(!0),!h.viewportChanged&&0==this.measureRequests.length){if(this.viewState.editorHeight){if(this.viewState.scrollTarget){this.docView.scrollIntoView(this.viewState.scrollTarget),this.viewState.scrollTarget=null,o=-1;continue}{let e=(r<0?this.viewState.heightMap.height:this.viewState.lineBlockAt(r).top)-o;if(e>1||e<-1){n+=e,i.scrollTop=n/this.scaleY,o=-1;continue}}}break}}}finally{this.updateState=0,this.measureScheduled=-1}if(t&&!t.empty)for(let e of this.state.facet(je))e(t)}get themeClasses(){return Yi+" "+(this.state.facet(Wi)?Gi:Ii)+" "+this.state.facet(ji)}updateAttrs(){let e=ln(this,st,{class:"cm-editor"+(this.hasFocus?" cm-focused ":" ")+this.themeClasses}),t={spellcheck:"false",autocorrect:"off",autocapitalize:"off",translate:"no",contenteditable:this.state.facet(tt)?"true":"false",class:"cm-content",style:`${I.tabSize}: ${this.state.tabSize}`,role:"textbox","aria-multiline":"true"};this.state.readOnly&&(t["aria-readonly"]="true"),ln(this,at,t);let i=this.observer.ignore((()=>{let i=ne(this.contentDOM,this.contentAttrs,t),n=ne(this.dom,this.editorAttrs,e);return i||n}));return this.editorAttrs=e,this.contentAttrs=t,i}showAnnouncements(e){let t=!0;for(let i of e)for(let e of i.effects)e.is(rn.announce)&&(t&&(this.announceDOM.textContent=""),t=!1,this.announceDOM.appendChild(document.createElement("div")).textContent=e.value)}mountStyles(){this.styleModules=this.state.facet(Ot);let e=this.state.facet(rn.cspNonce);r.StyleModule.mount(this.root,this.styleModules.concat(Fi).reverse(),e?{nonce:e}:void 0)}readMeasured(){if(2==this.updateState)throw new Error("Reading the editor layout isn't allowed during an update");0==this.updateState&&this.measureScheduled>-1&&this.measure(!1)}requestMeasure(e){if(this.measureScheduled<0&&(this.measureScheduled=this.win.requestAnimationFrame((()=>this.measure()))),e){if(this.measureRequests.indexOf(e)>-1)return;if(null!=e.key)for(let t=0;t<this.measureRequests.length;t++)if(this.measureRequests[t].key===e.key)return void(this.measureRequests[t]=e);this.measureRequests.push(e)}}plugin(e){let t=this.pluginMap.get(e);return(void 0===t||t&&t.spec!=e)&&this.pluginMap.set(e,t=this.plugins.find((t=>t.spec==e))||null),t&&t.update(this).value}get documentTop(){return this.contentDOM.getBoundingClientRect().top+this.viewState.paddingTop}get documentPadding(){return{top:this.viewState.paddingTop,bottom:this.viewState.paddingBottom}}get scaleX(){return this.viewState.scaleX}get scaleY(){return this.viewState.scaleY}elementAtHeight(e){return this.readMeasured(),this.viewState.elementAtHeight(e)}lineBlockAtHeight(e){return this.readMeasured(),this.viewState.lineBlockAtHeight(e)}get viewportLineBlocks(){return this.viewState.viewportLines}lineBlockAt(e){return this.viewState.lineBlockAt(e)}get contentHeight(){return this.viewState.contentHeight}moveByChar(e,t,i){return Et(this,e,Tt(this,e,t,i))}moveByGroup(e,t){return Et(this,e,Tt(this,e,t,(t=>function(e,t,i){let r=e.state.charCategorizer(t),o=r(i);return e=>{let t=r(e);return o==n.CharCategory.Space&&(o=t),o==t}}(this,e.head,t))))}visualLineSide(e,t){let i=this.bidiSpans(e),r=this.textDirectionAt(e.from),o=i[t?i.length-1:0];return n.EditorSelection.cursor(o.side(t,r)+e.from,o.forward(!t,r)?1:-1)}moveToLineBoundary(e,i,r=!0){return function(e,i,r,o){let s=Zt(e,i.head),a=o&&s.type==t.BlockType.Text&&(e.lineWrapping||s.widgetLineBreaks)?e.coordsAtPos(i.assoc<0&&i.head>s.from?i.head-1:i.head):null;if(a){let i=e.dom.getBoundingClientRect(),o=e.textDirectionAt(s.from),l=e.posAtCoords({x:r==(o==t.Direction.LTR)?i.right-1:i.left+1,y:(a.top+a.bottom)/2});if(null!=l)return n.EditorSelection.cursor(l,r?-1:1)}return n.EditorSelection.cursor(r?s.to:s.from,r?-1:1)}(this,e,i,r)}moveVertically(e,t,i){return Et(this,e,function(e,t,i,r){let o=t.head,s=i?1:-1;if(o==(i?e.state.doc.length:0))return n.EditorSelection.cursor(o,t.assoc);let a,l=t.goalColumn,h=e.contentDOM.getBoundingClientRect(),c=e.coordsAtPos(o,t.assoc||-1),d=e.documentTop;if(c)null==l&&(l=c.left-h.left),a=s<0?c.top:c.bottom;else{let t=e.viewState.lineBlockAt(o);null==l&&(l=Math.min(h.right-h.left,e.defaultCharacterWidth*(o-t.from))),a=(s<0?t.top:t.bottom)+d}let u=h.left+l,f=null!=r?r:e.viewState.heightOracle.textHeight>>1;for(let t=0;;t+=10){let i=a+(f+t)*s,r=Ct(e,{x:u,y:i},!1,s);if(i<h.top||i>h.bottom||(s<0?r<o:r>o)){let t=e.docView.coordsForChar(r),o=!t||i<t.top?-1:1;return n.EditorSelection.cursor(r,o,void 0,l)}}}(this,e,t,i))}domAtPos(e){return this.docView.domAtPos(e)}posAtDOM(e,t=0){return this.docView.posFromDOM(e,t)}posAtCoords(e,t=!0){return this.readMeasured(),Ct(this,e,t)}coordsAtPos(e,i=1){this.readMeasured();let n=this.docView.coordsAt(e,i);if(!n||n.left==n.right)return n;let r=this.state.doc.lineAt(e),o=this.bidiSpans(r);return O(n,o[$e.find(o,e-r.from,-1,i)].dir==t.Direction.LTR==i>0)}coordsForChar(e){return this.readMeasured(),this.docView.coordsForChar(e)}get defaultCharacterWidth(){return this.viewState.heightOracle.charWidth}get defaultLineHeight(){return this.viewState.heightOracle.lineHeight}get textDirection(){return this.viewState.defaultTextDirection}textDirectionAt(e){return!this.state.facet(Ue)||e<this.viewport.from||e>this.viewport.to?this.textDirection:(this.readMeasured(),this.docView.textDirectionAt(e))}get lineWrapping(){return this.viewState.heightOracle.lineWrapping}bidiSpans(e){if(e.length>on)return Re(e.length);let t,i=this.textDirectionAt(e.from);for(let n of this.bidiCache)if(n.from==e.from&&n.dir==i&&(n.fresh||Ze(n.isolates,t=ut(this,e))))return n.order;t||(t=ut(this,e));let n=Xe(e.text,i,t);return this.bidiCache.push(new an(e.from,e.to,i,t,!0,n)),n}get hasFocus(){var e;return(this.dom.ownerDocument.hasFocus()||I.safari&&(null===(e=this.inputState)||void 0===e?void 0:e.lastContextMenu)>Date.now()-3e4)&&this.root.activeElement==this.contentDOM}focus(){this.observer.ignore((()=>{v(this.contentDOM),this.docView.updateSelection()}))}setRoot(e){this._root!=e&&(this._root=e,this.observer.setWindow((9==e.nodeType?e:e.ownerDocument).defaultView||window),this.mountStyles())}destroy(){this.root.activeElement==this.contentDOM&&this.contentDOM.blur();for(let e of this.plugins)e.destroy(this);this.plugins=[],this.inputState.destroy(),this.docView.destroy(),this.dom.remove(),this.observer.destroy(),this.measureScheduled>-1&&this.win.cancelAnimationFrame(this.measureScheduled),this.destroyed=!0}static scrollIntoView(e,t={}){return Ke.of(new He("number"==typeof e?n.EditorSelection.cursor(e):e,t.y,t.x,t.yMargin,t.xMargin))}scrollSnapshot(){let{scrollTop:e,scrollLeft:t}=this.scrollDOM,i=this.viewState.scrollAnchorAt(e);return Ke.of(new He(n.EditorSelection.cursor(i.from),"start","start",i.top-e,t,!0))}setTabFocusMode(e){null==e?this.inputState.tabFocusMode=this.inputState.tabFocusMode<0?0:-1:"boolean"==typeof e?this.inputState.tabFocusMode=e?0:-1:0!=this.inputState.tabFocusMode&&(this.inputState.tabFocusMode=Date.now()+e)}static domEventHandlers(e){return rt.define((()=>({})),{eventHandlers:e})}static domEventObservers(e){return rt.define((()=>({})),{eventObservers:e})}static theme(e,t){let i=r.StyleModule.newName(),n=[ji.of(i),Ot.of(Ni(`.${i}`,e))];return t&&t.dark&&n.push(Wi.of(!0)),n}static baseTheme(e){return n.Prec.lowest(Ot.of(Ni("."+Yi,e,Ui)))}static findFromDOM(e){var t;let i=e.querySelector(".cm-content"),n=i&&Z.get(i)||Z.get(e);return(null===(t=null==n?void 0:n.rootView)||void 0===t?void 0:t.view)||null}}rn.styleModule=Ot,rn.inputHandler=We,rn.clipboardInputFilter=Ie,rn.clipboardOutputFilter=Ge,rn.scrollHandler=Fe,rn.focusChangeEffect=Ye,rn.perLineTextDirection=Ue,rn.exceptionSink=Le,rn.updateListener=je,rn.editable=tt,rn.mouseSelectionStyle=ze,rn.dragMovesSelection=De,rn.clickAddsSelectionRange=Be,rn.decorations=lt,rn.outerDecorations=ht,rn.atomicRanges=ct,rn.bidiIsolatedRanges=dt,rn.scrollMargins=ft,rn.darkTheme=Wi,rn.cspNonce=n.Facet.define({combine:e=>e.length?e[0]:""}),rn.contentAttributes=at,rn.editorAttributes=st,rn.lineWrapping=rn.contentAttributes.of({class:"cm-lineWrapping"}),rn.announce=n.StateEffect.define();const on=4096,sn={};class an{constructor(e,t,i,n,r,o){this.from=e,this.to=t,this.dir=i,this.isolates=n,this.fresh=r,this.order=o}static update(e,i){if(i.empty&&!e.some((e=>e.fresh)))return e;let n=[],r=e.length?e[e.length-1].dir:t.Direction.LTR;for(let t=Math.max(0,e.length-10);t<e.length;t++){let o=e[t];o.dir!=r||i.touchesRange(o.from,o.to)||n.push(new an(i.mapPos(o.from,1),i.mapPos(o.to,-1),o.dir,o.isolates,!1,o.order))}return n}}function ln(e,t,i){for(let n=e.state.facet(t),r=n.length-1;r>=0;r--){let t=n[r],o="function"==typeof t?t(e):t;o&&ee(o,i)}return i}const hn=I.mac?"mac":I.windows?"win":I.linux?"linux":"key";function cn(e,t,i){return t.altKey&&(e="Alt-"+e),t.ctrlKey&&(e="Ctrl-"+e),t.metaKey&&(e="Meta-"+e),!1!==i&&t.shiftKey&&(e="Shift-"+e),e}const dn=n.Prec.default(rn.domEventHandlers({keydown:(e,t)=>bn(pn(t.state),e,t,"editor")})),un=n.Facet.define({enables:dn}),fn=new WeakMap;function pn(e){let t=e.facet(un),i=fn.get(t);return i||fn.set(t,i=function(e,t=hn){let i=Object.create(null),n=Object.create(null),r=(e,t)=>{let i=n[e];if(null==i)n[e]=t;else if(i!=t)throw new Error("Key binding "+e+" is used both as a regular binding and as a multi-stroke prefix")},o=(e,n,o,s,a)=>{var l,h;let c=i[e]||(i[e]=Object.create(null)),d=n.split(/ (?!$)/).map((e=>function(e,t){const i=e.split(/-(?!$)/);let n,r,o,s,a=i[i.length-1];"Space"==a&&(a=" ");for(let e=0;e<i.length-1;++e){const a=i[e];if(/^(cmd|meta|m)$/i.test(a))s=!0;else if(/^a(lt)?$/i.test(a))n=!0;else if(/^(c|ctrl|control)$/i.test(a))r=!0;else if(/^s(hift)?$/i.test(a))o=!0;else{if(!/^mod$/i.test(a))throw new Error("Unrecognized modifier name: "+a);"mac"==t?s=!0:r=!0}}return n&&(a="Alt-"+a),r&&(a="Ctrl-"+a),s&&(a="Meta-"+a),o&&(a="Shift-"+a),a}(e,t)));for(let t=1;t<d.length;t++){let i=d.slice(0,t).join(" ");r(i,!0),c[i]||(c[i]={preventDefault:!0,stopPropagation:!1,run:[t=>{let n=On={view:t,prefix:i,scope:e};return setTimeout((()=>{On==n&&(On=null)}),mn),!0}]})}let u=d.join(" ");r(u,!1);let f=c[u]||(c[u]={preventDefault:!1,stopPropagation:!1,run:(null===(h=null===(l=c._any)||void 0===l?void 0:l.run)||void 0===h?void 0:h.slice())||[]});o&&f.run.push(o),s&&(f.preventDefault=!0),a&&(f.stopPropagation=!0)};for(let n of e){let e=n.scope?n.scope.split(" "):["editor"];if(n.any)for(let t of e){let e=i[t]||(i[t]=Object.create(null));e._any||(e._any={preventDefault:!1,stopPropagation:!1,run:[]});let{any:r}=n;for(let t in e)e[t].run.push((e=>r(e,gn)))}let r=n[t]||n.key;if(r)for(let t of e)o(t,r,n.run,n.preventDefault,n.stopPropagation),n.shift&&o(t,"Shift-"+r,n.shift,n.preventDefault,n.stopPropagation)}return i}(t.reduce(((e,t)=>e.concat(t)),[]))),i}let On=null;const mn=4e3;let gn=null;function bn(e,t,i,r){gn=t;let s=o.keyName(t),a=n.codePointAt(s,0),l=n.codePointSize(a)==s.length&&" "!=s,h="",c=!1,d=!1,u=!1;On&&On.view==i&&On.scope==r&&(h=On.prefix+" ",It.indexOf(t.keyCode)<0&&(d=!0,On=null));let f,p,O=new Set,m=e=>{if(e){for(let t of e.run)if(!O.has(t)&&(O.add(t),t(i)))return e.stopPropagation&&(u=!0),!0;e.preventDefault&&(e.stopPropagation&&(u=!0),d=!0)}return!1},g=e[r];return g&&(m(g[h+cn(s,t,!l)])?c=!0:l&&(t.altKey||t.metaKey||t.ctrlKey)&&!(I.windows&&t.ctrlKey&&t.altKey)&&(f=o.base[t.keyCode])&&f!=s?(m(g[h+cn(f,t,!0)])||t.shiftKey&&(p=o.shift[t.keyCode])!=s&&p!=f&&m(g[h+cn(p,t,!1)]))&&(c=!0):l&&t.shiftKey&&m(g[h+cn(s,t,!0)])&&(c=!0),!c&&m(g._any)&&(c=!0)),d&&(c=!0),c&&u&&t.stopPropagation(),gn=null,c}class wn{constructor(e,t,i,n,r){this.className=e,this.left=t,this.top=i,this.width=n,this.height=r}draw(){let e=document.createElement("div");return e.className=this.className,this.adjust(e),e}update(e,t){return t.className==this.className&&(this.adjust(e),!0)}adjust(e){e.style.left=this.left+"px",e.style.top=this.top+"px",null!=this.width&&(e.style.width=this.width+"px"),e.style.height=this.height+"px"}eq(e){return this.left==e.left&&this.top==e.top&&this.width==e.width&&this.height==e.height&&this.className==e.className}static forRange(e,i,n){if(n.empty){let t=e.coordsAtPos(n.head,n.assoc||1);if(!t)return[];let r=yn(e);return[new wn(i,t.left-r.left,t.top-r.top,null,t.bottom-t.top)]}return function(e,i,n){if(n.to<=e.viewport.from||n.from>=e.viewport.to)return[];let r=Math.max(n.from,e.viewport.from),o=Math.min(n.to,e.viewport.to),s=e.textDirection==t.Direction.LTR,a=e.contentDOM,l=a.getBoundingClientRect(),h=yn(e),c=a.querySelector(".cm-line"),d=c&&window.getComputedStyle(c),u=l.left+(d?parseInt(d.paddingLeft)+Math.min(0,parseInt(d.textIndent)):0),f=l.right-(d?parseInt(d.paddingRight):0),p=Zt(e,r),O=Zt(e,o),m=p.type==t.BlockType.Text?p:null,g=O.type==t.BlockType.Text?O:null;if(m&&(e.lineWrapping||p.widgetLineBreaks)&&(m=vn(e,r,1,m)),g&&(e.lineWrapping||O.widgetLineBreaks)&&(g=vn(e,o,-1,g)),m&&g&&m.from==g.from&&m.to==g.to)return w(y(n.from,n.to,m));{let i=m?y(n.from,null,m):v(p,!1),r=g?y(null,n.to,g):v(O,!0),o=[];return(m||p).to<(g||O).from-(m&&g?1:0)||p.widgetLineBreaks>1&&i.bottom+e.defaultLineHeight/2<r.top?o.push(b(u,i.bottom,f,r.top)):i.bottom<r.top&&e.elementAtHeight((i.bottom+r.top)/2).type==t.BlockType.Text&&(i.bottom=r.top=(i.bottom+r.top)/2),w(i).concat(o).concat(w(r))}function b(e,t,n,r){return new wn(i,e-h.left,t-h.top-.01,n-e,r-t+.01)}function w({top:e,bottom:t,horizontal:i}){let n=[];for(let r=0;r<i.length;r+=2)n.push(b(i[r],e,i[r+1],t));return n}function y(i,n,r){let o=1e9,a=-1e9,l=[];function h(i,n,h,c,d){let p=e.coordsAtPos(i,i==r.to?-2:2),O=e.coordsAtPos(h,h==r.from?2:-2);p&&O&&(o=Math.min(p.top,O.top,o),a=Math.max(p.bottom,O.bottom,a),d==t.Direction.LTR?l.push(s&&n?u:p.left,s&&c?f:O.right):l.push(!s&&c?u:O.left,!s&&n?f:p.right))}let c=null!=i?i:r.from,d=null!=n?n:r.to;for(let t of e.visibleRanges)if(t.to>c&&t.from<d)for(let r=Math.max(t.from,c),o=Math.min(t.to,d);;){let t=e.state.doc.lineAt(r);for(let s of e.bidiSpans(t)){let e=s.from+t.from,a=s.to+t.from;if(e>=o)break;a>r&&h(Math.max(e,r),null==i&&e<=c,Math.min(a,o),null==n&&a>=d,s.dir)}if(r=t.to+1,r>=o)break}return 0==l.length&&h(c,null==i,d,null==n,e.textDirection),{top:o,bottom:a,horizontal:l}}function v(e,t){let i=l.top+(t?e.top:e.bottom);return{top:i,bottom:i,horizontal:[]}}}(e,i,n)}}function yn(e){let i=e.scrollDOM.getBoundingClientRect();return{left:(e.textDirection==t.Direction.LTR?i.left:i.right-e.scrollDOM.clientWidth*e.scaleX)-e.scrollDOM.scrollLeft*e.scaleX,top:i.top-e.scrollDOM.scrollTop*e.scaleY}}function vn(e,t,i,n){let r=e.coordsAtPos(t,2*i);if(!r)return n;let o=e.dom.getBoundingClientRect(),s=(r.top+r.bottom)/2,a=e.posAtCoords({x:o.left+1,y:s}),l=e.posAtCoords({x:o.right-1,y:s});return null==a||null==l?n:{from:Math.max(n.from,Math.min(a,l)),to:Math.min(n.to,Math.max(a,l))}}class xn{constructor(e,t){this.view=e,this.layer=t,this.drawn=[],this.scaleX=1,this.scaleY=1,this.measureReq={read:this.measure.bind(this),write:this.draw.bind(this)},this.dom=e.scrollDOM.appendChild(document.createElement("div")),this.dom.classList.add("cm-layer"),t.above&&this.dom.classList.add("cm-layer-above"),t.class&&this.dom.classList.add(t.class),this.scale(),this.dom.setAttribute("aria-hidden","true"),this.setOrder(e.state),e.requestMeasure(this.measureReq),t.mount&&t.mount(this.dom,e)}update(e){e.startState.facet(Sn)!=e.state.facet(Sn)&&this.setOrder(e.state),(this.layer.update(e,this.dom)||e.geometryChanged)&&(this.scale(),e.view.requestMeasure(this.measureReq))}docViewUpdate(e){!1!==this.layer.updateOnDocViewUpdate&&e.requestMeasure(this.measureReq)}setOrder(e){let t=0,i=e.facet(Sn);for(;t<i.length&&i[t]!=this.layer;)t++;this.dom.style.zIndex=String((this.layer.above?150:-1)-t)}measure(){return this.layer.markers(this.view)}scale(){let{scaleX:e,scaleY:t}=this.view;e==this.scaleX&&t==this.scaleY||(this.scaleX=e,this.scaleY=t,this.dom.style.transform=`scale(${1/e}, ${1/t})`)}draw(e){if(e.length!=this.drawn.length||e.some(((e,t)=>{return i=e,n=this.drawn[t],!(i.constructor==n.constructor&&i.eq(n));var i,n}))){let t=this.dom.firstChild,i=0;for(let n of e)n.update&&t&&n.constructor&&this.drawn[i].constructor&&n.update(t,this.drawn[i])?(t=t.nextSibling,i++):this.dom.insertBefore(n.draw(),t);for(;t;){let e=t.nextSibling;t.remove(),t=e}this.drawn=e}}destroy(){this.layer.destroy&&this.layer.destroy(this.dom,this.view),this.dom.remove()}}const Sn=n.Facet.define();function kn(e){return[rt.define((t=>new xn(t,e))),Sn.of(e)]}const An=!I.ios,Qn=n.Facet.define({combine:e=>n.combineConfig(e,{cursorBlinkRate:1200,drawRangeCursor:!0},{cursorBlinkRate:(e,t)=>Math.min(e,t),drawRangeCursor:(e,t)=>e||t})});function Pn(e){return e.startState.facet(Qn)!=e.state.facet(Qn)}const Cn=kn({above:!0,markers(e){let{state:t}=e,i=t.facet(Qn),r=[];for(let o of t.selection.ranges){let s=o==t.selection.main;if(o.empty?!s||An:i.drawRangeCursor){let t=s?"cm-cursor cm-cursor-primary":"cm-cursor cm-cursor-secondary",i=o.empty?o:n.EditorSelection.cursor(o.head,o.head>o.anchor?-1:1);for(let n of wn.forRange(e,t,i))r.push(n)}}return r},update(e,t){e.transactions.some((e=>e.selection))&&(t.style.animationName="cm-blink"==t.style.animationName?"cm-blink2":"cm-blink");let i=Pn(e);return i&&$n(e.state,t),e.docChanged||e.selectionSet||i},mount(e,t){$n(t.state,e)},class:"cm-cursorLayer"});function $n(e,t){t.style.animationDuration=e.facet(Qn).cursorBlinkRate+"ms"}const Zn=kn({above:!1,markers:e=>e.state.selection.ranges.map((t=>t.empty?[]:wn.forRange(e,"cm-selectionBackground",t))).reduce(((e,t)=>e.concat(t))),update:(e,t)=>e.docChanged||e.selectionSet||e.viewportChanged||Pn(e),class:"cm-selectionLayer"}),Tn={".cm-line":{"& ::selection, &::selection":{backgroundColor:"transparent !important"}},".cm-content":{"& :focus":{caretColor:"initial !important","&::selection, & ::selection":{backgroundColor:"Highlight !important"}}}};An&&(Tn[".cm-line"].caretColor=Tn[".cm-content"].caretColor="transparent !important");const Mn=n.Prec.highest(rn.theme(Tn)),En=n.StateEffect.define({map:(e,t)=>null==e?null:t.mapPos(e)}),Xn=n.StateField.define({create:()=>null,update:(e,t)=>(null!=e&&(e=t.changes.mapPos(e)),t.effects.reduce(((e,t)=>t.is(En)?t.value:e),e))}),Rn=rt.fromClass(class{constructor(e){this.view=e,this.cursor=null,this.measureReq={read:this.readPos.bind(this),write:this.drawCursor.bind(this)}}update(e){var t;let i=e.state.field(Xn);null==i?null!=this.cursor&&(null===(t=this.cursor)||void 0===t||t.remove(),this.cursor=null):(this.cursor||(this.cursor=this.view.scrollDOM.appendChild(document.createElement("div")),this.cursor.className="cm-dropCursor"),(e.startState.field(Xn)!=i||e.docChanged||e.geometryChanged)&&this.view.requestMeasure(this.measureReq))}readPos(){let{view:e}=this,t=e.state.field(Xn),i=null!=t&&e.coordsAtPos(t);if(!i)return null;let n=e.scrollDOM.getBoundingClientRect();return{left:i.left-n.left+e.scrollDOM.scrollLeft*e.scaleX,top:i.top-n.top+e.scrollDOM.scrollTop*e.scaleY,height:i.bottom-i.top}}drawCursor(e){if(this.cursor){let{scaleX:t,scaleY:i}=this.view;e?(this.cursor.style.left=e.left/t+"px",this.cursor.style.top=e.top/i+"px",this.cursor.style.height=e.height/i+"px"):this.cursor.style.left="-100000px"}}destroy(){this.cursor&&this.cursor.remove()}setDropPos(e){this.view.state.field(Xn)!=e&&this.view.dispatch({effects:En.of(e)})}},{eventObservers:{dragover(e){this.setDropPos(this.view.posAtCoords({x:e.clientX,y:e.clientY}))},dragleave(e){e.target!=this.view.contentDOM&&this.view.contentDOM.contains(e.relatedTarget)||this.setDropPos(null)},dragend(){this.setDropPos(null)},drop(){this.setDropPos(null)}}});function _n(e,t,i,n,r){t.lastIndex=0;for(let o,s=e.iterRange(i,n),a=i;!s.next().done;a+=s.value.length)if(!s.lineBreak)for(;o=t.exec(s.value);)r(a+o.index,o)}class Vn{constructor(e){const{regexp:t,decoration:i,decorate:n,boundary:r,maxLength:o=1e3}=e;if(!t.global)throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");if(this.regexp=t,n)this.addMatch=(e,t,i,r)=>n(r,i,i+e[0].length,e,t);else if("function"==typeof i)this.addMatch=(e,t,n,r)=>{let o=i(e,t,n);o&&r(n,n+e[0].length,o)};else{if(!i)throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");this.addMatch=(e,t,n,r)=>r(n,n+e[0].length,i)}this.boundary=r,this.maxLength=o}createDeco(e){let t=new n.RangeSetBuilder,i=t.add.bind(t);for(let{from:t,to:n}of function(e,t){let i=e.visibleRanges;if(1==i.length&&i[0].from==e.viewport.from&&i[0].to==e.viewport.to)return i;let n=[];for(let{from:r,to:o}of i)r=Math.max(e.state.doc.lineAt(r).from,r-t),o=Math.min(e.state.doc.lineAt(o).to,o+t),n.length&&n[n.length-1].to>=r?n[n.length-1].to=o:n.push({from:r,to:o});return n}(e,this.maxLength))_n(e.state.doc,this.regexp,t,n,((t,n)=>this.addMatch(n,e,t,i)));return t.finish()}updateDeco(e,t){let i=1e9,n=-1;return e.docChanged&&e.changes.iterChanges(((t,r,o,s)=>{s>e.view.viewport.from&&o<e.view.viewport.to&&(i=Math.min(o,i),n=Math.max(s,n))})),e.viewportChanged||n-i>1e3?this.createDeco(e.view):n>-1?this.updateRange(e.view,t.map(e.changes),i,n):t}updateRange(e,t,i,n){for(let r of e.visibleRanges){let o=Math.max(r.from,i),s=Math.min(r.to,n);if(s>o){let i=e.state.doc.lineAt(o),n=i.to<s?e.state.doc.lineAt(s):i,a=Math.max(r.from,i.from),l=Math.min(r.to,n.to);if(this.boundary){for(;o>i.from;o--)if(this.boundary.test(i.text[o-1-i.from])){a=o;break}for(;s<n.to;s++)if(this.boundary.test(n.text[s-n.from])){l=s;break}}let h,c=[],d=(e,t,i)=>c.push(i.range(e,t));if(i==n)for(this.regexp.lastIndex=a-i.from;(h=this.regexp.exec(i.text))&&h.index<l-i.from;)this.addMatch(h,e,h.index+i.from,d);else _n(e.state.doc,this.regexp,a,l,((t,i)=>this.addMatch(i,e,t,d)));t=t.update({filterFrom:a,filterTo:l,filter:(e,t)=>e<a||t>l,add:c})}}return t}}const qn=null!=/x/.unicode?"gu":"g",Bn=new RegExp("[\0-\b\n--­؜​‎‏\u2028\u2029‭‮⁦⁧⁩\ufeff￹-￼]",qn),Dn={0:"null",7:"bell",8:"backspace",10:"newline",11:"vertical tab",13:"carriage return",27:"escape",8203:"zero width space",8204:"zero width non-joiner",8205:"zero width joiner",8206:"left-to-right mark",8207:"right-to-left mark",8232:"line separator",8237:"left-to-right override",8238:"right-to-left override",8294:"left-to-right isolate",8295:"right-to-left isolate",8297:"pop directional isolate",8233:"paragraph separator",65279:"zero width no-break space",65532:"object replacement"};let zn=null;const Ln=n.Facet.define({combine(e){let t=n.combineConfig(e,{render:null,specialChars:Bn,addSpecialChars:null});return(t.replaceTabs=!function(){var e;if(null==zn&&"undefined"!=typeof document&&document.body){let t=document.body.style;zn=null!=(null!==(e=t.tabSize)&&void 0!==e?e:t.MozTabSize)}return zn||!1}())&&(t.specialChars=new RegExp("\t|"+t.specialChars.source,qn)),t.addSpecialChars&&(t.specialChars=new RegExp(t.specialChars.source+"|"+t.addSpecialChars.source,qn)),t}});let jn=null;class Wn extends oe{constructor(e,t){super(),this.options=e,this.code=t}eq(e){return e.code==this.code}toDOM(e){let t=(i=this.code)>=32?"•":10==i?"␤":String.fromCharCode(9216+i);var i;let n=e.state.phrase("Control character")+" "+(Dn[this.code]||"0x"+this.code.toString(16)),r=this.options.render&&this.options.render(this.code,n,t);if(r)return r;let o=document.createElement("span");return o.textContent=t,o.title=n,o.setAttribute("aria-label",n),o.className="cm-specialChar",o}ignoreEvent(){return!1}}class Yn extends oe{constructor(e){super(),this.width=e}eq(e){return e.width==this.width}toDOM(){let e=document.createElement("span");return e.textContent="\t",e.className="cm-tab",e.style.width=this.width+"px",e}ignoreEvent(){return!1}}const In=rt.fromClass(class{constructor(){this.height=1e3,this.attrs={style:"padding-bottom: 1000px"}}update(e){let{view:t}=e,i=t.viewState.editorHeight-t.defaultLineHeight-t.documentPadding.top-.5;i>=0&&i!=this.height&&(this.height=i,this.attrs={style:`padding-bottom: ${i}px`})}}),Gn=le.line({class:"cm-activeLine"}),Un=rt.fromClass(class{constructor(e){this.decorations=this.getDeco(e)}update(e){(e.docChanged||e.selectionSet)&&(this.decorations=this.getDeco(e.view))}getDeco(e){let t=-1,i=[];for(let n of e.state.selection.ranges){let r=e.lineBlockAt(n.head);r.from>t&&(i.push(Gn.range(r.from)),t=r.from)}return le.set(i)}},{decorations:e=>e.decorations});class Nn extends oe{constructor(e){super(),this.content=e}toDOM(e){let t=document.createElement("span");return t.className="cm-placeholder",t.style.pointerEvents="none",t.appendChild("string"==typeof this.content?document.createTextNode(this.content):"function"==typeof this.content?this.content(e):this.content.cloneNode(!0)),"string"==typeof this.content?t.setAttribute("aria-label","placeholder "+this.content):t.setAttribute("aria-hidden","true"),t}coordsAt(e){let t=e.firstChild?h(e.firstChild):[];if(!t.length)return null;let i=window.getComputedStyle(e.parentNode),n=O(t[0],"rtl"!=i.direction),r=parseInt(i.lineHeight);return n.bottom-n.top>1.5*r?{left:n.left,right:n.right,top:n.top,bottom:n.top+r}:n}ignoreEvent(){return!1}}const Fn=2e3;function Hn(e,t){let i=e.posAtCoords({x:t.clientX,y:t.clientY},!1),r=e.state.doc.lineAt(i),o=i-r.from,s=o>Fn?-1:o==r.length?function(e,t){let i=e.coordsAtPos(e.viewport.from);return i?Math.round(Math.abs((i.left-t)/e.defaultCharacterWidth)):-1}(e,t.clientX):n.countColumn(r.text,e.state.tabSize,i-r.from);return{line:r.number,col:s,off:o}}const Kn={Alt:[18,e=>!!e.altKey],Control:[17,e=>!!e.ctrlKey],Shift:[16,e=>!!e.shiftKey],Meta:[91,e=>!!e.metaKey]},Jn={style:"cursor: crosshair"},er="-10000px";class tr{constructor(e,t,i,n){this.facet=t,this.createTooltipView=i,this.removeTooltipView=n,this.input=e.state.facet(t),this.tooltips=this.input.filter((e=>e));let r=null;this.tooltipViews=this.tooltips.map((e=>r=i(e,r)))}update(e,t){var i;let n=e.state.facet(this.facet),r=n.filter((e=>e));if(n===this.input){for(let t of this.tooltipViews)t.update&&t.update(e);return!1}let o=[],s=t?[]:null;for(let i=0;i<r.length;i++){let n=r[i],a=-1;if(n){for(let e=0;e<this.tooltips.length;e++){let t=this.tooltips[e];t&&t.create==n.create&&(a=e)}if(a<0)o[i]=this.createTooltipView(n,i?o[i-1]:null),s&&(s[i]=!!n.above);else{let n=o[i]=this.tooltipViews[a];s&&(s[i]=t[a]),n.update&&n.update(e)}}}for(let e of this.tooltipViews)o.indexOf(e)<0&&(this.removeTooltipView(e),null===(i=e.destroy)||void 0===i||i.call(e));return t&&(s.forEach(((e,i)=>t[i]=e)),t.length=s.length),this.input=n,this.tooltips=r,this.tooltipViews=o,!0}}function ir(e){let{win:t}=e;return{top:0,left:0,bottom:t.innerHeight,right:t.innerWidth}}const nr=n.Facet.define({combine:e=>{var t,i,n;return{position:I.ios?"absolute":(null===(t=e.find((e=>e.position)))||void 0===t?void 0:t.position)||"fixed",parent:(null===(i=e.find((e=>e.parent)))||void 0===i?void 0:i.parent)||null,tooltipSpace:(null===(n=e.find((e=>e.tooltipSpace)))||void 0===n?void 0:n.tooltipSpace)||ir}}}),rr=new WeakMap,or=rt.fromClass(class{constructor(e){this.view=e,this.above=[],this.inView=!0,this.madeAbsolute=!1,this.lastTransaction=0,this.measureTimeout=-1;let t=e.state.facet(nr);this.position=t.position,this.parent=t.parent,this.classes=e.themeClasses,this.createContainer(),this.measureReq={read:this.readMeasure.bind(this),write:this.writeMeasure.bind(this),key:this},this.resizeObserver="function"==typeof ResizeObserver?new ResizeObserver((()=>this.measureSoon())):null,this.manager=new tr(e,lr,((e,t)=>this.createTooltip(e,t)),(e=>{this.resizeObserver&&this.resizeObserver.unobserve(e.dom),e.dom.remove()})),this.above=this.manager.tooltips.map((e=>!!e.above)),this.intersectionObserver="function"==typeof IntersectionObserver?new IntersectionObserver((e=>{Date.now()>this.lastTransaction-50&&e.length>0&&e[e.length-1].intersectionRatio<1&&this.measureSoon()}),{threshold:[1]}):null,this.observeIntersection(),e.win.addEventListener("resize",this.measureSoon=this.measureSoon.bind(this)),this.maybeMeasure()}createContainer(){this.parent?(this.container=document.createElement("div"),this.container.style.position="relative",this.container.className=this.view.themeClasses,this.parent.appendChild(this.container)):this.container=this.view.dom}observeIntersection(){if(this.intersectionObserver){this.intersectionObserver.disconnect();for(let e of this.manager.tooltipViews)this.intersectionObserver.observe(e.dom)}}measureSoon(){this.measureTimeout<0&&(this.measureTimeout=setTimeout((()=>{this.measureTimeout=-1,this.maybeMeasure()}),50))}update(e){e.transactions.length&&(this.lastTransaction=Date.now());let t=this.manager.update(e,this.above);t&&this.observeIntersection();let i=t||e.geometryChanged,n=e.state.facet(nr);if(n.position!=this.position&&!this.madeAbsolute){this.position=n.position;for(let e of this.manager.tooltipViews)e.dom.style.position=this.position;i=!0}if(n.parent!=this.parent){this.parent&&this.container.remove(),this.parent=n.parent,this.createContainer();for(let e of this.manager.tooltipViews)this.container.appendChild(e.dom);i=!0}else this.parent&&this.view.themeClasses!=this.classes&&(this.classes=this.container.className=this.view.themeClasses);i&&this.maybeMeasure()}createTooltip(e,t){let i=e.create(this.view),n=t?t.dom:null;if(i.dom.classList.add("cm-tooltip"),e.arrow&&!i.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")){let e=document.createElement("div");e.className="cm-tooltip-arrow",i.dom.appendChild(e)}return i.dom.style.position=this.position,i.dom.style.top=er,i.dom.style.left="0px",this.container.insertBefore(i.dom,n),i.mount&&i.mount(this.view),this.resizeObserver&&this.resizeObserver.observe(i.dom),i}destroy(){var e,t,i;this.view.win.removeEventListener("resize",this.measureSoon);for(let t of this.manager.tooltipViews)t.dom.remove(),null===(e=t.destroy)||void 0===e||e.call(t);this.parent&&this.container.remove(),null===(t=this.resizeObserver)||void 0===t||t.disconnect(),null===(i=this.intersectionObserver)||void 0===i||i.disconnect(),clearTimeout(this.measureTimeout)}readMeasure(){let e=1,t=1,i=!1;if("fixed"==this.position&&this.manager.tooltipViews.length){let{dom:e}=this.manager.tooltipViews[0];if(I.gecko)i=e.offsetParent!=this.container.ownerDocument.body;else if(e.style.top==er&&"0px"==e.style.left){let t=e.getBoundingClientRect();i=Math.abs(t.top+1e4)>1||Math.abs(t.left)>1}}if(i||"absolute"==this.position)if(this.parent){let i=this.parent.getBoundingClientRect();i.width&&i.height&&(e=i.width/this.parent.offsetWidth,t=i.height/this.parent.offsetHeight)}else({scaleX:e,scaleY:t}=this.view.viewState);let n=this.view.scrollDOM.getBoundingClientRect(),r=pt(this.view);return{visible:{left:n.left+r.left,top:n.top+r.top,right:n.right-r.right,bottom:n.bottom-r.bottom},parent:this.parent?this.container.getBoundingClientRect():this.view.dom.getBoundingClientRect(),pos:this.manager.tooltips.map(((e,t)=>{let i=this.manager.tooltipViews[t];return i.getCoords?i.getCoords(e.pos):this.view.coordsAtPos(e.pos)})),size:this.manager.tooltipViews.map((({dom:e})=>e.getBoundingClientRect())),space:this.view.state.facet(nr).tooltipSpace(this.view),scaleX:e,scaleY:t,makeAbsolute:i}}writeMeasure(e){var i;if(e.makeAbsolute){this.madeAbsolute=!0,this.position="absolute";for(let e of this.manager.tooltipViews)e.dom.style.position="absolute"}let{visible:n,space:r,scaleX:o,scaleY:s}=e,a=[];for(let l=0;l<this.manager.tooltips.length;l++){let h=this.manager.tooltips[l],c=this.manager.tooltipViews[l],{dom:d}=c,u=e.pos[l],f=e.size[l];if(!u||!1!==h.clip&&(u.bottom<=Math.max(n.top,r.top)||u.top>=Math.min(n.bottom,r.bottom)||u.right<Math.max(n.left,r.left)-.1||u.left>Math.min(n.right,r.right)+.1)){d.style.top=er;continue}let p=h.arrow?c.dom.querySelector(".cm-tooltip-arrow"):null,O=p?7:0,m=f.right-f.left,g=null!==(i=rr.get(c))&&void 0!==i?i:f.bottom-f.top,b=c.offset||ar,w=this.view.textDirection==t.Direction.LTR,y=f.width>r.right-r.left?w?r.left:r.right-f.width:w?Math.max(r.left,Math.min(u.left-(p?14:0)+b.x,r.right-m)):Math.min(Math.max(r.left,u.left-m+(p?14:0)-b.x),r.right-m),v=this.above[l];!h.strictSide&&(v?u.top-g-O-b.y<r.top:u.bottom+g+O+b.y>r.bottom)&&v==r.bottom-u.bottom>u.top-r.top&&(v=this.above[l]=!v);let x=(v?u.top-r.top:r.bottom-u.bottom)-O;if(x<g&&!1!==c.resize){if(x<this.view.defaultLineHeight){d.style.top=er;continue}rr.set(c,g),d.style.height=(g=x)/s+"px"}else d.style.height&&(d.style.height="");let S=v?u.top-g-O-b.y:u.bottom+O+b.y,k=y+m;if(!0!==c.overlap)for(let e of a)e.left<k&&e.right>y&&e.top<S+g&&e.bottom>S&&(S=v?e.top-g-2-O:e.bottom+O+2);if("absolute"==this.position?(d.style.top=(S-e.parent.top)/s+"px",d.style.left=(y-e.parent.left)/o+"px"):(d.style.top=S/s+"px",d.style.left=y/o+"px"),p){let e=u.left+(w?b.x:-b.x)-(y+14-7);p.style.left=e/o+"px"}!0!==c.overlap&&a.push({left:y,top:S,right:k,bottom:S+g}),d.classList.toggle("cm-tooltip-above",v),d.classList.toggle("cm-tooltip-below",!v),c.positioned&&c.positioned(e.space)}}maybeMeasure(){if(this.manager.tooltips.length&&(this.view.inView&&this.view.requestMeasure(this.measureReq),this.inView!=this.view.inView&&(this.inView=this.view.inView,!this.inView)))for(let e of this.manager.tooltipViews)e.dom.style.top=er}},{eventObservers:{scroll(){this.maybeMeasure()}}}),sr=rn.baseTheme({".cm-tooltip":{zIndex:500,boxSizing:"border-box"},"&light .cm-tooltip":{border:"1px solid #bbb",backgroundColor:"#f5f5f5"},"&light .cm-tooltip-section:not(:first-child)":{borderTop:"1px solid #bbb"},"&dark .cm-tooltip":{backgroundColor:"#333338",color:"white"},".cm-tooltip-arrow":{height:"7px",width:"14px",position:"absolute",zIndex:-1,overflow:"hidden","&:before, &:after":{content:"''",position:"absolute",width:0,height:0,borderLeft:"7px solid transparent",borderRight:"7px solid transparent"},".cm-tooltip-above &":{bottom:"-7px","&:before":{borderTop:"7px solid #bbb"},"&:after":{borderTop:"7px solid #f5f5f5",bottom:"1px"}},".cm-tooltip-below &":{top:"-7px","&:before":{borderBottom:"7px solid #bbb"},"&:after":{borderBottom:"7px solid #f5f5f5",top:"1px"}}},"&dark .cm-tooltip .cm-tooltip-arrow":{"&:before":{borderTopColor:"#333338",borderBottomColor:"#333338"},"&:after":{borderTopColor:"transparent",borderBottomColor:"transparent"}}}),ar={x:0,y:0},lr=n.Facet.define({enables:[or,sr]}),hr=n.Facet.define({combine:e=>e.reduce(((e,t)=>e.concat(t)),[])});class cr{static create(e){return new cr(e)}constructor(e){this.view=e,this.mounted=!1,this.dom=document.createElement("div"),this.dom.classList.add("cm-tooltip-hover"),this.manager=new tr(e,hr,((e,t)=>this.createHostedView(e,t)),(e=>e.dom.remove()))}createHostedView(e,t){let i=e.create(this.view);return i.dom.classList.add("cm-tooltip-section"),this.dom.insertBefore(i.dom,t?t.dom.nextSibling:this.dom.firstChild),this.mounted&&i.mount&&i.mount(this.view),i}mount(e){for(let t of this.manager.tooltipViews)t.mount&&t.mount(e);this.mounted=!0}positioned(e){for(let t of this.manager.tooltipViews)t.positioned&&t.positioned(e)}update(e){this.manager.update(e)}destroy(){var e;for(let t of this.manager.tooltipViews)null===(e=t.destroy)||void 0===e||e.call(t)}passProp(e){let t;for(let i of this.manager.tooltipViews){let n=i[e];if(void 0!==n)if(void 0===t)t=n;else if(t!==n)return}return t}get offset(){return this.passProp("offset")}get getCoords(){return this.passProp("getCoords")}get overlap(){return this.passProp("overlap")}get resize(){return this.passProp("resize")}}const dr=lr.compute([hr],(e=>{let t=e.facet(hr);return 0===t.length?null:{pos:Math.min(...t.map((e=>e.pos))),end:Math.max(...t.map((e=>{var t;return null!==(t=e.end)&&void 0!==t?t:e.pos}))),create:cr.create,above:t[0].above,arrow:t.some((e=>e.arrow))}}));class ur{constructor(e,t,i,n,r){this.view=e,this.source=t,this.field=i,this.setHover=n,this.hoverTime=r,this.hoverTimeout=-1,this.restartTimeout=-1,this.pending=null,this.lastMove={x:0,y:0,target:e.dom,time:0},this.checkHover=this.checkHover.bind(this),e.dom.addEventListener("mouseleave",this.mouseleave=this.mouseleave.bind(this)),e.dom.addEventListener("mousemove",this.mousemove=this.mousemove.bind(this))}update(){this.pending&&(this.pending=null,clearTimeout(this.restartTimeout),this.restartTimeout=setTimeout((()=>this.startHover()),20))}get active(){return this.view.state.field(this.field)}checkHover(){if(this.hoverTimeout=-1,this.active.length)return;let e=Date.now()-this.lastMove.time;e<this.hoverTime?this.hoverTimeout=setTimeout(this.checkHover,this.hoverTime-e):this.startHover()}startHover(){clearTimeout(this.restartTimeout);let{view:e,lastMove:i}=this,n=e.docView.nearest(i.target);if(!n)return;let r,o=1;if(n instanceof N)r=n.posAtStart;else{if(r=e.posAtCoords(i),null==r)return;let n=e.coordsAtPos(r);if(!n||i.y<n.top||i.y>n.bottom||i.x<n.left-e.defaultCharacterWidth||i.x>n.right+e.defaultCharacterWidth)return;let s=e.bidiSpans(e.state.doc.lineAt(r)).find((e=>e.from<=r&&e.to>=r)),a=s&&s.dir==t.Direction.RTL?-1:1;o=i.x<n.left?-a:a}let s=this.source(e,r,o);if(null==s?void 0:s.then){let t=this.pending={pos:r};s.then((i=>{this.pending==t&&(this.pending=null,!i||Array.isArray(i)&&!i.length||e.dispatch({effects:this.setHover.of(Array.isArray(i)?i:[i])}))}),(t=>et(e.state,t,"hover tooltip")))}else!s||Array.isArray(s)&&!s.length||e.dispatch({effects:this.setHover.of(Array.isArray(s)?s:[s])})}get tooltip(){let e=this.view.plugin(or),t=e?e.manager.tooltips.findIndex((e=>e.create==cr.create)):-1;return t>-1?e.manager.tooltipViews[t]:null}mousemove(e){var t,i;this.lastMove={x:e.clientX,y:e.clientY,target:e.target,time:Date.now()},this.hoverTimeout<0&&(this.hoverTimeout=setTimeout(this.checkHover,this.hoverTime));let{active:n,tooltip:r}=this;if(n.length&&r&&!function(e,t){let i,{left:n,right:r,top:o,bottom:s}=e.getBoundingClientRect();if(i=e.querySelector(".cm-tooltip-arrow")){let e=i.getBoundingClientRect();o=Math.min(e.top,o),s=Math.max(e.bottom,s)}return t.clientX>=n-fr&&t.clientX<=r+fr&&t.clientY>=o-fr&&t.clientY<=s+fr}(r.dom,e)||this.pending){let{pos:r}=n[0]||this.pending,o=null!==(i=null===(t=n[0])||void 0===t?void 0:t.end)&&void 0!==i?i:r;(r==o?this.view.posAtCoords(this.lastMove)==r:function(e,t,i,n,r){let o=e.scrollDOM.getBoundingClientRect(),s=e.documentTop+e.documentPadding.top+e.contentHeight;if(o.left>n||o.right<n||o.top>r||Math.min(o.bottom,s)<r)return!1;let a=e.posAtCoords({x:n,y:r},!1);return a>=t&&a<=i}(this.view,r,o,e.clientX,e.clientY))||(this.view.dispatch({effects:this.setHover.of([])}),this.pending=null)}}mouseleave(e){clearTimeout(this.hoverTimeout),this.hoverTimeout=-1;let{active:t}=this;if(t.length){let{tooltip:t}=this;t&&t.dom.contains(e.relatedTarget)?this.watchTooltipLeave(t.dom):this.view.dispatch({effects:this.setHover.of([])})}}watchTooltipLeave(e){let t=i=>{e.removeEventListener("mouseleave",t),this.active.length&&!this.view.dom.contains(i.relatedTarget)&&this.view.dispatch({effects:this.setHover.of([])})};e.addEventListener("mouseleave",t)}destroy(){clearTimeout(this.hoverTimeout),this.view.dom.removeEventListener("mouseleave",this.mouseleave),this.view.dom.removeEventListener("mousemove",this.mousemove)}}const fr=4,pr=n.StateEffect.define(),Or=pr.of(null),mr=n.Facet.define({combine(e){let t,i;for(let n of e)t=t||n.topContainer,i=i||n.bottomContainer;return{topContainer:t,bottomContainer:i}}}),gr=rt.fromClass(class{constructor(e){this.input=e.state.facet(yr),this.specs=this.input.filter((e=>e)),this.panels=this.specs.map((t=>t(e)));let t=e.state.facet(mr);this.top=new br(e,!0,t.topContainer),this.bottom=new br(e,!1,t.bottomContainer),this.top.sync(this.panels.filter((e=>e.top))),this.bottom.sync(this.panels.filter((e=>!e.top)));for(let e of this.panels)e.dom.classList.add("cm-panel"),e.mount&&e.mount()}update(e){let t=e.state.facet(mr);this.top.container!=t.topContainer&&(this.top.sync([]),this.top=new br(e.view,!0,t.topContainer)),this.bottom.container!=t.bottomContainer&&(this.bottom.sync([]),this.bottom=new br(e.view,!1,t.bottomContainer)),this.top.syncClasses(),this.bottom.syncClasses();let i=e.state.facet(yr);if(i!=this.input){let t=i.filter((e=>e)),n=[],r=[],o=[],s=[];for(let i of t){let t,a=this.specs.indexOf(i);a<0?(t=i(e.view),s.push(t)):(t=this.panels[a],t.update&&t.update(e)),n.push(t),(t.top?r:o).push(t)}this.specs=t,this.panels=n,this.top.sync(r),this.bottom.sync(o);for(let e of s)e.dom.classList.add("cm-panel"),e.mount&&e.mount()}else for(let t of this.panels)t.update&&t.update(e)}destroy(){this.top.sync([]),this.bottom.sync([])}},{provide:e=>rn.scrollMargins.of((t=>{let i=t.plugin(e);return i&&{top:i.top.scrollMargin(),bottom:i.bottom.scrollMargin()}}))});class br{constructor(e,t,i){this.view=e,this.top=t,this.container=i,this.dom=void 0,this.classes="",this.panels=[],this.syncClasses()}sync(e){for(let t of this.panels)t.destroy&&e.indexOf(t)<0&&t.destroy();this.panels=e,this.syncDOM()}syncDOM(){if(0==this.panels.length)return void(this.dom&&(this.dom.remove(),this.dom=void 0));if(!this.dom){this.dom=document.createElement("div"),this.dom.className=this.top?"cm-panels cm-panels-top":"cm-panels cm-panels-bottom",this.dom.style[this.top?"top":"bottom"]="0";let e=this.container||this.view.dom;e.insertBefore(this.dom,this.top?e.firstChild:null)}let e=this.dom.firstChild;for(let t of this.panels)if(t.dom.parentNode==this.dom){for(;e!=t.dom;)e=wr(e);e=e.nextSibling}else this.dom.insertBefore(t.dom,e);for(;e;)e=wr(e)}scrollMargin(){return!this.dom||this.container?0:Math.max(0,this.top?this.dom.getBoundingClientRect().bottom-Math.max(0,this.view.scrollDOM.getBoundingClientRect().top):Math.min(innerHeight,this.view.scrollDOM.getBoundingClientRect().bottom)-this.dom.getBoundingClientRect().top)}syncClasses(){if(this.container&&this.classes!=this.view.themeClasses){for(let e of this.classes.split(" "))e&&this.container.classList.remove(e);for(let e of(this.classes=this.view.themeClasses).split(" "))e&&this.container.classList.add(e)}}}function wr(e){let t=e.nextSibling;return e.remove(),t}const yr=n.Facet.define({enables:gr});class vr extends n.RangeValue{compare(e){return this==e||this.constructor==e.constructor&&this.eq(e)}eq(e){return!1}destroy(e){}}vr.prototype.elementClass="",vr.prototype.toDOM=void 0,vr.prototype.mapMode=n.MapMode.TrackBefore,vr.prototype.startSide=vr.prototype.endSide=-1,vr.prototype.point=!0;const xr=n.Facet.define(),Sr=n.Facet.define(),kr={class:"",renderEmptyElements:!1,elementStyle:"",markers:()=>n.RangeSet.empty,lineMarker:()=>null,widgetMarker:()=>null,lineMarkerChange:null,initialSpacer:null,updateSpacer:null,domEventHandlers:{}},Ar=n.Facet.define(),Qr=n.Facet.define({combine:e=>e.some((e=>e))});function Pr(e){let t=[Cr];return e&&!1===e.fixed&&t.push(Qr.of(!0)),t}const Cr=rt.fromClass(class{constructor(e){this.view=e,this.prevViewport=e.viewport,this.dom=document.createElement("div"),this.dom.className="cm-gutters",this.dom.setAttribute("aria-hidden","true"),this.dom.style.minHeight=this.view.contentHeight/this.view.scaleY+"px",this.gutters=e.state.facet(Ar).map((t=>new Mr(e,t)));for(let e of this.gutters)this.dom.appendChild(e.dom);this.fixed=!e.state.facet(Qr),this.fixed&&(this.dom.style.position="sticky"),this.syncGutters(!1),e.scrollDOM.insertBefore(this.dom,e.contentDOM)}update(e){if(this.updateGutters(e)){let t=this.prevViewport,i=e.view.viewport,n=Math.min(t.to,i.to)-Math.max(t.from,i.from);this.syncGutters(n<.8*(i.to-i.from))}e.geometryChanged&&(this.dom.style.minHeight=this.view.contentHeight/this.view.scaleY+"px"),this.view.state.facet(Qr)!=!this.fixed&&(this.fixed=!this.fixed,this.dom.style.position=this.fixed?"sticky":""),this.prevViewport=e.view.viewport}syncGutters(e){let i=this.dom.nextSibling;e&&this.dom.remove();let r=n.RangeSet.iter(this.view.state.facet(xr),this.view.viewport.from),o=[],s=this.gutters.map((e=>new Tr(e,this.view.viewport,-this.view.documentPadding.top)));for(let e of this.view.viewportLineBlocks)if(o.length&&(o=[]),Array.isArray(e.type)){let i=!0;for(let n of e.type)if(n.type==t.BlockType.Text&&i){Zr(r,o,n.from);for(let e of s)e.line(this.view,n,o);i=!1}else if(n.widget)for(let e of s)e.widget(this.view,n)}else if(e.type==t.BlockType.Text){Zr(r,o,e.from);for(let t of s)t.line(this.view,e,o)}else if(e.widget)for(let t of s)t.widget(this.view,e);for(let e of s)e.finish();e&&this.view.scrollDOM.insertBefore(this.dom,i)}updateGutters(e){let t=e.startState.facet(Ar),i=e.state.facet(Ar),r=e.docChanged||e.heightChanged||e.viewportChanged||!n.RangeSet.eq(e.startState.facet(xr),e.state.facet(xr),e.view.viewport.from,e.view.viewport.to);if(t==i)for(let t of this.gutters)t.update(e)&&(r=!0);else{r=!0;let n=[];for(let r of i){let i=t.indexOf(r);i<0?n.push(new Mr(this.view,r)):(this.gutters[i].update(e),n.push(this.gutters[i]))}for(let e of this.gutters)e.dom.remove(),n.indexOf(e)<0&&e.destroy();for(let e of n)this.dom.appendChild(e.dom);this.gutters=n}return r}destroy(){for(let e of this.gutters)e.destroy();this.dom.remove()}},{provide:e=>rn.scrollMargins.of((i=>{let n=i.plugin(e);return n&&0!=n.gutters.length&&n.fixed?i.textDirection==t.Direction.LTR?{left:n.dom.offsetWidth*i.scaleX}:{right:n.dom.offsetWidth*i.scaleX}:null}))});function $r(e){return Array.isArray(e)?e:[e]}function Zr(e,t,i){for(;e.value&&e.from<=i;)e.from==i&&t.push(e.value),e.next()}class Tr{constructor(e,t,i){this.gutter=e,this.height=i,this.i=0,this.cursor=n.RangeSet.iter(e.markers,t.from)}addElement(e,t,i){let{gutter:n}=this,r=(t.top-this.height)/e.scaleY,o=t.height/e.scaleY;if(this.i==n.elements.length){let t=new Er(e,o,r,i);n.elements.push(t),n.dom.appendChild(t.dom)}else n.elements[this.i].update(e,o,r,i);this.height=t.bottom,this.i++}line(e,t,i){let n=[];Zr(this.cursor,n,t.from),i.length&&(n=n.concat(i));let r=this.gutter.config.lineMarker(e,t,n);r&&n.unshift(r);let o=this.gutter;(0!=n.length||o.config.renderEmptyElements)&&this.addElement(e,t,n)}widget(e,t){let i=this.gutter.config.widgetMarker(e,t.widget,t),n=i?[i]:null;for(let i of e.state.facet(Sr)){let r=i(e,t.widget,t);r&&(n||(n=[])).push(r)}n&&this.addElement(e,t,n)}finish(){let e=this.gutter;for(;e.elements.length>this.i;){let t=e.elements.pop();e.dom.removeChild(t.dom),t.destroy()}}}class Mr{constructor(e,t){this.view=e,this.config=t,this.elements=[],this.spacer=null,this.dom=document.createElement("div"),this.dom.className="cm-gutter"+(this.config.class?" "+this.config.class:"");for(let i in t.domEventHandlers)this.dom.addEventListener(i,(n=>{let r,o=n.target;if(o!=this.dom&&this.dom.contains(o)){for(;o.parentNode!=this.dom;)o=o.parentNode;let e=o.getBoundingClientRect();r=(e.top+e.bottom)/2}else r=n.clientY;let s=e.lineBlockAtHeight(r-e.documentTop);t.domEventHandlers[i](e,s,n)&&n.preventDefault()}));this.markers=$r(t.markers(e)),t.initialSpacer&&(this.spacer=new Er(e,0,0,[t.initialSpacer(e)]),this.dom.appendChild(this.spacer.dom),this.spacer.dom.style.cssText+="visibility: hidden; pointer-events: none")}update(e){let t=this.markers;if(this.markers=$r(this.config.markers(e.view)),this.spacer&&this.config.updateSpacer){let t=this.config.updateSpacer(this.spacer.markers[0],e);t!=this.spacer.markers[0]&&this.spacer.update(e.view,0,0,[t])}let i=e.view.viewport;return!n.RangeSet.eq(this.markers,t,i.from,i.to)||!!this.config.lineMarkerChange&&this.config.lineMarkerChange(e)}destroy(){for(let e of this.elements)e.destroy()}}class Er{constructor(e,t,i,n){this.height=-1,this.above=0,this.markers=[],this.dom=document.createElement("div"),this.dom.className="cm-gutterElement",this.update(e,t,i,n)}update(e,t,i,n){this.height!=t&&(this.height=t,this.dom.style.height=t+"px"),this.above!=i&&(this.dom.style.marginTop=(this.above=i)?i+"px":""),function(e,t){if(e.length!=t.length)return!1;for(let i=0;i<e.length;i++)if(!e[i].compare(t[i]))return!1;return!0}(this.markers,n)||this.setMarkers(e,n)}setMarkers(e,t){let i="cm-gutterElement",n=this.dom.firstChild;for(let r=0,o=0;;){let s=o,a=r<t.length?t[r++]:null,l=!1;if(a){let e=a.elementClass;e&&(i+=" "+e);for(let e=o;e<this.markers.length;e++)if(this.markers[e].compare(a)){s=e,l=!0;break}}else s=this.markers.length;for(;o<s;){let e=this.markers[o++];if(e.toDOM){e.destroy(n);let t=n.nextSibling;n.remove(),n=t}}if(!a)break;a.toDOM&&(l?n=n.nextSibling:this.dom.insertBefore(a.toDOM(e),n)),l&&o++}this.dom.className=i,this.markers=t}destroy(){this.setMarkers(null,[])}}const Xr=n.Facet.define(),Rr=n.Facet.define(),_r=n.Facet.define({combine:e=>n.combineConfig(e,{formatNumber:String,domEventHandlers:{}},{domEventHandlers(e,t){let i=Object.assign({},e);for(let e in t){let n=i[e],r=t[e];i[e]=n?(e,t,i)=>n(e,t,i)||r(e,t,i):r}return i}})});class Vr extends vr{constructor(e){super(),this.number=e}eq(e){return this.number==e.number}toDOM(){return document.createTextNode(this.number)}}function qr(e,t){return e.state.facet(_r).formatNumber(t,e.state)}const Br=Ar.compute([_r],(e=>({class:"cm-lineNumbers",renderEmptyElements:!1,markers:e=>e.state.facet(Xr),lineMarker:(e,t,i)=>i.some((e=>e.toDOM))?null:new Vr(qr(e,e.state.doc.lineAt(t.from).number)),widgetMarker:(e,t,i)=>{for(let n of e.state.facet(Rr)){let r=n(e,t,i);if(r)return r}return null},lineMarkerChange:e=>e.startState.facet(_r)!=e.state.facet(_r),initialSpacer:e=>new Vr(qr(e,Dr(e.state.doc.lines))),updateSpacer(e,t){let i=qr(t.view,Dr(t.view.state.doc.lines));return i==e.number?e:new Vr(i)},domEventHandlers:e.facet(_r).domEventHandlers})));function Dr(e){let t=9;for(;t<e;)t=10*t+9;return t}const zr=new class extends vr{constructor(){super(...arguments),this.elementClass="cm-activeLineGutter"}},Lr=xr.compute(["selection"],(e=>{let t=[],i=-1;for(let n of e.selection.ranges){let r=e.doc.lineAt(n.head).from;r>i&&(i=r,t.push(zr.range(r)))}return n.RangeSet.of(t)}));function jr(e){return rt.define((t=>({decorations:e.createDeco(t),update(t){this.decorations=e.updateDeco(t,this.decorations)}})),{decorations:e=>e.decorations})}const Wr=le.mark({class:"cm-highlightTab"}),Yr=le.mark({class:"cm-highlightSpace"}),Ir=jr(new Vn({regexp:/\t| /g,decoration:e=>"\t"==e[0]?Wr:Yr,boundary:/\S/})),Gr=jr(new Vn({regexp:/\s+$/g,decoration:le.mark({class:"cm-trailingSpace"}),boundary:/\S/})),Ur={HeightMap:Si,HeightOracle:bi,MeasuredHeights:wi,QueryType:vi,ChangedRange:mt,computeOrder:Xe,moveVisually:Ve,clearHeightChangeFlag:gi,getHeightChangeFlag:()=>mi};t.BidiSpan=$e,t.BlockInfo=yi,t.Decoration=le,t.EditorView=rn,t.GutterMarker=vr,t.MatchDecorator=Vn,t.RectangleMarker=wn,t.ViewPlugin=rt,t.ViewUpdate=gt,t.WidgetType=oe,t.__test=Ur,t.closeHoverTooltips=Or,t.crosshairCursor=function(e={}){let[t,i]=Kn[e.key||"Alt"],n=rt.fromClass(class{constructor(e){this.view=e,this.isDown=!1}set(e){this.isDown!=e&&(this.isDown=e,this.view.update([]))}},{eventObservers:{keydown(e){this.set(e.keyCode==t||i(e))},keyup(e){e.keyCode!=t&&i(e)||this.set(!1)},mousemove(e){this.set(i(e))}}});return[n,rn.contentAttributes.of((e=>{var t;return(null===(t=e.plugin(n))||void 0===t?void 0:t.isDown)?Jn:null}))]},t.drawSelection=function(e={}){return[Qn.of(e),Cn,Zn,Mn,Ne.of(!0)]},t.dropCursor=function(){return[Xn,Rn]},t.getDrawSelectionConfig=function(e){return e.facet(Qn)},t.getPanel=function(e,t){let i=e.plugin(gr),n=i?i.specs.indexOf(t):-1;return n>-1?i.panels[n]:null},t.getTooltip=function(e,t){let i=e.plugin(or);if(!i)return null;let n=i.manager.tooltips.indexOf(t);return n<0?null:i.manager.tooltipViews[n]},t.gutter=function(e){return[Pr(),Ar.of(Object.assign(Object.assign({},kr),e))]},t.gutterLineClass=xr,t.gutterWidgetClass=Sr,t.gutters=Pr,t.hasHoverTooltips=function(e){return e.facet(hr).some((e=>e))},t.highlightActiveLine=function(){return Un},t.highlightActiveLineGutter=function(){return Lr},t.highlightSpecialChars=function(e={}){return[Ln.of(e),jn||(jn=rt.fromClass(class{constructor(e){this.view=e,this.decorations=le.none,this.decorationCache=Object.create(null),this.decorator=this.makeDecorator(e.state.facet(Ln)),this.decorations=this.decorator.createDeco(e)}makeDecorator(e){return new Vn({regexp:e.specialChars,decoration:(t,i,r)=>{let{doc:o}=i.state,s=n.codePointAt(t[0],0);if(9==s){let e=o.lineAt(r),t=i.state.tabSize,s=n.countColumn(e.text,t,r-e.from);return le.replace({widget:new Yn((t-s%t)*this.view.defaultCharacterWidth/this.view.scaleX)})}return this.decorationCache[s]||(this.decorationCache[s]=le.replace({widget:new Wn(e,s)}))},boundary:e.replaceTabs?void 0:/[^]/})}update(e){let t=e.state.facet(Ln);e.startState.facet(Ln)!=t?(this.decorator=this.makeDecorator(t),this.decorations=this.decorator.createDeco(e.view)):this.decorations=this.decorator.updateDeco(e,this.decorations)}},{decorations:e=>e.decorations}))]},t.highlightTrailingWhitespace=function(){return Gr},t.highlightWhitespace=function(){return Ir},t.hoverTooltip=function(e,t={}){let i=n.StateEffect.define(),r=n.StateField.define({create:()=>[],update(e,r){if(e.length&&(t.hideOnChange&&(r.docChanged||r.selection)?e=[]:t.hideOn&&(e=e.filter((e=>!t.hideOn(r,e)))),r.docChanged)){let t=[];for(let i of e){let e=r.changes.mapPos(i.pos,-1,n.MapMode.TrackDel);if(null!=e){let n=Object.assign(Object.create(null),i);n.pos=e,null!=n.end&&(n.end=r.changes.mapPos(n.end)),t.push(n)}}e=t}for(let t of r.effects)t.is(i)&&(e=t.value),t.is(pr)&&(e=[]);return e},provide:e=>hr.from(e)});return{active:r,extension:[r,rt.define((n=>new ur(n,e,r,i,t.hoverTime||300))),dr]}},t.keymap=un,t.layer=kn,t.lineNumberMarkers=Xr,t.lineNumberWidgetMarker=Rr,t.lineNumbers=function(e={}){return[_r.of(e),Pr(),Br]},t.logException=et,t.panels=function(e){return e?[mr.of(e)]:[]},t.placeholder=function(e){return rt.fromClass(class{constructor(t){this.view=t,this.placeholder=e?le.set([le.widget({widget:new Nn(e),side:1}).range(0)]):le.none}get decorations(){return this.view.state.doc.length?le.none:this.placeholder}},{decorations:e=>e.decorations})},t.rectangularSelection=function(e){let t=(null==e?void 0:e.eventFilter)||(e=>e.altKey&&0==e.button);return rn.mouseSelectionStyle.of(((e,i)=>t(i)?function(e,t){let i=Hn(e,t),r=e.state.selection;return i?{update(e){if(e.docChanged){let t=e.changes.mapPos(e.startState.doc.line(i.line).from),n=e.state.doc.lineAt(t);i={line:n.number,col:i.col,off:Math.min(i.off,n.length)},r=r.map(e.changes)}},get(t,o,s){let a=Hn(e,t);if(!a)return r;let l=function(e,t,i){let r=Math.min(t.line,i.line),o=Math.max(t.line,i.line),s=[];if(t.off>Fn||i.off>Fn||t.col<0||i.col<0){let a=Math.min(t.off,i.off),l=Math.max(t.off,i.off);for(let t=r;t<=o;t++){let i=e.doc.line(t);i.length<=l&&s.push(n.EditorSelection.range(i.from+a,i.to+l))}}else{let a=Math.min(t.col,i.col),l=Math.max(t.col,i.col);for(let t=r;t<=o;t++){let i=e.doc.line(t),r=n.findColumn(i.text,a,e.tabSize,!0);if(r<0)s.push(n.EditorSelection.cursor(i.to));else{let t=n.findColumn(i.text,l,e.tabSize);s.push(n.EditorSelection.range(i.from+r,i.from+t))}}}return s}(e.state,i,a);return l.length?s?n.EditorSelection.create(l.concat(r.ranges)):n.EditorSelection.create(l):r}}:null}(e,i):null))},t.repositionTooltips=function(e){let t=e.plugin(or);t&&t.maybeMeasure()},t.runScopeHandlers=function(e,t,i){return bn(pn(e.state),t,e,i)},t.scrollPastEnd=function(){return[In,at.of((e=>{var t;return(null===(t=e.plugin(In))||void 0===t?void 0:t.attrs)||null}))]},t.showPanel=yr,t.showTooltip=lr,t.tooltips=function(e={}){return nr.of(e)}},2696:(e,t)=>{"use strict";const i=1024;let n=0;class r{constructor(e,t){this.from=e,this.to=t}}class o{constructor(e={}){this.id=n++,this.perNode=!!e.perNode,this.deserialize=e.deserialize||(()=>{throw new Error("This node type doesn't define a deserialize function")})}add(e){if(this.perNode)throw new RangeError("Can't add per-node props to node types");return"function"!=typeof e&&(e=l.match(e)),t=>{let i=e(t);return void 0===i?null:[this,i]}}}o.closedBy=new o({deserialize:e=>e.split(" ")}),o.openedBy=new o({deserialize:e=>e.split(" ")}),o.group=new o({deserialize:e=>e.split(" ")}),o.isolate=new o({deserialize:e=>{if(e&&"rtl"!=e&&"ltr"!=e&&"auto"!=e)throw new RangeError("Invalid value for isolate: "+e);return e||"auto"}}),o.contextHash=new o({perNode:!0}),o.lookAhead=new o({perNode:!0}),o.mounted=new o({perNode:!0});class s{constructor(e,t,i){this.tree=e,this.overlay=t,this.parser=i}static get(e){return e&&e.props&&e.props[o.mounted.id]}}const a=Object.create(null);class l{constructor(e,t,i,n=0){this.name=e,this.props=t,this.id=i,this.flags=n}static define(e){let t=e.props&&e.props.length?Object.create(null):a,i=(e.top?1:0)|(e.skipped?2:0)|(e.error?4:0)|(null==e.name?8:0),n=new l(e.name||"",t,e.id,i);if(e.props)for(let i of e.props)if(Array.isArray(i)||(i=i(n)),i){if(i[0].perNode)throw new RangeError("Can't store a per-node prop on a node type");t[i[0].id]=i[1]}return n}prop(e){return this.props[e.id]}get isTop(){return(1&this.flags)>0}get isSkipped(){return(2&this.flags)>0}get isError(){return(4&this.flags)>0}get isAnonymous(){return(8&this.flags)>0}is(e){if("string"==typeof e){if(this.name==e)return!0;let t=this.prop(o.group);return!!t&&t.indexOf(e)>-1}return this.id==e}static match(e){let t=Object.create(null);for(let i in e)for(let n of i.split(" "))t[n]=e[i];return e=>{for(let i=e.prop(o.group),n=-1;n<(i?i.length:0);n++){let r=t[n<0?e.name:i[n]];if(r)return r}}}}l.none=new l("",Object.create(null),0,8);class h{constructor(e){this.types=e;for(let t=0;t<e.length;t++)if(e[t].id!=t)throw new RangeError("Node type ids should correspond to array positions when creating a node set")}extend(...e){let t=[];for(let i of this.types){let n=null;for(let t of e){let e=t(i);e&&(n||(n=Object.assign({},i.props)),n[e[0].id]=e[1])}t.push(n?new l(i.name,n,i.id,i.flags):i)}return new h(t)}}const c=new WeakMap,d=new WeakMap;var u;t.IterMode=void 0,(u=t.IterMode||(t.IterMode={}))[u.ExcludeBuffers=1]="ExcludeBuffers",u[u.IncludeAnonymous=2]="IncludeAnonymous",u[u.IgnoreMounts=4]="IgnoreMounts",u[u.IgnoreOverlays=8]="IgnoreOverlays";class f{constructor(e,t,i,n,r){if(this.type=e,this.children=t,this.positions=i,this.length=n,this.props=null,r&&r.length){this.props=Object.create(null);for(let[e,t]of r)this.props["number"==typeof e?e:e.id]=t}}toString(){let e=s.get(this);if(e&&!e.overlay)return e.tree.toString();let t="";for(let e of this.children){let i=e.toString();i&&(t&&(t+=","),t+=i)}return this.type.name?(/\W/.test(this.type.name)&&!this.type.isError?JSON.stringify(this.type.name):this.type.name)+(t.length?"("+t+")":""):t}cursor(e=0){return new Q(this.topNode,e)}cursorAt(e,t=0,i=0){let n=c.get(this)||this.topNode,r=new Q(n);return r.moveTo(e,t),c.set(this,r._tree),r}get topNode(){return new w(this,0,0,null)}resolve(e,t=0){let i=g(c.get(this)||this.topNode,e,t,!1);return c.set(this,i),i}resolveInner(e,t=0){let i=g(d.get(this)||this.topNode,e,t,!0);return d.set(this,i),i}resolveStack(e,t=0){return function(e,t,i){let n=e.resolveInner(t,i),r=null;for(let e=n instanceof w?n:n.context.parent;e;e=e.parent)if(e.index<0){let o=e.parent;(r||(r=[n])).push(o.resolve(t,i)),e=o}else{let o=s.get(e.tree);if(o&&o.overlay&&o.overlay[0].from<=t&&o.overlay[o.overlay.length-1].to>=t){let s=new w(o.tree,o.overlay[0].from+e.from,-1,e);(r||(r=[n])).push(g(s,t,i,!1))}}return r?k(r):n}(this,e,t)}iterate(e){let{enter:i,leave:n,from:r=0,to:o=this.length}=e,s=e.mode||0,a=(s&t.IterMode.IncludeAnonymous)>0;for(let e=this.cursor(s|t.IterMode.IncludeAnonymous);;){let t=!1;if(e.from<=o&&e.to>=r&&(!a&&e.type.isAnonymous||!1!==i(e))){if(e.firstChild())continue;t=!0}for(;t&&n&&(a||!e.type.isAnonymous)&&n(e),!e.nextSibling();){if(!e.parent())return;t=!0}}}prop(e){return e.perNode?this.props?this.props[e.id]:void 0:this.type.prop(e)}get propValues(){let e=[];if(this.props)for(let t in this.props)e.push([+t,this.props[t]]);return e}balance(e={}){return this.children.length<=8?this:Z(l.none,this.children,this.positions,0,this.children.length,0,this.length,((e,t,i)=>new f(this.type,e,t,i,this.propValues)),e.makeTree||((e,t,i)=>new f(l.none,e,t,i)))}static build(e){return function(e){var t;let{buffer:n,nodeSet:r,maxBufferLength:s=i,reused:a=[],minRepeatType:l=r.types.length}=e,h=Array.isArray(n)?new p(n,n.length):n,c=r.types,d=0,u=0;function m(e,t,i,n,p,v){let{id:x,start:S,end:k,size:A}=h,Q=u,P=d;for(;A<0;){if(h.next(),-1==A){let t=a[x];return i.push(t),void n.push(S-e)}if(-3==A)return void(d=x);if(-4==A)return void(u=x);throw new RangeError(`Unrecognized record size: ${A}`)}let C,$,T=c[x],M=S-e;if(k-S<=s&&($=function(e,t){let i=h.fork(),n=0,r=0,o=0,a=i.end-s,c={size:0,start:0,skip:0};e:for(let s=i.pos-e;i.pos>s;){let e=i.size;if(i.id==t&&e>=0){c.size=n,c.start=r,c.skip=o,o+=4,n+=4,i.next();continue}let h=i.pos-e;if(e<0||h<s||i.start<a)break;let d=i.id>=l?4:0,u=i.start;for(i.next();i.pos>h;){if(i.size<0){if(-3!=i.size)break e;d+=4}else i.id>=l&&(d+=4);i.next()}r=u,n+=e,o+=d}return(t<0||n==e)&&(c.size=n,c.start=r,c.skip=o),c.size>4?c:void 0}(h.pos-t,p))){let t=new Uint16Array($.size-$.skip),i=h.pos-$.size,n=t.length;for(;h.pos>i;)n=y($.start,t,n);C=new O(t,k-$.start,r),M=$.start-e}else{let e=h.pos-A;h.next();let t=[],i=[],n=x>=l?x:-1,r=0,a=k;for(;h.pos>e;)n>=0&&h.id==n&&h.size>=0?(h.end<=a-s&&(b(t,i,S,r,h.end,a,n,Q,P),r=t.length,a=h.end),h.next()):v>2500?g(S,e,t,i):m(S,e,t,i,n,v+1);if(n>=0&&r>0&&r<t.length&&b(t,i,S,r,S,a,n,Q,P),t.reverse(),i.reverse(),n>-1&&r>0){let e=function(e,t){return(i,n,r)=>{let s,a,l=0,h=i.length-1;if(h>=0&&(s=i[h])instanceof f){if(!h&&s.type==e&&s.length==r)return s;(a=s.prop(o.lookAhead))&&(l=n[h]+s.length+a)}return w(e,i,n,r,l,t)}}(T,P);C=Z(T,t,i,0,t.length,0,k-S,e,e)}else C=w(T,t,i,k-S,Q-k,P)}i.push(C),n.push(M)}function g(e,t,i,n){let o=[],a=0,l=-1;for(;h.pos>t;){let{id:e,start:t,end:i,size:n}=h;if(n>4)h.next();else{if(l>-1&&t<l)break;l<0&&(l=i-s),o.push(e,t,i),a++,h.next()}}if(a){let t=new Uint16Array(4*a),s=o[o.length-2];for(let e=o.length-3,i=0;e>=0;e-=3)t[i++]=o[e],t[i++]=o[e+1]-s,t[i++]=o[e+2]-s,t[i++]=i;i.push(new O(t,o[2]-s,r)),n.push(s-e)}}function b(e,t,i,n,o,s,a,l,h){let c=[],d=[];for(;e.length>n;)c.push(e.pop()),d.push(t.pop()+i-o);e.push(w(r.types[a],c,d,s-o,l-s,h)),t.push(o-i)}function w(e,t,i,n,r,s,a){if(s){let e=[o.contextHash,s];a=a?[e].concat(a):[e]}if(r>25){let e=[o.lookAhead,r];a=a?[e].concat(a):[e]}return new f(e,t,i,n,a)}function y(e,t,i){let{id:n,start:r,end:o,size:s}=h;if(h.next(),s>=0&&n<l){let a=i;if(s>4){let n=h.pos-(s-4);for(;h.pos>n;)i=y(e,t,i)}t[--i]=a,t[--i]=o-e,t[--i]=r-e,t[--i]=n}else-3==s?d=n:-4==s&&(u=n);return i}let v=[],x=[];for(;h.pos>0;)m(e.start||0,e.bufferStart||0,v,x,-1,0);let S=null!==(t=e.length)&&void 0!==t?t:v.length?x[0]+v[0].length:0;return new f(c[e.topID],v.reverse(),x.reverse(),S)}(e)}}f.empty=new f(l.none,[],[],0);class p{constructor(e,t){this.buffer=e,this.index=t}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}get pos(){return this.index}next(){this.index-=4}fork(){return new p(this.buffer,this.index)}}class O{constructor(e,t,i){this.buffer=e,this.length=t,this.set=i}get type(){return l.none}toString(){let e=[];for(let t=0;t<this.buffer.length;)e.push(this.childString(t)),t=this.buffer[t+3];return e.join(",")}childString(e){let t=this.buffer[e],i=this.buffer[e+3],n=this.set.types[t],r=n.name;if(/\W/.test(r)&&!n.isError&&(r=JSON.stringify(r)),i==(e+=4))return r;let o=[];for(;e<i;)o.push(this.childString(e)),e=this.buffer[e+3];return r+"("+o.join(",")+")"}findChild(e,t,i,n,r){let{buffer:o}=this,s=-1;for(let a=e;a!=t&&!(m(r,n,o[a+1],o[a+2])&&(s=a,i>0));a=o[a+3]);return s}slice(e,t,i){let n=this.buffer,r=new Uint16Array(t-e),o=0;for(let s=e,a=0;s<t;){r[a++]=n[s++],r[a++]=n[s++]-i;let t=r[a++]=n[s++]-i;r[a++]=n[s++]-e,o=Math.max(o,t)}return new O(r,o,this.set)}}function m(e,t,i,n){switch(e){case-2:return i<t;case-1:return n>=t&&i<t;case 0:return i<t&&n>t;case 1:return i<=t&&n>t;case 2:return n>t;case 4:return!0}}function g(e,i,n,r){for(var o;e.from==e.to||(n<1?e.from>=i:e.from>i)||(n>-1?e.to<=i:e.to<i);){let t=!r&&e instanceof w&&e.index<0?null:e.parent;if(!t)return e;e=t}let s=r?0:t.IterMode.IgnoreOverlays;if(r)for(let t=e,r=t.parent;r;t=r,r=t.parent)t instanceof w&&t.index<0&&(null===(o=r.enter(i,n,s))||void 0===o?void 0:o.from)!=t.from&&(e=r);for(;;){let t=e.enter(i,n,s);if(!t)return e;e=t}}class b{cursor(e=0){return new Q(this,e)}getChild(e,t=null,i=null){let n=y(this,e,t,i);return n.length?n[0]:null}getChildren(e,t=null,i=null){return y(this,e,t,i)}resolve(e,t=0){return g(this,e,t,!1)}resolveInner(e,t=0){return g(this,e,t,!0)}matchContext(e){return v(this.parent,e)}enterUnfinishedNodesBefore(e){let t=this.childBefore(e),i=this;for(;t;){let e=t.lastChild;if(!e||e.to!=t.to)break;e.type.isError&&e.from==e.to?(i=t,t=e.prevSibling):t=e}return i}get node(){return this}get next(){return this.parent}}class w extends b{constructor(e,t,i,n){super(),this._tree=e,this.from=t,this.index=i,this._parent=n}get type(){return this._tree.type}get name(){return this._tree.type.name}get to(){return this.from+this._tree.length}nextChild(e,i,n,r,o=0){for(let a=this;;){for(let{children:l,positions:h}=a._tree,c=i>0?l.length:-1;e!=c;e+=i){let c=l[e],d=h[e]+a.from;if(m(r,n,d,d+c.length))if(c instanceof O){if(o&t.IterMode.ExcludeBuffers)continue;let s=c.findChild(0,c.buffer.length,i,n-d,r);if(s>-1)return new S(new x(a,c,e,d),null,s)}else if(o&t.IterMode.IncludeAnonymous||!c.type.isAnonymous||P(c)){let l;if(!(o&t.IterMode.IgnoreMounts)&&(l=s.get(c))&&!l.overlay)return new w(l.tree,d,e,a);let h=new w(c,d,e,a);return o&t.IterMode.IncludeAnonymous||!h.type.isAnonymous?h:h.nextChild(i<0?c.children.length-1:0,i,n,r)}}if(o&t.IterMode.IncludeAnonymous||!a.type.isAnonymous)return null;if(e=a.index>=0?a.index+i:i<0?-1:a._parent._tree.children.length,a=a._parent,!a)return null}}get firstChild(){return this.nextChild(0,1,0,4)}get lastChild(){return this.nextChild(this._tree.children.length-1,-1,0,4)}childAfter(e){return this.nextChild(0,1,e,2)}childBefore(e){return this.nextChild(this._tree.children.length-1,-1,e,-2)}enter(e,i,n=0){let r;if(!(n&t.IterMode.IgnoreOverlays)&&(r=s.get(this._tree))&&r.overlay){let t=e-this.from;for(let{from:e,to:n}of r.overlay)if((i>0?e<=t:e<t)&&(i<0?n>=t:n>t))return new w(r.tree,r.overlay[0].from+this.from,-1,this)}return this.nextChild(0,1,e,i,n)}nextSignificantParent(){let e=this;for(;e.type.isAnonymous&&e._parent;)e=e._parent;return e}get parent(){return this._parent?this._parent.nextSignificantParent():null}get nextSibling(){return this._parent&&this.index>=0?this._parent.nextChild(this.index+1,1,0,4):null}get prevSibling(){return this._parent&&this.index>=0?this._parent.nextChild(this.index-1,-1,0,4):null}get tree(){return this._tree}toTree(){return this._tree}toString(){return this._tree.toString()}}function y(e,t,i,n){let r=e.cursor(),o=[];if(!r.firstChild())return o;if(null!=i)for(let e=!1;!e;)if(e=r.type.is(i),!r.nextSibling())return o;for(;;){if(null!=n&&r.type.is(n))return o;if(r.type.is(t)&&o.push(r.node),!r.nextSibling())return null==n?o:[]}}function v(e,t,i=t.length-1){for(let n=e;i>=0;n=n.parent){if(!n)return!1;if(!n.type.isAnonymous){if(t[i]&&t[i]!=n.name)return!1;i--}}return!0}class x{constructor(e,t,i,n){this.parent=e,this.buffer=t,this.index=i,this.start=n}}class S extends b{get name(){return this.type.name}get from(){return this.context.start+this.context.buffer.buffer[this.index+1]}get to(){return this.context.start+this.context.buffer.buffer[this.index+2]}constructor(e,t,i){super(),this.context=e,this._parent=t,this.index=i,this.type=e.buffer.set.types[e.buffer.buffer[i]]}child(e,t,i){let{buffer:n}=this.context,r=n.findChild(this.index+4,n.buffer[this.index+3],e,t-this.context.start,i);return r<0?null:new S(this.context,this,r)}get firstChild(){return this.child(1,0,4)}get lastChild(){return this.child(-1,0,4)}childAfter(e){return this.child(1,e,2)}childBefore(e){return this.child(-1,e,-2)}enter(e,i,n=0){if(n&t.IterMode.ExcludeBuffers)return null;let{buffer:r}=this.context,o=r.findChild(this.index+4,r.buffer[this.index+3],i>0?1:-1,e-this.context.start,i);return o<0?null:new S(this.context,this,o)}get parent(){return this._parent||this.context.parent.nextSignificantParent()}externalSibling(e){return this._parent?null:this.context.parent.nextChild(this.context.index+e,e,0,4)}get nextSibling(){let{buffer:e}=this.context,t=e.buffer[this.index+3];return t<(this._parent?e.buffer[this._parent.index+3]:e.buffer.length)?new S(this.context,this._parent,t):this.externalSibling(1)}get prevSibling(){let{buffer:e}=this.context,t=this._parent?this._parent.index+4:0;return this.index==t?this.externalSibling(-1):new S(this.context,this._parent,e.findChild(t,this.index,-1,0,4))}get tree(){return null}toTree(){let e=[],t=[],{buffer:i}=this.context,n=this.index+4,r=i.buffer[this.index+3];if(r>n){let o=i.buffer[this.index+1];e.push(i.slice(n,r,o)),t.push(0)}return new f(this.type,e,t,this.to-this.from)}toString(){return this.context.buffer.childString(this.index)}}function k(e){if(!e.length)return null;let t=0,i=e[0];for(let n=1;n<e.length;n++){let r=e[n];(r.from>i.from||r.to<i.to)&&(i=r,t=n)}let n=i instanceof w&&i.index<0?null:i.parent,r=e.slice();return n?r[t]=n:r.splice(t,1),new A(r,i)}class A{constructor(e,t){this.heads=e,this.node=t}get next(){return k(this.heads)}}class Q{get name(){return this.type.name}constructor(e,t=0){if(this.mode=t,this.buffer=null,this.stack=[],this.index=0,this.bufferNode=null,e instanceof w)this.yieldNode(e);else{this._tree=e.context.parent,this.buffer=e.context;for(let t=e._parent;t;t=t._parent)this.stack.unshift(t.index);this.bufferNode=e,this.yieldBuf(e.index)}}yieldNode(e){return!!e&&(this._tree=e,this.type=e.type,this.from=e.from,this.to=e.to,!0)}yieldBuf(e,t){this.index=e;let{start:i,buffer:n}=this.buffer;return this.type=t||n.set.types[n.buffer[e]],this.from=i+n.buffer[e+1],this.to=i+n.buffer[e+2],!0}yield(e){return!!e&&(e instanceof w?(this.buffer=null,this.yieldNode(e)):(this.buffer=e.context,this.yieldBuf(e.index,e.type)))}toString(){return this.buffer?this.buffer.buffer.childString(this.index):this._tree.toString()}enterChild(e,t,i){if(!this.buffer)return this.yield(this._tree.nextChild(e<0?this._tree._tree.children.length-1:0,e,t,i,this.mode));let{buffer:n}=this.buffer,r=n.findChild(this.index+4,n.buffer[this.index+3],e,t-this.buffer.start,i);return!(r<0)&&(this.stack.push(this.index),this.yieldBuf(r))}firstChild(){return this.enterChild(1,0,4)}lastChild(){return this.enterChild(-1,0,4)}childAfter(e){return this.enterChild(1,e,2)}childBefore(e){return this.enterChild(-1,e,-2)}enter(e,i,n=this.mode){return this.buffer?!(n&t.IterMode.ExcludeBuffers)&&this.enterChild(1,e,i):this.yield(this._tree.enter(e,i,n))}parent(){if(!this.buffer)return this.yieldNode(this.mode&t.IterMode.IncludeAnonymous?this._tree._parent:this._tree.parent);if(this.stack.length)return this.yieldBuf(this.stack.pop());let e=this.mode&t.IterMode.IncludeAnonymous?this.buffer.parent:this.buffer.parent.nextSignificantParent();return this.buffer=null,this.yieldNode(e)}sibling(e){if(!this.buffer)return!!this._tree._parent&&this.yield(this._tree.index<0?null:this._tree._parent.nextChild(this._tree.index+e,e,0,4,this.mode));let{buffer:t}=this.buffer,i=this.stack.length-1;if(e<0){let e=i<0?0:this.stack[i]+4;if(this.index!=e)return this.yieldBuf(t.findChild(e,this.index,-1,0,4))}else{let e=t.buffer[this.index+3];if(e<(i<0?t.buffer.length:t.buffer[this.stack[i]+3]))return this.yieldBuf(e)}return i<0&&this.yield(this.buffer.parent.nextChild(this.buffer.index+e,e,0,4,this.mode))}nextSibling(){return this.sibling(1)}prevSibling(){return this.sibling(-1)}atLastNode(e){let i,n,{buffer:r}=this;if(r){if(e>0){if(this.index<r.buffer.buffer.length)return!1}else for(let e=0;e<this.index;e++)if(r.buffer.buffer[e+3]<this.index)return!1;({index:i,parent:n}=r)}else({index:i,_parent:n}=this._tree);for(;n;({index:i,_parent:n}=n))if(i>-1)for(let r=i+e,o=e<0?-1:n._tree.children.length;r!=o;r+=e){let e=n._tree.children[r];if(this.mode&t.IterMode.IncludeAnonymous||e instanceof O||!e.type.isAnonymous||P(e))return!1}return!0}move(e,t){if(t&&this.enterChild(e,0,4))return!0;for(;;){if(this.sibling(e))return!0;if(this.atLastNode(e)||!this.parent())return!1}}next(e=!0){return this.move(1,e)}prev(e=!0){return this.move(-1,e)}moveTo(e,t=0){for(;(this.from==this.to||(t<1?this.from>=e:this.from>e)||(t>-1?this.to<=e:this.to<e))&&this.parent(););for(;this.enterChild(1,e,t););return this}get node(){if(!this.buffer)return this._tree;let e=this.bufferNode,t=null,i=0;if(e&&e.context==this.buffer)e:for(let n=this.index,r=this.stack.length;r>=0;){for(let o=e;o;o=o._parent)if(o.index==n){if(n==this.index)return o;t=o,i=r+1;break e}n=this.stack[--r]}for(let e=i;e<this.stack.length;e++)t=new S(this.buffer,t,this.stack[e]);return this.bufferNode=new S(this.buffer,t,this.index)}get tree(){return this.buffer?null:this._tree._tree}iterate(e,t){for(let i=0;;){let n=!1;if(this.type.isAnonymous||!1!==e(this)){if(this.firstChild()){i++;continue}this.type.isAnonymous||(n=!0)}for(;;){if(n&&t&&t(this),n=this.type.isAnonymous,!i)return;if(this.nextSibling())break;this.parent(),i--,n=!0}}}matchContext(e){if(!this.buffer)return v(this.node.parent,e);let{buffer:t}=this.buffer,{types:i}=t.set;for(let n=e.length-1,r=this.stack.length-1;n>=0;r--){if(r<0)return v(this._tree,e,n);let o=i[t.buffer[this.stack[r]]];if(!o.isAnonymous){if(e[n]&&e[n]!=o.name)return!1;n--}}return!0}}function P(e){return e.children.some((e=>e instanceof O||!e.type.isAnonymous||P(e)))}const C=new WeakMap;function $(e,t){if(!e.isAnonymous||t instanceof O||t.type!=e)return 1;let i=C.get(t);if(null==i){i=1;for(let n of t.children){if(n.type!=e||!(n instanceof f)){i=1;break}i+=$(e,n)}C.set(t,i)}return i}function Z(e,t,i,n,r,o,s,a,l){let h=0;for(let i=n;i<r;i++)h+=$(e,t[i]);let c=Math.ceil(1.5*h/8),d=[],u=[];return function t(i,n,r,s,a){for(let h=r;h<s;){let r=h,f=n[h],p=$(e,i[h]);for(h++;h<s;h++){let t=$(e,i[h]);if(p+t>=c)break;p+=t}if(h==r+1){if(p>c){let e=i[r];t(e.children,e.positions,0,e.children.length,n[r]+a);continue}d.push(i[r])}else{let t=n[h-1]+i[h-1].length-f;d.push(Z(e,i,n,r,h,f,t,null,l))}u.push(f+a-o)}}(t,i,n,r,0),(a||l)(d,u,s)}class T{constructor(e,t,i,n,r=!1,o=!1){this.from=e,this.to=t,this.tree=i,this.offset=n,this.open=(r?1:0)|(o?2:0)}get openStart(){return(1&this.open)>0}get openEnd(){return(2&this.open)>0}static addTree(e,t=[],i=!1){let n=[new T(0,e.length,e,0,!1,i)];for(let i of t)i.to>e.length&&n.push(i);return n}static applyChanges(e,t,i=128){if(!t.length)return e;let n=[],r=1,o=e.length?e[0]:null;for(let s=0,a=0,l=0;;s++){let h=s<t.length?t[s]:null,c=h?h.fromA:1e9;if(c-a>=i)for(;o&&o.from<c;){let t=o;if(a>=t.from||c<=t.to||l){let e=Math.max(t.from,a)-l,i=Math.min(t.to,c)-l;t=e>=i?null:new T(e,i,t.tree,t.offset+l,s>0,!!h)}if(t&&n.push(t),o.to>c)break;o=r<e.length?e[r++]:null}if(!h)break;a=h.toA,l=h.toA-h.toB}return n}}class M{constructor(e){this.string=e}get length(){return this.string.length}chunk(e){return this.string.slice(e)}get lineChunks(){return!1}read(e,t){return this.string.slice(e,t)}}class E{constructor(e,t,i,n,r){this.parser=e,this.parse=t,this.overlay=i,this.target=n,this.from=r}}function X(e){if(!e.length||e.some((e=>e.from>=e.to)))throw new RangeError("Invalid inner parse ranges given: "+JSON.stringify(e))}class R{constructor(e,t,i,n,r,o,s){this.parser=e,this.predicate=t,this.mounts=i,this.index=n,this.start=r,this.target=o,this.prev=s,this.depth=0,this.ranges=[]}}const _=new o({perNode:!0});class V{constructor(e,t,i,n,r){this.nest=t,this.input=i,this.fragments=n,this.ranges=r,this.inner=[],this.innerDone=0,this.baseTree=null,this.stoppedAt=null,this.baseParse=e}advance(){if(this.baseParse){let e=this.baseParse.advance();if(!e)return null;if(this.baseParse=null,this.baseTree=e,this.startInner(),null!=this.stoppedAt)for(let e of this.inner)e.parse.stopAt(this.stoppedAt)}if(this.innerDone==this.inner.length){let e=this.baseTree;return null!=this.stoppedAt&&(e=new f(e.type,e.children,e.positions,e.length,e.propValues.concat([[_,this.stoppedAt]]))),e}let e=this.inner[this.innerDone],t=e.parse.advance();if(t){this.innerDone++;let i=Object.assign(Object.create(null),e.target.props);i[o.mounted.id]=new s(t,e.overlay,e.parser),e.target.props=i}return null}get parsedPos(){if(this.baseParse)return 0;let e=this.input.length;for(let t=this.innerDone;t<this.inner.length;t++)this.inner[t].from<e&&(e=Math.min(e,this.inner[t].parse.parsedPos));return e}stopAt(e){if(this.stoppedAt=e,this.baseParse)this.baseParse.stopAt(e);else for(let t=this.innerDone;t<this.inner.length;t++)this.inner[t].parse.stopAt(e)}startInner(){let e=new L(this.fragments),i=null,n=null,o=new Q(new w(this.baseTree,this.ranges[0].from,0,null),t.IterMode.IncludeAnonymous|t.IterMode.IgnoreMounts);e:for(let t,s;;){let a,l=!0;if(null!=this.stoppedAt&&o.from>=this.stoppedAt)l=!1;else if(e.hasNode(o)){if(i){let e=i.mounts.find((e=>e.frag.from<=o.from&&e.frag.to>=o.to&&e.mount.overlay));if(e)for(let t of e.mount.overlay){let n=t.from+e.pos,r=t.to+e.pos;n>=o.from&&r<=o.to&&!i.ranges.some((e=>e.from<r&&e.to>n))&&i.ranges.push({from:n,to:r})}}l=!1}else if(n&&(s=q(n.ranges,o.from,o.to)))l=2!=s;else if(!o.type.isAnonymous&&(t=this.nest(o,this.input))&&(o.from<o.to||!t.overlay)){o.tree||D(o);let s=e.findMounts(o.from,t.parser);if("function"==typeof t.overlay)i=new R(t.parser,t.overlay,s,this.inner.length,o.from,o.tree,i);else{let e=j(this.ranges,t.overlay||(o.from<o.to?[new r(o.from,o.to)]:[]));e.length&&X(e),!e.length&&t.overlay||this.inner.push(new E(t.parser,e.length?t.parser.startParse(this.input,Y(s,e),e):t.parser.startParse(""),t.overlay?t.overlay.map((e=>new r(e.from-o.from,e.to-o.from))):null,o.tree,e.length?e[0].from:o.from)),t.overlay?e.length&&(n={ranges:e,depth:0,prev:n}):l=!1}}else if(i&&(a=i.predicate(o))&&(!0===a&&(a=new r(o.from,o.to)),a.from<a.to)){let e=i.ranges.length-1;e>=0&&i.ranges[e].to==a.from?i.ranges[e]={from:i.ranges[e].from,to:a.to}:i.ranges.push(a)}if(l&&o.firstChild())i&&i.depth++,n&&n.depth++;else for(;!o.nextSibling();){if(!o.parent())break e;if(i&&! --i.depth){let e=j(this.ranges,i.ranges);e.length&&(X(e),this.inner.splice(i.index,0,new E(i.parser,i.parser.startParse(this.input,Y(i.mounts,e),e),i.ranges.map((e=>new r(e.from-i.start,e.to-i.start))),i.target,e[0].from))),i=i.prev}n&&! --n.depth&&(n=n.prev)}}}}function q(e,t,i){for(let n of e){if(n.from>=i)break;if(n.to>t)return n.from<=t&&n.to>=i?2:1}return 0}function B(e,t,i,n,r,o){if(t<i){let s=e.buffer[t+1];n.push(e.slice(t,i,s)),r.push(s-o)}}function D(e){let{node:t}=e,i=[],n=t.context.buffer;do{i.push(e.index),e.parent()}while(!e.tree);let r=e.tree,o=r.children.indexOf(n),s=r.children[o],a=s.buffer,h=[o];r.children[o]=function e(n,r,o,l,c,d){let u=i[d],p=[],O=[];B(s,n,u,p,O,l);let m=a[u+1],g=a[u+2];h.push(p.length);let b=d?e(u+4,a[u+3],s.set.types[a[u]],m,g-m,d-1):t.toTree();return p.push(b),O.push(m-l),B(s,a[u+3],r,p,O,l),new f(o,p,O,c)}(0,a.length,l.none,0,s.length,i.length-1);for(let t of h){let i=e.tree.children[t],n=e.tree.positions[t];e.yield(new w(i,n+e.from,t,e._tree))}}class z{constructor(e,i){this.offset=i,this.done=!1,this.cursor=e.cursor(t.IterMode.IncludeAnonymous|t.IterMode.IgnoreMounts)}moveTo(e){let{cursor:i}=this,n=e-this.offset;for(;!this.done&&i.from<n;)i.to>=e&&i.enter(n,1,t.IterMode.IgnoreOverlays|t.IterMode.ExcludeBuffers)||i.next(!1)||(this.done=!0)}hasNode(e){if(this.moveTo(e.from),!this.done&&this.cursor.from+this.offset==e.from&&this.cursor.tree)for(let t=this.cursor.tree;;){if(t==e.tree)return!0;if(!(t.children.length&&0==t.positions[0]&&t.children[0]instanceof f))break;t=t.children[0]}return!1}}class L{constructor(e){var t;if(this.fragments=e,this.curTo=0,this.fragI=0,e.length){let i=this.curFrag=e[0];this.curTo=null!==(t=i.tree.prop(_))&&void 0!==t?t:i.to,this.inner=new z(i.tree,-i.offset)}else this.curFrag=this.inner=null}hasNode(e){for(;this.curFrag&&e.from>=this.curTo;)this.nextFrag();return this.curFrag&&this.curFrag.from<=e.from&&this.curTo>=e.to&&this.inner.hasNode(e)}nextFrag(){var e;if(this.fragI++,this.fragI==this.fragments.length)this.curFrag=this.inner=null;else{let t=this.curFrag=this.fragments[this.fragI];this.curTo=null!==(e=t.tree.prop(_))&&void 0!==e?e:t.to,this.inner=new z(t.tree,-t.offset)}}findMounts(e,t){var i;let n=[];if(this.inner){this.inner.cursor.moveTo(e,1);for(let e=this.inner.cursor.node;e;e=e.parent){let r=null===(i=e.tree)||void 0===i?void 0:i.prop(o.mounted);if(r&&r.parser==t)for(let t=this.fragI;t<this.fragments.length;t++){let i=this.fragments[t];if(i.from>=e.to)break;i.tree==this.curFrag.tree&&n.push({frag:i,pos:e.from-i.offset,mount:r})}}}return n}}function j(e,t){let i=null,n=t;for(let o=1,s=0;o<e.length;o++){let a=e[o-1].to,l=e[o].from;for(;s<n.length;s++){let e=n[s];if(e.from>=l)break;e.to<=a||(i||(n=i=t.slice()),e.from<a?(i[s]=new r(e.from,a),e.to>l&&i.splice(s+1,0,new r(l,e.to))):e.to>l?i[s--]=new r(l,e.to):i.splice(s--,1))}}return n}function W(e,t,i,n){let o=0,s=0,a=!1,l=!1,h=-1e9,c=[];for(;;){let d=o==e.length?1e9:a?e[o].to:e[o].from,u=s==t.length?1e9:l?t[s].to:t[s].from;if(a!=l){let e=Math.max(h,i),t=Math.min(d,u,n);e<t&&c.push(new r(e,t))}if(h=Math.min(d,u),1e9==h)break;d==h&&(a?(a=!1,o++):a=!0),u==h&&(l?(l=!1,s++):l=!0)}return c}function Y(e,t){let i=[];for(let{pos:n,mount:o,frag:s}of e){let e=n+(o.overlay?o.overlay[0].from:0),a=e+o.tree.length,l=Math.max(s.from,e),h=Math.min(s.to,a);if(o.overlay){let a=W(t,o.overlay.map((e=>new r(e.from+n,e.to+n))),l,h);for(let t=0,n=l;;t++){let r=t==a.length,l=r?h:a[t].from;if(l>n&&i.push(new T(n,l,o.tree,-e,s.from>=n||s.openStart,s.to<=l||s.openEnd)),r)break;n=a[t].to}}else i.push(new T(l,h,o.tree,-e,s.from>=e||s.openStart,s.to<=a||s.openEnd))}return i}t.DefaultBufferLength=i,t.MountedTree=s,t.NodeProp=o,t.NodeSet=h,t.NodeType=l,t.NodeWeakMap=class{constructor(){this.map=new WeakMap}setBuffer(e,t,i){let n=this.map.get(e);n||this.map.set(e,n=new Map),n.set(t,i)}getBuffer(e,t){let i=this.map.get(e);return i&&i.get(t)}set(e,t){e instanceof S?this.setBuffer(e.context.buffer,e.index,t):e instanceof w&&this.map.set(e.tree,t)}get(e){return e instanceof S?this.getBuffer(e.context.buffer,e.index):e instanceof w?this.map.get(e.tree):void 0}cursorSet(e,t){e.buffer?this.setBuffer(e.buffer.buffer,e.index,t):this.map.set(e.tree,t)}cursorGet(e){return e.buffer?this.getBuffer(e.buffer.buffer,e.index):this.map.get(e.tree)}},t.Parser=class{startParse(e,t,i){return"string"==typeof e&&(e=new M(e)),i=i?i.length?i.map((e=>new r(e.from,e.to))):[new r(0,0)]:[new r(0,e.length)],this.createParse(e,t||[],i)}parse(e,t,i){let n=this.startParse(e,t,i);for(;;){let e=n.advance();if(e)return e}}},t.Tree=f,t.TreeBuffer=O,t.TreeCursor=Q,t.TreeFragment=T,t.parseMixed=function(e){return(t,i,n,r)=>new V(t,e,i,n,r)}},4628:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(1827),r=i(7359);const o=[9,10,11,12,13,32,133,160,5760,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288];function s(e){return e>=65&&e<=90||e>=97&&e<=122||e>=161}function a(e){return e>=48&&e<=57}const l=new n.ExternalTokenizer(((e,t)=>{for(let i=!1,n=0,r=0;;r++){let{next:o}=e;if(s(o)||45==o||95==o||i&&a(o))!i&&(45!=o||r>0)&&(i=!0),n===r&&45==o&&n++,e.advance();else{if(92!=o||10==e.peek(1)){i&&e.acceptToken(40==o?100:2==n&&t.canShift(2)?2:101);break}e.advance(),e.next>-1&&e.advance(),i=!0}}})),h=new n.ExternalTokenizer((e=>{if(o.includes(e.peek(-1))){let{next:t}=e;(s(t)||95==t||35==t||46==t||91==t||58==t&&s(e.peek(1))||45==t||38==t)&&e.acceptToken(99)}})),c=new n.ExternalTokenizer((e=>{if(!o.includes(e.peek(-1))){let{next:t}=e;if(37==t&&(e.advance(),e.acceptToken(1)),s(t)){do{e.advance()}while(s(e.next)||a(e.next));e.acceptToken(1)}}})),d=r.styleTags({"AtKeyword import charset namespace keyframes media supports":r.tags.definitionKeyword,"from to selector":r.tags.keyword,NamespaceName:r.tags.namespace,KeyframeName:r.tags.labelName,KeyframeRangeName:r.tags.operatorKeyword,TagName:r.tags.tagName,ClassName:r.tags.className,PseudoClassName:r.tags.constant(r.tags.className),IdName:r.tags.labelName,"FeatureName PropertyName":r.tags.propertyName,AttributeName:r.tags.attributeName,NumberLiteral:r.tags.number,KeywordQuery:r.tags.keyword,UnaryQueryOp:r.tags.operatorKeyword,"CallTag ValueName":r.tags.atom,VariableName:r.tags.variableName,Callee:r.tags.operatorKeyword,Unit:r.tags.unit,"UniversalSelector NestingSelector":r.tags.definitionOperator,MatchOp:r.tags.compareOperator,"ChildOp SiblingOp, LogicOp":r.tags.logicOperator,BinOp:r.tags.arithmeticOperator,Important:r.tags.modifier,Comment:r.tags.blockComment,ColorLiteral:r.tags.color,"ParenthesizedContent StringLiteral":r.tags.string,":":r.tags.punctuation,"PseudoOp #":r.tags.derefOperator,"; ,":r.tags.separator,"( )":r.tags.paren,"[ ]":r.tags.squareBracket,"{ }":r.tags.brace}),u={__proto__:null,lang:32,"nth-child":32,"nth-last-child":32,"nth-of-type":32,"nth-last-of-type":32,dir:32,"host-context":32,url:60,"url-prefix":60,domain:60,regexp:60,selector:138},f={__proto__:null,"@import":118,"@media":142,"@charset":146,"@namespace":150,"@keyframes":156,"@supports":168},p={__proto__:null,not:132,only:132},O=n.LRParser.deserialize({version:14,states:":jQYQ[OOO#_Q[OOP#fOWOOOOQP'#Cd'#CdOOQP'#Cc'#CcO#kQ[O'#CfO$_QXO'#CaO$fQ[O'#ChO$qQ[O'#DTO$vQ[O'#DWOOQP'#Em'#EmO${QdO'#DgO%jQ[O'#DtO${QdO'#DvO%{Q[O'#DxO&WQ[O'#D{O&`Q[O'#ERO&nQ[O'#ETOOQS'#El'#ElOOQS'#EW'#EWQYQ[OOO&uQXO'#CdO'jQWO'#DcO'oQWO'#EsO'zQ[O'#EsQOQWOOP(UO#tO'#C_POOO)C@[)C@[OOQP'#Cg'#CgOOQP,59Q,59QO#kQ[O,59QO(aQ[O'#E[O({QWO,58{O)TQ[O,59SO$qQ[O,59oO$vQ[O,59rO(aQ[O,59uO(aQ[O,59wO(aQ[O,59xO)`Q[O'#DbOOQS,58{,58{OOQP'#Ck'#CkOOQO'#DR'#DROOQP,59S,59SO)gQWO,59SO)lQWO,59SOOQP'#DV'#DVOOQP,59o,59oOOQO'#DX'#DXO)qQ`O,59rOOQS'#Cp'#CpO${QdO'#CqO)yQvO'#CsO+ZQtO,5:ROOQO'#Cx'#CxO)lQWO'#CwO+oQWO'#CyO+tQ[O'#DOOOQS'#Ep'#EpOOQO'#Dj'#DjO+|Q[O'#DqO,[QWO'#EtO&`Q[O'#DoO,jQWO'#DrOOQO'#Eu'#EuO)OQWO,5:`O,oQpO,5:bOOQS'#Dz'#DzO,wQWO,5:dO,|Q[O,5:dOOQO'#D}'#D}O-UQWO,5:gO-ZQWO,5:mO-cQWO,5:oOOQS-E8U-E8UO-kQdO,59}O-{Q[O'#E^O.YQWO,5;_O.YQWO,5;_POOO'#EV'#EVP.eO#tO,58yPOOO,58y,58yOOQP1G.l1G.lO/[QXO,5:vOOQO-E8Y-E8YOOQS1G.g1G.gOOQP1G.n1G.nO)gQWO1G.nO)lQWO1G.nOOQP1G/Z1G/ZO/iQ`O1G/^O0SQXO1G/aO0jQXO1G/cO1QQXO1G/dO1hQWO,59|O1mQ[O'#DSO1tQdO'#CoOOQP1G/^1G/^O${QdO1G/^O1{QpO,59]OOQS,59_,59_O${QdO,59aO2TQWO1G/mOOQS,59c,59cO2YQ!bO,59eOOQS'#DP'#DPOOQS'#EY'#EYO2eQ[O,59jOOQS,59j,59jO2mQWO'#DjO2xQWO,5:VO2}QWO,5:]O&`Q[O,5:XO&`Q[O'#E_O3VQWO,5;`O3bQWO,5:ZO(aQ[O,5:^OOQS1G/z1G/zOOQS1G/|1G/|OOQS1G0O1G0OO3sQWO1G0OO3xQdO'#EOOOQS1G0R1G0ROOQS1G0X1G0XOOQS1G0Z1G0ZO4TQtO1G/iOOQO1G/i1G/iOOQO,5:x,5:xO4kQ[O,5:xOOQO-E8[-E8[O4xQWO1G0yPOOO-E8T-E8TPOOO1G.e1G.eOOQP7+$Y7+$YOOQP7+$x7+$xO${QdO7+$xOOQS1G/h1G/hO5TQXO'#ErO5[QWO,59nO5aQtO'#EXO6XQdO'#EoO6cQWO,59ZO6hQpO7+$xOOQS1G.w1G.wOOQS1G.{1G.{OOQS7+%X7+%XOOQS1G/P1G/PO6pQWO1G/POOQS-E8W-E8WOOQS1G/U1G/UO${QdO1G/qOOQO1G/w1G/wOOQO1G/s1G/sO6uQWO,5:yOOQO-E8]-E8]O7TQXO1G/xOOQS7+%j7+%jO7[QYO'#CsOOQO'#EQ'#EQO7gQ`O'#EPOOQO'#EP'#EPO7rQWO'#E`O7zQdO,5:jOOQS,5:j,5:jO8VQtO'#E]O${QdO'#E]O9WQdO7+%TOOQO7+%T7+%TOOQO1G0d1G0dO9kQpO<<HdO9sQWO,5;^OOQP1G/Y1G/YOOQS-E8V-E8VO${QdO'#EZO9{QWO,5;ZOOQT1G.u1G.uOOQP<<Hd<<HdOOQS7+$k7+$kO:TQdO7+%]OOQO7+%d7+%dOOQO,5:k,5:kO3{QdO'#EaO7rQWO,5:zOOQS,5:z,5:zOOQS-E8^-E8^OOQS1G0U1G0UO:[QtO,5:wOOQS-E8Z-E8ZOOQO<<Ho<<HoOOQPAN>OAN>OO;]QdO,5:uOOQO-E8X-E8XOOQO<<Hw<<HwOOQO,5:{,5:{OOQO-E8_-E8_OOQS1G0f1G0f",stateData:";o~O#ZOS#[QQ~OUYOXYO]VO^VOqXOxWO![aO!]ZO!i[O!k]O!m^O!p_O!v`O#XRO#bTO~OQfOUYOXYO]VO^VOqXOxWO![aO!]ZO!i[O!k]O!m^O!p_O!v`O#XeO#bTO~O#U#gP~P!ZO#[jO~O#XlO~O]qO^qOqsOtoOxrO!OtO!RvO#VuO#bnO~O!TwO~P#pO`}O#WzO#XyO~O#X!OO~O#X!QO~OQ![Ob!TOf![Oh![On!YOq!ZO#W!WO#X!SO#e!UO~Ob!^O!d!`O!g!aO#X!]O!T#hP~Oh!fOn!YO#X!eO~Oh!hO#X!hO~Ob!^O!d!`O!g!aO#X!]O~O!Y#hP~P%jO]WX]!WX^WXqWXtWXxWX!OWX!RWX!TWX#VWX#bWX~O]!mO~O!Y!nO#U#gX!S#gX~O#U#gX!S#gX~P!ZO#]!qO#^!qO#_!sO~OUYOXYO]VO^VOqXOxWO#XRO#bTO~OtoO!TwO~O`!zO#WzO#XyO~O!S#gP~P!ZOb#RO~Ob#SO~Op#TO|#UO~OP#WObgXjgX!YgX!dgX!ggX#XgXagXQgXfgXhgXngXqgXtgX!XgX#UgX#WgX#egXpgX!SgX~Ob!^Oj#XO!d!`O!g!aO#X!]O!Y#hP~Ob#[O~Op#`O#X#]O~Ob!^O!d!`O!g!aO#X#aO~Ot#eO!b#dO!T#hX!Y#hX~Ob#hO~Oj#XO!Y#jO~O!Y#kO~Oh#lOn!YO~O!T#mO~O!TwO!b#dO~O!TwO!Y#pO~O!X#rO!Y!Va#U!Va!S!Va~P${O!Y#QX#U#QX!S#QX~P!ZO!Y!nO#U#ga!S#ga~O#]!qO#^!qO#_#xO~O]qO^qOqsOxrO!OtO!RvO#VuO#bnO~Ot#Oa!T#Oaa#Oa~P.pOp#zO|#{O~O]qO^qOqsOxrO#bnO~Ot}i!O}i!R}i!T}i#V}ia}i~P/qOt!Pi!O!Pi!R!Pi!T!Pi#V!Pia!Pi~P/qOt!Qi!O!Qi!R!Qi!T!Qi#V!Qia!Qi~P/qO!S#|O~Oa#fP~P(aOa#cP~P${Oa$TOj#XO~O!Y$VO~Oa$WOh$XOo$XO~Op$ZO#X#]O~O]!`Xa!^X!b!^X~O]$[O~Oa$]O!b#dO~Ot#eO!T#ha!Y#ha~O!b#dOt!ca!T!ca!Y!caa!ca~O!Y$bO~O!S$iO#X$dO#e$cO~Oj#XOt$kO!X$mO!Y!Vi#U!Vi!S!Vi~P${O!Y#Qa#U#Qa!S#Qa~P!ZO!Y!nO#U#gi!S#gi~Oa#fX~P#pOa$qO~Oj#XOQ!{Xa!{Xb!{Xf!{Xh!{Xn!{Xq!{Xt!{X#W!{X#X!{X#e!{X~Ot$sOa#cX~P${Oa$uO~Oj#XOp$vO~Oa$wO~O!b#dOt#Ra!T#Ra!Y#Ra~Oa$yO~P.pOP#WOtgX!TgX~O#e$cOt!sX!T!sX~Ot${O!TwO~O!S%PO#X$dO#e$cO~Oj#XOQ#PXb#PXf#PXh#PXn#PXq#PXt#PX!X#PX!Y#PX#U#PX#W#PX#X#PX#e#PX!S#PX~Ot$kO!X%SO!Y!Vq#U!Vq!S!Vq~P${Oj#XOp%TO~OtoOa#fa~Ot$sOa#ca~Oa%WO~P${Oj#XOQ#Pab#Paf#Pah#Pan#Paq#Pat#Pa!X#Pa!Y#Pa#U#Pa#W#Pa#X#Pa#e#Pa!S#Pa~Oa!}at!}a~P${O#Zo#[#ej!R#e~",goto:"-g#jPPP#kP#nP#w$WP#w$g#wPP$mPPP$s$|$|P%`P$|P$|%z&^PPPP$|&vP&z'Q#wP'W#w'^P#wP#w#wPPP'd'y(WPP#nPP(_(_(i(_P(_P(_(_P#nP#nP#nP(l#nP(o(r(u(|#nP#nP)R)X)h)v)|*S*^*d*n*t*zPPPPPPPPPP+Q+ZP+v+yP,o,r,x-RRkQ_bOPdhw!n#tkYOPdhotuvw!n#R#h#tkSOPdhotuvw!n#R#h#tQmTR!tnQ{VR!xqQ!x}Q#Z!XR#y!zq![Z]!T!m#S#U#X#q#{$Q$[$k$l$s$x%Up![Z]!T!m#S#U#X#q#{$Q$[$k$l$s$x%UU$f#m$h${R$z$eq!XZ]!T!m#S#U#X#q#{$Q$[$k$l$s$x%Up![Z]!T!m#S#U#X#q#{$Q$[$k$l$s$x%UQ!f^R#l!gT#^!Z#_Q|VR!yqQ!x|R#y!yQ!PWR!{rQ!RXR!|sQxUQ!wpQ#i!cQ#o!jQ#p!kQ$}$gR%Z$|SgPwQ!phQ#s!nR$n#tZfPhw!n#ta!b[`a!V!^!`#d#eR#b!^R!g^R!i_R#n!iS$g#m$hR%X${V$e#m$h${Q!rjR#w!rQdOShPwU!ldh#tR#t!nQ$Q#SU$r$Q$x%UQ$x$[R%U$sQ#_!ZR$Y#_Q$t$QR%V$tQpUS!vp$pR$p#}Q$l#qR%R$lQ!ogS#u!o#vR#v!pQ#f!_R$`#fQ$h#mR%O$hQ$|$gR%Y$|_cOPdhw!n#t^UOPdhw!n#tQ!uoQ!}tQ#OuQ#PvQ#}#RR$a#hR$R#SQ!VZQ!d]Q#V!TQ#q!m[$P#S$Q$[$s$x%UQ$S#UQ$U#XS$j#q$lQ$o#{R%Q$kR$O#RQiPR#QwQ!c[Q!kaR#Y!VU!_[a!VQ!j`Q#c!^Q#g!`Q$^#dR$_#e",nodeNames:"⚠ Unit VariableName Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent ] [ LineNames LineName , PseudoClassName ArgList IdSelector # IdName AttributeSelector AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList KeyframeSelector KeyframeRangeName SupportsStatement supports AtRule Styles",maxTerm:117,nodeProps:[["isolate",-2,3,24,""],["openedBy",17,"(",32,"[",50,"{"],["closedBy",18,")",33,"]",51,"}"]],propSources:[d],skippedNodes:[0,3,87],repeatNodeCount:11,tokenData:"J^~R!^OX$}X^%u^p$}pq%uqr)Xrs.Rst/utu6duv$}vw7^wx7oxy9^yz9oz{9t{|:_|}?Q}!O?c!O!P@Q!P!Q@i!Q![Ab![!]B]!]!^CX!^!_$}!_!`Cj!`!aC{!a!b$}!b!cDw!c!}$}!}#OFa#O#P$}#P#QFr#Q#R6d#R#T$}#T#UGT#U#c$}#c#dHf#d#o$}#o#pH{#p#q6d#q#rI^#r#sIo#s#y$}#y#z%u#z$f$}$f$g%u$g#BY$}#BY#BZ%u#BZ$IS$}$IS$I_%u$I_$I|$}$I|$JO%u$JO$JT$}$JT$JU%u$JU$KV$}$KV$KW%u$KW&FU$}&FU&FV%u&FV;'S$};'S;=`JW<%lO$}`%QSOy%^z;'S%^;'S;=`%o<%lO%^`%cSo`Oy%^z;'S%^;'S;=`%o<%lO%^`%rP;=`<%l%^~%zh#Z~OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^~'mh#Z~o`OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^l)[UOy%^z#]%^#]#^)n#^;'S%^;'S;=`%o<%lO%^l)sUo`Oy%^z#a%^#a#b*V#b;'S%^;'S;=`%o<%lO%^l*[Uo`Oy%^z#d%^#d#e*n#e;'S%^;'S;=`%o<%lO%^l*sUo`Oy%^z#c%^#c#d+V#d;'S%^;'S;=`%o<%lO%^l+[Uo`Oy%^z#f%^#f#g+n#g;'S%^;'S;=`%o<%lO%^l+sUo`Oy%^z#h%^#h#i,V#i;'S%^;'S;=`%o<%lO%^l,[Uo`Oy%^z#T%^#T#U,n#U;'S%^;'S;=`%o<%lO%^l,sUo`Oy%^z#b%^#b#c-V#c;'S%^;'S;=`%o<%lO%^l-[Uo`Oy%^z#h%^#h#i-n#i;'S%^;'S;=`%o<%lO%^l-uS!X[o`Oy%^z;'S%^;'S;=`%o<%lO%^~.UWOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o<%lO.R~.sOh~~.vRO;'S.R;'S;=`/P;=`O.R~/SXOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o;=`<%l.R<%lO.R~/rP;=`<%l.Rn/zYxQOy%^z!Q%^!Q![0j![!c%^!c!i0j!i#T%^#T#Z0j#Z;'S%^;'S;=`%o<%lO%^l0oYo`Oy%^z!Q%^!Q![1_![!c%^!c!i1_!i#T%^#T#Z1_#Z;'S%^;'S;=`%o<%lO%^l1dYo`Oy%^z!Q%^!Q![2S![!c%^!c!i2S!i#T%^#T#Z2S#Z;'S%^;'S;=`%o<%lO%^l2ZYf[o`Oy%^z!Q%^!Q![2y![!c%^!c!i2y!i#T%^#T#Z2y#Z;'S%^;'S;=`%o<%lO%^l3QYf[o`Oy%^z!Q%^!Q![3p![!c%^!c!i3p!i#T%^#T#Z3p#Z;'S%^;'S;=`%o<%lO%^l3uYo`Oy%^z!Q%^!Q![4e![!c%^!c!i4e!i#T%^#T#Z4e#Z;'S%^;'S;=`%o<%lO%^l4lYf[o`Oy%^z!Q%^!Q![5[![!c%^!c!i5[!i#T%^#T#Z5[#Z;'S%^;'S;=`%o<%lO%^l5aYo`Oy%^z!Q%^!Q![6P![!c%^!c!i6P!i#T%^#T#Z6P#Z;'S%^;'S;=`%o<%lO%^l6WSf[o`Oy%^z;'S%^;'S;=`%o<%lO%^d6gUOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^d7QS|So`Oy%^z;'S%^;'S;=`%o<%lO%^b7cSXQOy%^z;'S%^;'S;=`%o<%lO%^~7rWOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W<%lO7o~8_RO;'S7o;'S;=`8h;=`O7o~8kXOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W;=`<%l7o<%lO7o~9ZP;=`<%l7on9cSb^Oy%^z;'S%^;'S;=`%o<%lO%^~9tOa~n9{UUQjWOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^n:fWjW!RQOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^l;TUo`Oy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^l;nYo`#e[Oy%^z!Q%^!Q![;g![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^l<cYo`Oy%^z{%^{|=R|}%^}!O=R!O!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=WUo`Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=qUo`#e[Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l>[[o`#e[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^n?VSt^Oy%^z;'S%^;'S;=`%o<%lO%^l?hWjWOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^n@VU#bQOy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^~@nTjWOy%^z{@}{;'S%^;'S;=`%o<%lO%^~AUSo`#[~Oy%^z;'S%^;'S;=`%o<%lO%^lAg[#e[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^bBbU]QOy%^z![%^![!]Bt!];'S%^;'S;=`%o<%lO%^bB{S^Qo`Oy%^z;'S%^;'S;=`%o<%lO%^nC^S!Y^Oy%^z;'S%^;'S;=`%o<%lO%^dCoS|SOy%^z;'S%^;'S;=`%o<%lO%^bDQU!OQOy%^z!`%^!`!aDd!a;'S%^;'S;=`%o<%lO%^bDkS!OQo`Oy%^z;'S%^;'S;=`%o<%lO%^bDzWOy%^z!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^bEk[![Qo`Oy%^z}%^}!OEd!O!Q%^!Q![Ed![!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^nFfSq^Oy%^z;'S%^;'S;=`%o<%lO%^nFwSp^Oy%^z;'S%^;'S;=`%o<%lO%^bGWUOy%^z#b%^#b#cGj#c;'S%^;'S;=`%o<%lO%^bGoUo`Oy%^z#W%^#W#XHR#X;'S%^;'S;=`%o<%lO%^bHYS!bQo`Oy%^z;'S%^;'S;=`%o<%lO%^bHiUOy%^z#f%^#f#gHR#g;'S%^;'S;=`%o<%lO%^fIQS!TUOy%^z;'S%^;'S;=`%o<%lO%^nIcS!S^Oy%^z;'S%^;'S;=`%o<%lO%^fItU!RQOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^`JZP;=`<%l$}",tokenizers:[h,c,l,1,2,3,4,new n.LocalTokenGroup("m~RRYZ[z{a~~g~aO#^~~dP!P!Qg~lO#_~~",28,105)],topRules:{StyleSheet:[0,4],Styles:[1,86]},specialized:[{term:100,get:e=>u[e]||-1},{term:58,get:e=>f[e]||-1},{term:101,get:e=>p[e]||-1}],tokenPrec:1219});t.parser=O},7359:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(2696);let r=0;class o{constructor(e,t,i,n){this.name=e,this.set=t,this.base=i,this.modified=n,this.id=r++}toString(){let{name:e}=this;for(let t of this.modified)t.name&&(e=`${t.name}(${e})`);return e}static define(e,t){let i="string"==typeof e?e:"?";if(e instanceof o&&(t=e),null==t?void 0:t.base)throw new Error("Can not derive from a modified tag");let n=new o(i,[],null,[]);if(n.set.push(n),t)for(let e of t.set)n.set.push(e);return n}static defineModifier(e){let t=new a(e);return e=>e.modified.indexOf(t)>-1?e:a.get(e.base||e,e.modified.concat(t).sort(((e,t)=>e.id-t.id)))}}let s=0;class a{constructor(e){this.name=e,this.instances=[],this.id=s++}static get(e,t){if(!t.length)return e;let i=t[0].instances.find((i=>{return i.base==e&&(n=t,r=i.modified,n.length==r.length&&n.every(((e,t)=>e==r[t])));var n,r}));if(i)return i;let n=[],r=new o(e.name,n,e,t);for(let e of t)e.instances.push(r);let s=function(e){let t=[[]];for(let i=0;i<e.length;i++)for(let n=0,r=t.length;n<r;n++)t.push(t[n].concat(e[i]));return t.sort(((e,t)=>t.length-e.length))}(t);for(let t of e.set)if(!t.modified.length)for(let e of s)n.push(a.get(t,e));return r}}const l=new n.NodeProp;class h{constructor(e,t,i,n){this.tags=e,this.mode=t,this.context=i,this.next=n}get opaque(){return 0==this.mode}get inherit(){return 1==this.mode}sort(e){return!e||e.depth<this.depth?(this.next=e,this):(e.next=this.sort(e.next),e)}get depth(){return this.context?this.context.length:0}}function c(e,t){let i=Object.create(null);for(let t of e)if(Array.isArray(t.tag))for(let e of t.tag)i[e.id]=t.class;else i[t.tag.id]=t.class;let{scope:n,all:r=null}=t||{};return{style:e=>{let t=r;for(let n of e)for(let e of n.set){let n=i[e.id];if(n){t=t?t+" "+n:n;break}}return t},scope:n}}function d(e,t,i,n=0,r=e.length){let o=new u(n,Array.isArray(t)?t:[t],i);o.highlightRange(e.cursor(),n,r,"",o.highlighters),o.flush(r)}h.empty=new h([],2,null);class u{constructor(e,t,i){this.at=e,this.highlighters=t,this.span=i,this.class=""}startSpan(e,t){t!=this.class&&(this.flush(e),e>this.at&&(this.at=e),this.class=t)}flush(e){e>this.at&&this.class&&this.span(this.at,e,this.class)}highlightRange(e,t,i,r,o){let{type:s,from:a,to:l}=e;if(a>=i||l<=t)return;s.isTop&&(o=this.highlighters.filter((e=>!e.scope||e.scope(s))));let c=r,d=f(e)||h.empty,u=function(e,t){let i=null;for(let n of e){let e=n.style(t);e&&(i=i?i+" "+e:e)}return i}(o,d.tags);if(u&&(c&&(c+=" "),c+=u,1==d.mode&&(r+=(r?" ":"")+u)),this.startSpan(Math.max(t,a),c),d.opaque)return;let p=e.tree&&e.tree.prop(n.NodeProp.mounted);if(p&&p.overlay){let n=e.node.enter(p.overlay[0].from+a,1),s=this.highlighters.filter((e=>!e.scope||e.scope(p.tree.type))),h=e.firstChild();for(let d=0,u=a;;d++){let f=d<p.overlay.length?p.overlay[d]:null,O=f?f.from+a:l,m=Math.max(t,u),g=Math.min(i,O);if(m<g&&h)for(;e.from<g&&(this.highlightRange(e,m,g,r,o),this.startSpan(Math.min(g,e.to),c),!(e.to>=O)&&e.nextSibling()););if(!f||O>i)break;u=f.to+a,u>t&&(this.highlightRange(n.cursor(),Math.max(t,f.from+a),Math.min(i,u),"",s),this.startSpan(Math.min(i,u),c))}h&&e.parent()}else if(e.firstChild()){p&&(r="");do{if(!(e.to<=t)){if(e.from>=i)break;this.highlightRange(e,t,i,r,o),this.startSpan(Math.min(i,e.to),c)}}while(e.nextSibling());e.parent()}}}function f(e){let t=e.type.prop(l);for(;t&&t.context&&!e.matchContext(t.context);)t=t.next;return t||null}const p=o.define,O=p(),m=p(),g=p(m),b=p(m),w=p(),y=p(w),v=p(w),x=p(),S=p(x),k=p(),A=p(),Q=p(),P=p(Q),C=p(),$={comment:O,lineComment:p(O),blockComment:p(O),docComment:p(O),name:m,variableName:p(m),typeName:g,tagName:p(g),propertyName:b,attributeName:p(b),className:p(m),labelName:p(m),namespace:p(m),macroName:p(m),literal:w,string:y,docString:p(y),character:p(y),attributeValue:p(y),number:v,integer:p(v),float:p(v),bool:p(w),regexp:p(w),escape:p(w),color:p(w),url:p(w),keyword:k,self:p(k),null:p(k),atom:p(k),unit:p(k),modifier:p(k),operatorKeyword:p(k),controlKeyword:p(k),definitionKeyword:p(k),moduleKeyword:p(k),operator:A,derefOperator:p(A),arithmeticOperator:p(A),logicOperator:p(A),bitwiseOperator:p(A),compareOperator:p(A),updateOperator:p(A),definitionOperator:p(A),typeOperator:p(A),controlOperator:p(A),punctuation:Q,separator:p(Q),bracket:P,angleBracket:p(P),squareBracket:p(P),paren:p(P),brace:p(P),content:x,heading:S,heading1:p(S),heading2:p(S),heading3:p(S),heading4:p(S),heading5:p(S),heading6:p(S),contentSeparator:p(x),list:p(x),quote:p(x),emphasis:p(x),strong:p(x),link:p(x),monospace:p(x),strikethrough:p(x),inserted:p(),deleted:p(),changed:p(),invalid:p(),meta:C,documentMeta:p(C),annotation:p(C),processingInstruction:p(C),definition:o.defineModifier("definition"),constant:o.defineModifier("constant"),function:o.defineModifier("function"),standard:o.defineModifier("standard"),local:o.defineModifier("local"),special:o.defineModifier("special")};for(let e in $){let t=$[e];t instanceof o&&(t.name=e)}const Z=c([{tag:$.link,class:"tok-link"},{tag:$.heading,class:"tok-heading"},{tag:$.emphasis,class:"tok-emphasis"},{tag:$.strong,class:"tok-strong"},{tag:$.keyword,class:"tok-keyword"},{tag:$.atom,class:"tok-atom"},{tag:$.bool,class:"tok-bool"},{tag:$.url,class:"tok-url"},{tag:$.labelName,class:"tok-labelName"},{tag:$.inserted,class:"tok-inserted"},{tag:$.deleted,class:"tok-deleted"},{tag:$.literal,class:"tok-literal"},{tag:$.string,class:"tok-string"},{tag:$.number,class:"tok-number"},{tag:[$.regexp,$.escape,$.special($.string)],class:"tok-string2"},{tag:$.variableName,class:"tok-variableName"},{tag:$.local($.variableName),class:"tok-variableName tok-local"},{tag:$.definition($.variableName),class:"tok-variableName tok-definition"},{tag:$.special($.variableName),class:"tok-variableName2"},{tag:$.definition($.propertyName),class:"tok-propertyName tok-definition"},{tag:$.typeName,class:"tok-typeName"},{tag:$.namespace,class:"tok-namespace"},{tag:$.className,class:"tok-className"},{tag:$.macroName,class:"tok-macroName"},{tag:$.propertyName,class:"tok-propertyName"},{tag:$.operator,class:"tok-operator"},{tag:$.comment,class:"tok-comment"},{tag:$.meta,class:"tok-meta"},{tag:$.invalid,class:"tok-invalid"},{tag:$.punctuation,class:"tok-punctuation"}]);t.Tag=o,t.classHighlighter=Z,t.getStyleTags=f,t.highlightCode=function(e,t,i,n,r,o=0,s=e.length){let a=o;function l(t,i){if(!(t<=a)){for(let o=e.slice(a,t),s=0;;){let e=o.indexOf("\n",s),t=e<0?o.length:e;if(t>s&&n(o.slice(s,t),i),e<0)break;r(),s=e+1}a=t}}d(t,i,((e,t,i)=>{l(e,""),l(t,i)}),o,s),l(s,"")},t.highlightTree=d,t.styleTags=function(e){let t=Object.create(null);for(let i in e){let n=e[i];Array.isArray(n)||(n=[n]);for(let e of i.split(" "))if(e){let i=[],r=2,o=e;for(let t=0;;){if("..."==o&&t>0&&t+3==e.length){r=1;break}let n=/^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(o);if(!n)throw new RangeError("Invalid path: "+e);if(i.push("*"==n[0]?"":'"'==n[0][0]?JSON.parse(n[0]):n[0]),t+=n[0].length,t==e.length)break;let s=e[t++];if(t==e.length&&"!"==s){r=0;break}if("/"!=s)throw new RangeError("Invalid path: "+e);o=e.slice(t)}let s=i.length-1,a=i[s];if(!a)throw new RangeError("Invalid path: "+e);let l=new h(n,r,s>0?i.slice(0,s):null);t[a]=l.sort(t[a])}}return l.add(t)},t.tagHighlighter=c,t.tags=$},772:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(1827),r=i(7359),o=i(2696);const s={area:!0,base:!0,br:!0,col:!0,command:!0,embed:!0,frame:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0,menuitem:!0},a={dd:!0,li:!0,optgroup:!0,option:!0,p:!0,rp:!0,rt:!0,tbody:!0,td:!0,tfoot:!0,th:!0,tr:!0},l={dd:{dd:!0,dt:!0},dt:{dd:!0,dt:!0},li:{li:!0},option:{option:!0,optgroup:!0},optgroup:{optgroup:!0},p:{address:!0,article:!0,aside:!0,blockquote:!0,dir:!0,div:!0,dl:!0,fieldset:!0,footer:!0,form:!0,h1:!0,h2:!0,h3:!0,h4:!0,h5:!0,h6:!0,header:!0,hgroup:!0,hr:!0,menu:!0,nav:!0,ol:!0,p:!0,pre:!0,section:!0,table:!0,ul:!0},rp:{rp:!0,rt:!0},rt:{rp:!0,rt:!0},tbody:{tbody:!0,tfoot:!0},td:{td:!0,th:!0},tfoot:{tbody:!0},th:{td:!0,th:!0},thead:{tbody:!0,tfoot:!0},tr:{tr:!0}};function h(e){return 9==e||10==e||13==e||32==e}let c=null,d=null,u=0;function f(e,t){let i=e.pos+t;if(u==i&&d==e)return c;let n=e.peek(t);for(;h(n);)n=e.peek(++t);let r="";for(;45==(o=n)||46==o||58==o||o>=65&&o<=90||95==o||o>=97&&o<=122||o>=161;)r+=String.fromCharCode(n),n=e.peek(++t);var o;return d=e,u=i,c=r?r.toLowerCase():n==p||n==O?void 0:null}const p=63,O=33;function m(e,t){this.name=e,this.parent=t}const g=[6,10,7,8,9],b=new n.ContextTracker({start:null,shift:(e,t,i,n)=>g.indexOf(t)>-1?new m(f(n,1)||"",e):e,reduce:(e,t)=>20==t&&e?e.parent:e,reuse(e,t,i,n){let r=t.type.id;return 6==r||36==r?new m(f(n,1)||"",e):e},strict:!1}),w=new n.ExternalTokenizer(((e,t)=>{if(60!=e.next)return void(e.next<0&&t.context&&e.acceptToken(57));e.advance();let i=47==e.next;i&&e.advance();let n=f(e,0);if(void 0===n)return;if(!n)return e.acceptToken(i?14:6);let r=t.context?t.context.name:null;if(i){if(n==r)return e.acceptToken(11);if(r&&a[r])return e.acceptToken(57,-2);if(t.dialectEnabled(0))return e.acceptToken(12);for(let e=t.context;e;e=e.parent)if(e.name==n)return;e.acceptToken(13)}else{if("script"==n)return e.acceptToken(7);if("style"==n)return e.acceptToken(8);if("textarea"==n)return e.acceptToken(9);if(s.hasOwnProperty(n))return e.acceptToken(10);r&&l[r]&&l[r][n]?e.acceptToken(57,-1):e.acceptToken(6)}}),{contextual:!0}),y=new n.ExternalTokenizer((e=>{for(let t=0,i=0;;i++){if(e.next<0){i&&e.acceptToken(58);break}if(45==e.next)t++;else{if(62==e.next&&t>=2){i>=3&&e.acceptToken(58,-2);break}t=0}e.advance()}})),v=new n.ExternalTokenizer(((e,t)=>{if(47==e.next&&62==e.peek(1)){let i=t.dialectEnabled(1)||function(e){for(;e;e=e.parent)if("svg"==e.name||"math"==e.name)return!0;return!1}(t.context);e.acceptToken(i?5:4,2)}else 62==e.next&&e.acceptToken(4,1)}));function x(e,t,i){let r=2+e.length;return new n.ExternalTokenizer((n=>{for(let o=0,s=0,a=0;;a++){if(n.next<0){a&&n.acceptToken(t);break}if(0==o&&60==n.next||1==o&&47==n.next||o>=2&&o<r&&n.next==e.charCodeAt(o-2))o++,s++;else if(2!=o&&o!=r||!h(n.next)){if(o==r&&62==n.next){a>s?n.acceptToken(t,-s):n.acceptToken(i,-(s-2));break}if((10==n.next||13==n.next)&&a){n.acceptToken(t,1);break}o=s=0}else s++;n.advance()}}))}const S=x("script",54,1),k=x("style",55,2),A=x("textarea",56,3),Q=r.styleTags({"Text RawText":r.tags.content,"StartTag StartCloseTag SelfClosingEndTag EndTag":r.tags.angleBracket,TagName:r.tags.tagName,"MismatchedCloseTag/TagName":[r.tags.tagName,r.tags.invalid],AttributeName:r.tags.attributeName,"AttributeValue UnquotedAttributeValue":r.tags.attributeValue,Is:r.tags.definitionOperator,"EntityReference CharacterReference":r.tags.character,Comment:r.tags.blockComment,ProcessingInst:r.tags.processingInstruction,DoctypeDecl:r.tags.documentMeta}),P=n.LRParser.deserialize({version:14,states:",xOVO!rOOO!WQ#tO'#CqO!]Q#tO'#CzO!bQ#tO'#C}O!gQ#tO'#DQO!lQ#tO'#DSO!qOaO'#CpO!|ObO'#CpO#XOdO'#CpO$eO!rO'#CpOOO`'#Cp'#CpO$lO$fO'#DTO$tQ#tO'#DVO$yQ#tO'#DWOOO`'#Dk'#DkOOO`'#DY'#DYQVO!rOOO%OQ&rO,59]O%ZQ&rO,59fO%fQ&rO,59iO%qQ&rO,59lO%|Q&rO,59nOOOa'#D^'#D^O&XOaO'#CxO&dOaO,59[OOOb'#D_'#D_O&lObO'#C{O&wObO,59[OOOd'#D`'#D`O'POdO'#DOO'[OdO,59[OOO`'#Da'#DaO'dO!rO,59[O'kQ#tO'#DROOO`,59[,59[OOOp'#Db'#DbO'pO$fO,59oOOO`,59o,59oO'xQ#|O,59qO'}Q#|O,59rOOO`-E7W-E7WO(SQ&rO'#CsOOQW'#DZ'#DZO(bQ&rO1G.wOOOa1G.w1G.wOOO`1G/Y1G/YO(mQ&rO1G/QOOOb1G/Q1G/QO(xQ&rO1G/TOOOd1G/T1G/TO)TQ&rO1G/WOOO`1G/W1G/WO)`Q&rO1G/YOOOa-E7[-E7[O)kQ#tO'#CyOOO`1G.v1G.vOOOb-E7]-E7]O)pQ#tO'#C|OOOd-E7^-E7^O)uQ#tO'#DPOOO`-E7_-E7_O)zQ#|O,59mOOOp-E7`-E7`OOO`1G/Z1G/ZOOO`1G/]1G/]OOO`1G/^1G/^O*PQ,UO,59_OOQW-E7X-E7XOOOa7+$c7+$cOOO`7+$t7+$tOOOb7+$l7+$lOOOd7+$o7+$oOOO`7+$r7+$rO*[Q#|O,59eO*aQ#|O,59hO*fQ#|O,59kOOO`1G/X1G/XO*kO7[O'#CvO*|OMhO'#CvOOQW1G.y1G.yOOO`1G/P1G/POOO`1G/S1G/SOOO`1G/V1G/VOOOO'#D['#D[O+_O7[O,59bOOQW,59b,59bOOOO'#D]'#D]O+pOMhO,59bOOOO-E7Y-E7YOOQW1G.|1G.|OOOO-E7Z-E7Z",stateData:",]~O!^OS~OUSOVPOWQOXROYTO[]O][O^^O`^Oa^Ob^Oc^Ox^O{_O!dZO~OfaO~OfbO~OfcO~OfdO~OfeO~O!WfOPlP!ZlP~O!XiOQoP!ZoP~O!YlORrP!ZrP~OUSOVPOWQOXROYTOZqO[]O][O^^O`^Oa^Ob^Oc^Ox^O!dZO~O!ZrO~P#dO![sO!euO~OfvO~OfwO~OS|OT}OhyO~OS!POT}OhyO~OS!ROT}OhyO~OS!TOT}OhyO~OS}OT}OhyO~O!WfOPlX!ZlX~OP!WO!Z!XO~O!XiOQoX!ZoX~OQ!ZO!Z!XO~O!YlORrX!ZrX~OR!]O!Z!XO~O!Z!XO~P#dOf!_O~O![sO!e!aO~OS!bO~OS!cO~Oi!dOSgXTgXhgX~OS!fOT!gOhyO~OS!hOT!gOhyO~OS!iOT!gOhyO~OS!jOT!gOhyO~OS!gOT!gOhyO~Of!kO~Of!lO~Of!mO~OS!nO~Ok!qO!`!oO!b!pO~OS!rO~OS!sO~OS!tO~Oa!uOb!uOc!uO!`!wO!a!uO~Oa!xOb!xOc!xO!b!wO!c!xO~Oa!uOb!uOc!uO!`!{O!a!uO~Oa!xOb!xOc!xO!b!{O!c!xO~OT~bac!dx{!d~",goto:"%p!`PPPPPPPPPPPPPPPPPPPP!a!gP!mPP!yP!|#P#S#Y#]#`#f#i#l#r#x!aP!a!aP$O$U$l$r$x%O%U%[%bPPPPPPPP%hX^OX`pXUOX`pezabcde{!O!Q!S!UR!q!dRhUR!XhXVOX`pRkVR!XkXWOX`pRnWR!XnXXOX`pQrXR!XpXYOX`pQ`ORx`Q{aQ!ObQ!QcQ!SdQ!UeZ!e{!O!Q!S!UQ!v!oR!z!vQ!y!pR!|!yQgUR!VgQjVR!YjQmWR![mQpXR!^pQtZR!`tS_O`ToXp",nodeNames:"⚠ StartCloseTag StartCloseTag StartCloseTag EndTag SelfClosingEndTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl",maxTerm:67,context:b,nodeProps:[["closedBy",-10,1,2,3,7,8,9,10,11,12,13,"EndTag",6,"EndTag SelfClosingEndTag",-4,21,30,33,36,"CloseTag"],["openedBy",4,"StartTag StartCloseTag",5,"StartTag",-4,29,32,35,37,"OpenTag"],["group",-9,14,17,18,19,20,39,40,41,42,"Entity",16,"Entity TextContent",-3,28,31,34,"TextContent Entity"],["isolate",-11,21,29,30,32,33,35,36,37,38,41,42,"ltr",-3,26,27,39,""]],propSources:[Q],skippedNodes:[0],repeatNodeCount:9,tokenData:"!<p!aR!YOX$qXY,QYZ,QZ[$q[]&X]^,Q^p$qpq,Qqr-_rs3_sv-_vw3}wxHYx}-_}!OH{!O!P-_!P!Q$q!Q![-_![!]Mz!]!^-_!^!_!$S!_!`!;x!`!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4U-_4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!Z$|c`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr$qrs&}sv$qvw+Pwx(tx!^$q!^!_*V!_!a&X!a#S$q#S#T&X#T;'S$q;'S;=`+z<%lO$q!R&bX`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&Xq'UV`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}P'pT`POv'kw!^'k!_;'S'k;'S;=`(P<%lO'kP(SP;=`<%l'kp([S!cpOv(Vx;'S(V;'S;=`(h<%lO(Vp(kP;=`<%l(Vq(qP;=`<%l&}a({W`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t`)jT!a`Or)esv)ew;'S)e;'S;=`)y<%lO)e`)|P;=`<%l)ea*SP;=`<%l(t!Q*^V!a`!cpOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!Q*vP;=`<%l*V!R*|P;=`<%l&XW+UYkWOX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+PW+wP;=`<%l+P!Z+}P;=`<%l$q!a,]``P!a`!cp!^^OX&XXY,QYZ,QZ]&X]^,Q^p&Xpq,Qqr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!_-ljhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q[/ebhSkWOX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+PS0rXhSqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0mS1bP;=`<%l0m[1hP;=`<%l/^!V1vchS`P!a`!cpOq&Xqr1krs&}sv1kvw0mwx(tx!P1k!P!Q&X!Q!^1k!^!_*V!_!a&X!a#s1k#s$f&X$f;'S1k;'S;=`3R<%l?Ah1k?Ah?BY&X?BY?Mn1k?MnO&X!V3UP;=`<%l1k!_3[P;=`<%l-_!Z3hV!`h`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}!_4WihSkWc!ROX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst>]tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^/^!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!Z5zbkWOX5uXZ7SZ[5u[^7S^p5uqr5urs7Sst+Ptw5uwx7Sx!]5u!]!^7w!^!a7S!a#S5u#S#T7S#T;'S5u;'S;=`8n<%lO5u!R7VVOp7Sqs7St!]7S!]!^7l!^;'S7S;'S;=`7q<%lO7S!R7qOa!R!R7tP;=`<%l7S!Z8OYkWa!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!Z8qP;=`<%l5u!_8{ihSkWOX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst/^tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^:j!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!_:sbhSkWa!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!V<QchSOp7Sqr;{rs7Sst0mtw;{wx7Sx!P;{!P!Q7S!Q!];{!]!^=]!^!a7S!a#s;{#s$f7S$f;'S;{;'S;=`>P<%l?Ah;{?Ah?BY7S?BY?Mn;{?MnO7S!V=dXhSa!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!V>SP;=`<%l;{!_>YP;=`<%l8t!_>dhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^/^!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!Z@TakWOX@OXZAYZ[@O[^AY^p@Oqr@OrsAYsw@OwxAYx!]@O!]!^Az!^!aAY!a#S@O#S#TAY#T;'S@O;'S;=`Bq<%lO@O!RA]UOpAYq!]AY!]!^Ao!^;'SAY;'S;=`At<%lOAY!RAtOb!R!RAwP;=`<%lAY!ZBRYkWb!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!ZBtP;=`<%l@O!_COhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^Dj!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!_DsbhSkWb!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!VFQbhSOpAYqrE{rsAYswE{wxAYx!PE{!P!QAY!Q!]E{!]!^GY!^!aAY!a#sE{#s$fAY$f;'SE{;'S;=`G|<%l?AhE{?Ah?BYAY?BY?MnE{?MnOAY!VGaXhSb!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!VHPP;=`<%lE{!_HVP;=`<%lBw!ZHcW!bx`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t!aIYlhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OKQ!O!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!aK_khS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!`&X!`!aMS!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!TM_X`P!a`!cp!eQOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!aNZ!ZhSfQ`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OMz!O!PMz!P!Q$q!Q![Mz![!]Mz!]!^-_!^!_*V!_!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f$}-_$}%OMz%O%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4UMz4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Je-_$Je$JgMz$Jg$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!a!$PP;=`<%lMz!R!$ZY!a`!cpOq*Vqr!$yrs(Vsv*Vwx)ex!a*V!a!b!4t!b;'S*V;'S;=`*s<%lO*V!R!%Q]!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!%y!O!f*V!f!g!']!g#W*V#W#X!0`#X;'S*V;'S;=`*s<%lO*V!R!&QX!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!&m!O;'S*V;'S;=`*s<%lO*V!R!&vV!a`!cp!dPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!'dX!a`!cpOr*Vrs(Vsv*Vwx)ex!q*V!q!r!(P!r;'S*V;'S;=`*s<%lO*V!R!(WX!a`!cpOr*Vrs(Vsv*Vwx)ex!e*V!e!f!(s!f;'S*V;'S;=`*s<%lO*V!R!(zX!a`!cpOr*Vrs(Vsv*Vwx)ex!v*V!v!w!)g!w;'S*V;'S;=`*s<%lO*V!R!)nX!a`!cpOr*Vrs(Vsv*Vwx)ex!{*V!{!|!*Z!|;'S*V;'S;=`*s<%lO*V!R!*bX!a`!cpOr*Vrs(Vsv*Vwx)ex!r*V!r!s!*}!s;'S*V;'S;=`*s<%lO*V!R!+UX!a`!cpOr*Vrs(Vsv*Vwx)ex!g*V!g!h!+q!h;'S*V;'S;=`*s<%lO*V!R!+xY!a`!cpOr!+qrs!,hsv!+qvw!-Swx!.[x!`!+q!`!a!/j!a;'S!+q;'S;=`!0Y<%lO!+qq!,mV!cpOv!,hvx!-Sx!`!,h!`!a!-q!a;'S!,h;'S;=`!.U<%lO!,hP!-VTO!`!-S!`!a!-f!a;'S!-S;'S;=`!-k<%lO!-SP!-kO{PP!-nP;=`<%l!-Sq!-xS!cp{POv(Vx;'S(V;'S;=`(h<%lO(Vq!.XP;=`<%l!,ha!.aX!a`Or!.[rs!-Ssv!.[vw!-Sw!`!.[!`!a!.|!a;'S!.[;'S;=`!/d<%lO!.[a!/TT!a`{POr)esv)ew;'S)e;'S;=`)y<%lO)ea!/gP;=`<%l!.[!R!/sV!a`!cp{POr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!0]P;=`<%l!+q!R!0gX!a`!cpOr*Vrs(Vsv*Vwx)ex#c*V#c#d!1S#d;'S*V;'S;=`*s<%lO*V!R!1ZX!a`!cpOr*Vrs(Vsv*Vwx)ex#V*V#V#W!1v#W;'S*V;'S;=`*s<%lO*V!R!1}X!a`!cpOr*Vrs(Vsv*Vwx)ex#h*V#h#i!2j#i;'S*V;'S;=`*s<%lO*V!R!2qX!a`!cpOr*Vrs(Vsv*Vwx)ex#m*V#m#n!3^#n;'S*V;'S;=`*s<%lO*V!R!3eX!a`!cpOr*Vrs(Vsv*Vwx)ex#d*V#d#e!4Q#e;'S*V;'S;=`*s<%lO*V!R!4XX!a`!cpOr*Vrs(Vsv*Vwx)ex#X*V#X#Y!+q#Y;'S*V;'S;=`*s<%lO*V!R!4{Y!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!a!4t!a!b!:]!b;'S!4t;'S;=`!;r<%lO!4tq!5pV!cpOv!5kvx!6Vx!a!5k!a!b!7W!b;'S!5k;'S;=`!8V<%lO!5kP!6YTO!a!6V!a!b!6i!b;'S!6V;'S;=`!7Q<%lO!6VP!6lTO!`!6V!`!a!6{!a;'S!6V;'S;=`!7Q<%lO!6VP!7QOxPP!7TP;=`<%l!6Vq!7]V!cpOv!5kvx!6Vx!`!5k!`!a!7r!a;'S!5k;'S;=`!8V<%lO!5kq!7yS!cpxPOv(Vx;'S(V;'S;=`(h<%lO(Vq!8YP;=`<%l!5ka!8bX!a`Or!8]rs!6Vsv!8]vw!6Vw!a!8]!a!b!8}!b;'S!8];'S;=`!:V<%lO!8]a!9SX!a`Or!8]rs!6Vsv!8]vw!6Vw!`!8]!`!a!9o!a;'S!8];'S;=`!:V<%lO!8]a!9vT!a`xPOr)esv)ew;'S)e;'S;=`)y<%lO)ea!:YP;=`<%l!8]!R!:dY!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!`!4t!`!a!;S!a;'S!4t;'S;=`!;r<%lO!4t!R!;]V!a`!cpxPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!;uP;=`<%l!4t!V!<TXiS`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X",tokenizers:[S,k,A,v,w,y,0,1,2,3,4,5],topRules:{Document:[0,15]},dialects:{noMatch:0,selfClosing:509},tokenPrec:511});function C(e,t){let i=Object.create(null);for(let n of e.getChildren(23)){let e=n.getChild(24),r=n.getChild(26)||n.getChild(27);e&&(i[t.read(e.from,e.to)]=r?26==r.type.id?t.read(r.from+1,r.to-1):t.read(r.from,r.to):"")}return i}function $(e,t){let i=e.getChild(22);return i?t.read(i.from,i.to):" "}function Z(e,t,i){let n;for(let r of i)if(!r.attrs||r.attrs(n||(n=C(e.node.parent.firstChild,t))))return{parser:r.parser};return null}t.configureNesting=function(e=[],t=[]){let i=[],n=[],r=[],s=[];for(let t of e)("script"==t.tag?i:"style"==t.tag?n:"textarea"==t.tag?r:s).push(t);let a=t.length?Object.create(null):null;for(let e of t)(a[e.name]||(a[e.name]=[])).push(e);return o.parseMixed(((e,t)=>{let o=e.type.id;if(28==o)return Z(e,t,i);if(31==o)return Z(e,t,n);if(34==o)return Z(e,t,r);if(20==o&&s.length){let i,n=e.node,r=n.firstChild,o=r&&$(r,t);if(o)for(let e of s)if(e.tag==o&&(!e.attrs||e.attrs(i||(i=C(r,t))))){let t=n.lastChild,i=37==t.type.id?t.from:n.to;if(i>r.to)return{parser:e.parser,overlay:[{from:r.to,to:i}]}}}if(a&&23==o){let i,n=e.node;if(i=n.firstChild){let e=a[t.read(i.from,i.to)];if(e)for(let i of e){if(i.tagName&&i.tagName!=$(n.parent,t))continue;let e=n.lastChild;if(26==e.type.id){let t=e.from+1,n=e.lastChild,r=e.to-(n&&n.isError?0:1);if(r>t)return{parser:i.parser,overlay:[{from:t,to:r}]}}else if(27==e.type.id)return{parser:i.parser,overlay:[{from:e.from,to:e.to}]}}}}return null}))},t.parser=P},9922:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(1827),r=i(7359);const o=[9,10,11,12,13,32,133,160,5760,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8232,8233,8239,8287,12288],s=new n.ContextTracker({start:!1,shift:(e,t)=>5==t||6==t||318==t?e:319==t,strict:!1}),a=new n.ExternalTokenizer(((e,t)=>{let{next:i}=e;(125==i||-1==i||t.context)&&e.acceptToken(316)}),{contextual:!0,fallback:!0}),l=new n.ExternalTokenizer(((e,t)=>{let i,{next:n}=e;o.indexOf(n)>-1||(47!=n||47!=(i=e.peek(1))&&42!=i)&&(125==n||59==n||-1==n||t.context||e.acceptToken(314))}),{contextual:!0}),h=new n.ExternalTokenizer(((e,t)=>{91!=e.next||t.context||e.acceptToken(315)}),{contextual:!0}),c=new n.ExternalTokenizer(((e,t)=>{let{next:i}=e;if(43==i||45==i){if(e.advance(),i==e.next){e.advance();let i=!t.context&&t.canShift(1);e.acceptToken(i?1:2)}}else 63==i&&46==e.peek(1)&&(e.advance(),e.advance(),(e.next<48||e.next>57)&&e.acceptToken(3))}),{contextual:!0});function d(e,t){return e>=65&&e<=90||e>=97&&e<=122||95==e||e>=192||!t&&e>=48&&e<=57}const u=new n.ExternalTokenizer(((e,t)=>{if(60!=e.next||!t.dialectEnabled(0))return;if(e.advance(),47==e.next)return;let i=0;for(;o.indexOf(e.next)>-1;)e.advance(),i++;if(d(e.next,!0)){for(e.advance(),i++;d(e.next,!1);)e.advance(),i++;for(;o.indexOf(e.next)>-1;)e.advance(),i++;if(44==e.next)return;for(let t=0;;t++){if(7==t){if(!d(e.next,!0))return;break}if(e.next!="extends".charCodeAt(t))break;e.advance(),i++}}e.acceptToken(4,-i)})),f=r.styleTags({"get set async static":r.tags.modifier,"for while do if else switch try catch finally return throw break continue default case":r.tags.controlKeyword,"in of await yield void typeof delete instanceof":r.tags.operatorKeyword,"let var const using function class extends":r.tags.definitionKeyword,"import export from":r.tags.moduleKeyword,"with debugger as new":r.tags.keyword,TemplateString:r.tags.special(r.tags.string),super:r.tags.atom,BooleanLiteral:r.tags.bool,this:r.tags.self,null:r.tags.null,Star:r.tags.modifier,VariableName:r.tags.variableName,"CallExpression/VariableName TaggedTemplateExpression/VariableName":r.tags.function(r.tags.variableName),VariableDefinition:r.tags.definition(r.tags.variableName),Label:r.tags.labelName,PropertyName:r.tags.propertyName,PrivatePropertyName:r.tags.special(r.tags.propertyName),"CallExpression/MemberExpression/PropertyName":r.tags.function(r.tags.propertyName),"FunctionDeclaration/VariableDefinition":r.tags.function(r.tags.definition(r.tags.variableName)),"ClassDeclaration/VariableDefinition":r.tags.definition(r.tags.className),"NewExpression/VariableName":r.tags.className,PropertyDefinition:r.tags.definition(r.tags.propertyName),PrivatePropertyDefinition:r.tags.definition(r.tags.special(r.tags.propertyName)),UpdateOp:r.tags.updateOperator,"LineComment Hashbang":r.tags.lineComment,BlockComment:r.tags.blockComment,Number:r.tags.number,String:r.tags.string,Escape:r.tags.escape,ArithOp:r.tags.arithmeticOperator,LogicOp:r.tags.logicOperator,BitOp:r.tags.bitwiseOperator,CompareOp:r.tags.compareOperator,RegExp:r.tags.regexp,Equals:r.tags.definitionOperator,Arrow:r.tags.function(r.tags.punctuation),": Spread":r.tags.punctuation,"( )":r.tags.paren,"[ ]":r.tags.squareBracket,"{ }":r.tags.brace,"InterpolationStart InterpolationEnd":r.tags.special(r.tags.brace),".":r.tags.derefOperator,", ;":r.tags.separator,"@":r.tags.meta,TypeName:r.tags.typeName,TypeDefinition:r.tags.definition(r.tags.typeName),"type enum interface implements namespace module declare":r.tags.definitionKeyword,"abstract global Privacy readonly override":r.tags.modifier,"is keyof unique infer asserts":r.tags.operatorKeyword,JSXAttributeValue:r.tags.attributeValue,JSXText:r.tags.content,"JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag":r.tags.angleBracket,"JSXIdentifier JSXNameSpacedName":r.tags.tagName,"JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName":r.tags.attributeName,"JSXBuiltin/JSXIdentifier":r.tags.standard(r.tags.tagName)}),p={__proto__:null,export:20,as:25,from:33,default:36,async:41,function:42,const:52,extends:56,this:60,true:68,false:68,null:80,void:84,typeof:88,super:104,new:138,delete:150,yield:159,await:163,class:168,public:231,private:231,protected:231,readonly:233,instanceof:252,satisfies:255,in:256,import:290,keyof:347,unique:351,infer:357,asserts:393,is:395,abstract:415,implements:417,type:419,let:422,var:424,using:427,interface:433,enum:437,namespace:443,module:445,declare:449,global:453,for:472,of:481,while:484,with:488,do:492,if:496,else:498,switch:502,case:508,try:514,catch:518,finally:522,return:526,throw:530,break:534,continue:538,debugger:542},O={__proto__:null,async:125,get:127,set:129,declare:191,public:193,private:193,protected:193,static:195,abstract:197,override:199,readonly:205,accessor:207,new:399},m={__proto__:null,"<":189},g=n.LRParser.deserialize({version:14,states:"$EOQ%TQlOOO%[QlOOO'_QpOOP(lO`OOO*zQ!0MxO'#CiO+RO#tO'#CjO+aO&jO'#CjO+oO#@ItO'#D_O.QQlO'#DeO.bQlO'#DpO%[QlO'#DxO0fQlO'#EQOOQ!0Lf'#EY'#EYO1PQ`O'#EVOOQO'#En'#EnOOQO'#Ij'#IjO1XQ`O'#GrO1dQ`O'#EmO1iQ`O'#EmO3hQ!0MxO'#JpO6[Q!0MxO'#JqO6uQ`O'#F[O6zQ,UO'#FsOOQ!0Lf'#Fe'#FeO7VO7dO'#FeO7eQMhO'#F{O9UQ`O'#FzOOQ!0Lf'#Jq'#JqOOQ!0Lb'#Jp'#JpO9ZQ`O'#GvOOQ['#K]'#K]O9fQ`O'#IWO9kQ!0LrO'#IXOOQ['#J^'#J^OOQ['#I]'#I]Q`QlOOQ`QlOOO9sQ!L^O'#DtO9zQlO'#D|O:RQlO'#EOO9aQ`O'#GrO:YQMhO'#CoO:hQ`O'#ElO:sQ`O'#EwO:xQMhO'#FdO;gQ`O'#GrOOQO'#K^'#K^O;lQ`O'#K^O;zQ`O'#GzO;zQ`O'#G{O;zQ`O'#G}O9aQ`O'#HQO<qQ`O'#HTO>YQ`O'#CeO>jQ`O'#HaO>rQ`O'#HgO>rQ`O'#HiO`QlO'#HkO>rQ`O'#HmO>rQ`O'#HpO>wQ`O'#HvO>|Q!0LsO'#H|O%[QlO'#IOO?XQ!0LsO'#IQO?dQ!0LsO'#ISO9kQ!0LrO'#IUO?oQ!0MxO'#CiO@qQpO'#DjQOQ`OOO%[QlO'#EOOAXQ`O'#ERO:YQMhO'#ElOAdQ`O'#ElOAoQ!bO'#FdOOQ['#Cg'#CgOOQ!0Lb'#Do'#DoOOQ!0Lb'#Jt'#JtO%[QlO'#JtOOQO'#Jw'#JwOOQO'#If'#IfOBoQpO'#EeOOQ!0Lb'#Ed'#EdOOQ!0Lb'#J{'#J{OCkQ!0MSO'#EeOCuQpO'#EUOOQO'#Jv'#JvODZQpO'#JwOEhQpO'#EUOCuQpO'#EePEuO&2DjO'#CbPOOO)CD{)CD{OOOO'#I^'#I^OFQO#tO,59UOOQ!0Lh,59U,59UOOOO'#I_'#I_OF`O&jO,59UOFnQ!L^O'#DaOOOO'#Ia'#IaOFuO#@ItO,59yOOQ!0Lf,59y,59yOGTQlO'#IbOGhQ`O'#JrOIgQ!fO'#JrO+}QlO'#JrOInQ`O,5:POJUQ`O'#EnOJcQ`O'#KROJnQ`O'#KQOJnQ`O'#KQOJvQ`O,5;[OJ{Q`O'#KPOOQ!0Ln,5:[,5:[OKSQlO,5:[OMQQ!0MxO,5:dOMqQ`O,5:lON[Q!0LrO'#KOONcQ`O'#J}O9ZQ`O'#J}ONwQ`O'#J}O! PQ`O,5;ZO! UQ`O'#J}O!#ZQ!fO'#JqOOQ!0Lh'#Ci'#CiO%[QlO'#EQO!#yQ!fO,5:qOOQS'#Jx'#JxOOQO-E<h-E<hO9aQ`O,5=^O!$aQ`O,5=^O!$fQlO,5;XO!&iQMhO'#EiO!(SQ`O,5;XO!(XQlO'#DwO!(cQpO,5;bO!(kQpO,5;bO%[QlO,5;bOOQ['#FS'#FSOOQ['#FU'#FUO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cOOQ['#FY'#FYO!(yQlO,5;sOOQ!0Lf,5;x,5;xOOQ!0Lf,5;y,5;yOOQ!0Lf,5;{,5;{O%[QlO'#InO!*|Q!0LrO,5<hO%[QlO,5;cO!&iQMhO,5;cO!+kQMhO,5;cO!-]QMhO'#E[O%[QlO,5;vOOQ!0Lf,5;z,5;zO!-dQ,UO'#FiO!.aQ,UO'#KVO!-{Q,UO'#KVO!.hQ,UO'#KVOOQO'#KV'#KVO!.|Q,UO,5<ROOOW,5<_,5<_O!/_QlO'#FuOOOW'#Im'#ImO7VO7dO,5<PO!/fQ,UO'#FwOOQ!0Lf,5<P,5<PO!0VQ$IUO'#CwOOQ!0Lh'#C{'#C{O!0jO#@ItO'#DPO!1WQMjO,5<dO!1_Q`O,5<gO!2zQ(CWO'#GWO!3XQ`O'#GXO!3^Q`O'#GXO!4|Q(CWO'#G]O!6RQpO'#GaOOQO'#Gm'#GmO!+rQMhO'#GlOOQO'#Go'#GoO!+rQMhO'#GnO!6tQ$IUO'#JjOOQ!0Lh'#Jj'#JjO!7OQ`O'#JiO!7^Q`O'#JhO!7fQ`O'#CuOOQ!0Lh'#Cy'#CyO!7qQ`O'#C{OOQ!0Lh'#DT'#DTOOQ!0Lh'#DV'#DVO1SQ`O'#DXO!+rQMhO'#GOO!+rQMhO'#GQO!7vQ`O'#GSO!7{Q`O'#GTO!3^Q`O'#GZO!+rQMhO'#G`O;zQ`O'#JiO!8QQ`O'#EoO!8oQ`O,5<fOOQ!0Lb'#Cr'#CrO!8wQ`O'#EpO!9qQpO'#EqOOQ!0Lb'#KP'#KPO!9xQ!0LrO'#K_O9kQ!0LrO,5=bO`QlO,5>rOOQ['#Jf'#JfOOQ[,5>s,5>sOOQ[-E<Z-E<ZO!;wQ!0MxO,5:`O!9lQpO,5:^O!>bQ!0MxO,5:hO%[QlO,5:hO!@xQ!0MxO,5:jOOQO,5@x,5@xO!AiQMhO,5=^O!AwQ!0LrO'#JgO9UQ`O'#JgO!BYQ!0LrO,59ZO!BeQpO,59ZO!BmQMhO,59ZO:YQMhO,59ZO!BxQ`O,5;XO!CQQ`O'#H`O!CfQ`O'#KbO%[QlO,5;|O!9lQpO,5<OO!CnQ`O,5=yO!CsQ`O,5=yO!CxQ`O,5=yO9kQ!0LrO,5=yO;zQ`O,5=iOOQO'#Cw'#CwO!DWQpO,5=fO!D`QMhO,5=gO!DkQ`O,5=iO!DpQ!bO,5=lO!DxQ`O'#K^O>wQ`O'#HVO9aQ`O'#HXO!D}Q`O'#HXO:YQMhO'#HZO!ESQ`O'#HZOOQ[,5=o,5=oO!EXQ`O'#H[O!EjQ`O'#CoO!EoQ`O,59PO!EyQ`O,59PO!HOQlO,59POOQ[,59P,59PO!H`Q!0LrO,59PO%[QlO,59PO!JkQlO'#HcOOQ['#Hd'#HdOOQ['#He'#HeO`QlO,5={O!KRQ`O,5={O`QlO,5>RO`QlO,5>TO!KWQ`O,5>VO`QlO,5>XO!K]Q`O,5>[O!KbQlO,5>bOOQ[,5>h,5>hO%[QlO,5>hO9kQ!0LrO,5>jOOQ[,5>l,5>lO# lQ`O,5>lOOQ[,5>n,5>nO# lQ`O,5>nOOQ[,5>p,5>pO#!YQpO'#D]O%[QlO'#JtO#!{QpO'#JtO##VQpO'#DkO##hQpO'#DkO#%yQlO'#DkO#&QQ`O'#JsO#&YQ`O,5:UO#&_Q`O'#ErO#&mQ`O'#KSO#&uQ`O,5;]O#&zQpO'#DkO#'XQpO'#ETOOQ!0Lf,5:m,5:mO%[QlO,5:mO#'`Q`O,5:mO>wQ`O,5;WO!BeQpO,5;WO!BmQMhO,5;WO:YQMhO,5;WO#'hQ`O,5@`O#'mQ07dO,5:qOOQO-E<d-E<dO#(sQ!0MSO,5;POCuQpO,5:pO#(}QpO,5:pOCuQpO,5;PO!BYQ!0LrO,5:pOOQ!0Lb'#Eh'#EhOOQO,5;P,5;PO%[QlO,5;PO#)[Q!0LrO,5;PO#)gQ!0LrO,5;PO!BeQpO,5:pOOQO,5;V,5;VO#)uQ!0LrO,5;PPOOO'#I['#I[P#*ZO&2DjO,58|POOO,58|,58|OOOO-E<[-E<[OOQ!0Lh1G.p1G.pOOOO-E<]-E<]OOOO,59{,59{O#*fQ!bO,59{OOOO-E<_-E<_OOQ!0Lf1G/e1G/eO#*kQ!fO,5>|O+}QlO,5>|OOQO,5?S,5?SO#*uQlO'#IbOOQO-E<`-E<`O#+SQ`O,5@^O#+[Q!fO,5@^O#+cQ`O,5@lOOQ!0Lf1G/k1G/kO%[QlO,5@mO#+kQ`O'#IhOOQO-E<f-E<fO#+cQ`O,5@lOOQ!0Lb1G0v1G0vOOQ!0Ln1G/v1G/vOOQ!0Ln1G0W1G0WO%[QlO,5@jO#,PQ!0LrO,5@jO#,bQ!0LrO,5@jO#,iQ`O,5@iO9ZQ`O,5@iO#,qQ`O,5@iO#-PQ`O'#IkO#,iQ`O,5@iOOQ!0Lb1G0u1G0uO!(cQpO,5:sO!(nQpO,5:sOOQS,5:u,5:uO#-qQdO,5:uO#-yQMhO1G2xO9aQ`O1G2xOOQ!0Lf1G0s1G0sO#.XQ!0MxO1G0sO#/^Q!0MvO,5;TOOQ!0Lh'#GV'#GVO#/zQ!0MzO'#JjO!$fQlO1G0sO#2VQ!fO'#JuO%[QlO'#JuO#2aQ`O,5:cOOQ!0Lh'#D]'#D]OOQ!0Lf1G0|1G0|O%[QlO1G0|OOQ!0Lf1G1e1G1eO#2fQ`O1G0|O#4zQ!0MxO1G0}O#5RQ!0MxO1G0}O#7iQ!0MxO1G0}O#7pQ!0MxO1G0}O#:WQ!0MxO1G0}O#<nQ!0MxO1G0}O#<uQ!0MxO1G0}O#<|Q!0MxO1G0}O#?dQ!0MxO1G0}O#?kQ!0MxO1G0}O#AxQ?MtO'#CiO#CsQ?MtO1G1_O#CzQ?MtO'#JqO#D_Q!0MxO,5?YOOQ!0Lb-E<l-E<lO#FlQ!0MxO1G0}O#GiQ!0MzO1G0}OOQ!0Lf1G0}1G0}O#HlQMjO'#JzO#HvQ`O,5:vO#H{Q!0MxO1G1bO#IoQ,UO,5<VO#IwQ,UO,5<WO#JPQ,UO'#FnO#JhQ`O'#FmOOQO'#KW'#KWOOQO'#Il'#IlO#JmQ,UO1G1mOOQ!0Lf1G1m1G1mOOOW1G1x1G1xO#KOQ?MtO'#JpO#KYQ`O,5<aO!(yQlO,5<aOOOW-E<k-E<kOOQ!0Lf1G1k1G1kO#K_QpO'#KVOOQ!0Lf,5<c,5<cO#KgQpO,5<cO#KlQMhO'#DROOOO'#I`'#I`O#KsO#@ItO,59kOOQ!0Lh,59k,59kO%[QlO1G2OO!7{Q`O'#IpO#LOQ`O,5<yOOQ!0Lh,5<v,5<vO!+rQMhO'#IsO#LlQMjO,5=WO!+rQMhO'#IuO#M_QMjO,5=YO!&iQMhO,5=[OOQO1G2R1G2RO#MiQ!dO'#CrO#M|Q(CWO'#EpO$ RQpO'#GaO$ iQ!dO,5<rO$ pQ`O'#KYO9ZQ`O'#KYO$!OQ`O,5<tO!+rQMhO,5<sO$!TQ`O'#GYO$!fQ`O,5<sO$!kQ!dO'#GVO$!xQ!dO'#KZO$#SQ`O'#KZO!&iQMhO'#KZO$#XQ`O,5<wO$#^QlO'#JtO$#hQpO'#GbO##hQpO'#GbO$#yQ`O'#GfO!3^Q`O'#GjO$$OQ!0LrO'#IrO$$ZQpO,5<{OOQ!0Lp,5<{,5<{O$$bQpO'#GbO$$oQpO'#GcO$%QQpO'#GcO$%VQMjO,5=WO$%gQMjO,5=YOOQ!0Lh,5=],5=]O!+rQMhO,5@TO!+rQMhO,5@TO$%wQ`O'#IwO$&VQ`O,5@SO$&_Q`O,59aOOQ!0Lh,59g,59gO$'UQ$IYO,59sOOQ!0Lh'#Jn'#JnO$'wQMjO,5<jO$(jQMjO,5<lO@iQ`O,5<nOOQ!0Lh,5<o,5<oO$(tQ`O,5<uO$(yQMjO,5<zO$)ZQ`O,5@TO$)iQ`O'#J}O!$fQlO1G2QO$)nQ`O1G2QO9ZQ`O'#KQO9ZQ`O'#ErO%[QlO'#ErO9ZQ`O'#IyO$)sQ!0LrO,5@yOOQ[1G2|1G2|OOQ[1G4^1G4^OOQ!0Lf1G/z1G/zOOQ!0Lf1G/x1G/xO$+uQ!0MxO1G0SOOQ[1G2x1G2xO!&iQMhO1G2xO%[QlO1G2xO#-|Q`O1G2xO$-yQMhO'#EiOOQ!0Lb,5@R,5@RO$.WQ!0LrO,5@ROOQ[1G.u1G.uO!BYQ!0LrO1G.uO!BeQpO1G.uO!BmQMhO1G.uO$.iQ`O1G0sO$.nQ`O'#CiO$.yQ`O'#KcO$/RQ`O,5=zO$/WQ`O'#KcO$/]Q`O'#KcO$/kQ`O'#JPO$/yQ`O,5@|O$0RQ!fO1G1hOOQ!0Lf1G1j1G1jO9aQ`O1G3eO@iQ`O1G3eO$0YQ`O1G3eO$0_Q`O1G3eOOQ[1G3e1G3eO!DkQ`O1G3TO!&iQMhO1G3QO$0dQ`O1G3QOOQ[1G3R1G3RO!&iQMhO1G3RO$0iQ`O1G3RO$0qQpO'#HPOOQ[1G3T1G3TO!5|QpO'#I{O!DpQ!bO1G3WOOQ[1G3W1G3WOOQ[,5=q,5=qO$0yQMhO,5=sO9aQ`O,5=sO$#yQ`O,5=uO9UQ`O,5=uO!BeQpO,5=uO!BmQMhO,5=uO:YQMhO,5=uO$1XQ`O'#KaO$1dQ`O,5=vOOQ[1G.k1G.kO$1iQ!0LrO1G.kO@iQ`O1G.kO$1tQ`O1G.kO9kQ!0LrO1G.kO$3|Q!fO,5AOO$4ZQ`O,5AOO9ZQ`O,5AOO$4fQlO,5=}O$4mQ`O,5=}OOQ[1G3g1G3gO`QlO1G3gOOQ[1G3m1G3mOOQ[1G3o1G3oO>rQ`O1G3qO$4rQlO1G3sO$8vQlO'#HrOOQ[1G3v1G3vO$9TQ`O'#HxO>wQ`O'#HzOOQ[1G3|1G3|O$9]QlO1G3|O9kQ!0LrO1G4SOOQ[1G4U1G4UOOQ!0Lb'#G^'#G^O9kQ!0LrO1G4WO9kQ!0LrO1G4YO$=dQ`O,5@`O!(yQlO,5;^O9ZQ`O,5;^O>wQ`O,5:VO!(yQlO,5:VO!BeQpO,5:VO$=iQ?MtO,5:VOOQO,5;^,5;^O$=sQpO'#IcO$>ZQ`O,5@_OOQ!0Lf1G/p1G/pO$>cQpO'#IiO$>mQ`O,5@nOOQ!0Lb1G0w1G0wO##hQpO,5:VOOQO'#Ie'#IeO$>uQpO,5:oOOQ!0Ln,5:o,5:oO#'cQ`O1G0XOOQ!0Lf1G0X1G0XO%[QlO1G0XOOQ!0Lf1G0r1G0rO>wQ`O1G0rO!BeQpO1G0rO!BmQMhO1G0rOOQ!0Lb1G5z1G5zO!BYQ!0LrO1G0[OOQO1G0k1G0kO%[QlO1G0kO$>|Q!0LrO1G0kO$?XQ!0LrO1G0kO!BeQpO1G0[OCuQpO1G0[O$?gQ!0LrO1G0kOOQO1G0[1G0[O$?{Q!0MxO1G0kPOOO-E<Y-E<YPOOO1G.h1G.hOOOO1G/g1G/gO$@VQ!bO,5<hO$@_Q!fO1G4hOOQO1G4n1G4nO%[QlO,5>|O$@iQ`O1G5xO$@qQ`O1G6WO$@yQ!fO1G6XO9ZQ`O,5?SO$ATQ!0MxO1G6UO%[QlO1G6UO$AeQ!0LrO1G6UO$AvQ`O1G6TO$AvQ`O1G6TO9ZQ`O1G6TO$BOQ`O,5?VO9ZQ`O,5?VOOQO,5?V,5?VO$BdQ`O,5?VO$)iQ`O,5?VOOQO-E<i-E<iOOQS1G0_1G0_OOQS1G0a1G0aO#-tQ`O1G0aOOQ[7+(d7+(dO!&iQMhO7+(dO%[QlO7+(dO$BrQ`O7+(dO$B}QMhO7+(dO$C]Q!0MzO,5=WO$EhQ!0MzO,5=YO$GsQ!0MzO,5=WO$JUQ!0MzO,5=YO$LgQ!0MzO,59sO$NlQ!0MzO,5<jO%!wQ!0MzO,5<lO%%SQ!0MzO,5<zOOQ!0Lf7+&_7+&_O%'eQ!0MxO7+&_O%(XQlO'#IdO%(fQ`O,5@aO%(nQ!fO,5@aOOQ!0Lf1G/}1G/}O%(xQ`O7+&hOOQ!0Lf7+&h7+&hO%(}Q?MtO,5:dO%[QlO7+&yO%)XQ?MtO,5:`O%)fQ?MtO,5:hO%)pQ?MtO,5:jO%)zQMhO'#IgO%*UQ`O,5@fOOQ!0Lh1G0b1G0bOOQO1G1q1G1qOOQO1G1r1G1rO%*^Q!jO,5<YO!(yQlO,5<XOOQO-E<j-E<jOOQ!0Lf7+'X7+'XOOOW7+'d7+'dOOOW1G1{1G1{O%*iQ`O1G1{OOQ!0Lf1G1}1G1}OOOO,59m,59mO%*nQ!dO,59mOOOO-E<^-E<^OOQ!0Lh1G/V1G/VO%*uQ!0MxO7+'jOOQ!0Lh,5?[,5?[O%+iQMhO1G2eP%+pQ`O'#IpPOQ!0Lh-E<n-E<nO%,^QMjO,5?_OOQ!0Lh-E<q-E<qO%-PQMjO,5?aOOQ!0Lh-E<s-E<sO%-ZQ!dO1G2vO%-bQ!dO'#CrO%-xQMhO'#KQO$#^QlO'#JtOOQ!0Lh1G2^1G2^O%.PQ`O'#IoO%.eQ`O,5@tO%.eQ`O,5@tO%.mQ`O,5@tO%.xQ`O,5@tOOQO1G2`1G2`O%/WQMjO1G2_O!+rQMhO1G2_O%/hQ(CWO'#IqO%/uQ`O,5@uO!&iQMhO,5@uO%/}Q!dO,5@uOOQ!0Lh1G2c1G2cO%2_Q!fO'#CiO%2iQ`O,5=OOOQ!0Lb,5<|,5<|O%2qQpO,5<|OOQ!0Lb,5<},5<}OCfQ`O,5<|O%2|QpO,5<|OOQ!0Lb,5=Q,5=QO$)iQ`O,5=UOOQO,5?^,5?^OOQO-E<p-E<pOOQ!0Lp1G2g1G2gO##hQpO,5<|O$#^QlO,5=OO%3[Q`O,5<}O%3gQpO,5<}O!+rQMhO'#IsO%4aQMjO1G2rO!+rQMhO'#IuO%5SQMjO1G2tO%5^QMjO1G5oO%5hQMjO1G5oOOQO,5?c,5?cOOQO-E<u-E<uOOQO1G.{1G.{O!9lQpO,59uO%[QlO,59uOOQ!0Lh,5<i,5<iO%5uQ`O1G2YO!+rQMhO1G2aO!+rQMhO1G5oO!+rQMhO1G5oO%5zQ!0MxO7+'lOOQ!0Lf7+'l7+'lO!$fQlO7+'lO%6nQ`O,5;^OOQ!0Lb,5?e,5?eOOQ!0Lb-E<w-E<wO%6sQ!dO'#K[O#'cQ`O7+(dO4UQ!fO7+(dO$BuQ`O7+(dO%6}Q!0MvO'#CiO%7nQ!0LrO,5=RO%8PQ!0MvO,5=RO%8dQ`O,5=ROOQ!0Lb1G5m1G5mOOQ[7+$a7+$aO!BYQ!0LrO7+$aO!BeQpO7+$aO!$fQlO7+&_O%8lQ`O'#JOO%9TQ`O,5@}OOQO1G3f1G3fO9aQ`O,5@}O%9TQ`O,5@}O%9]Q`O,5@}OOQO,5?k,5?kOOQO-E<}-E<}OOQ!0Lf7+'S7+'SO%9bQ`O7+)PO9kQ!0LrO7+)PO9aQ`O7+)PO@iQ`O7+)POOQ[7+(o7+(oO%9gQ!0MvO7+(lO!&iQMhO7+(lO!DfQ`O7+(mOOQ[7+(m7+(mO!&iQMhO7+(mO%9qQ`O'#K`O%9|Q`O,5=kOOQO,5?g,5?gOOQO-E<y-E<yOOQ[7+(r7+(rO%;`QpO'#HYOOQ[1G3_1G3_O!&iQMhO1G3_O%[QlO1G3_O%;gQ`O1G3_O%;rQMhO1G3_O9kQ!0LrO1G3aO$#yQ`O1G3aO9UQ`O1G3aO!BeQpO1G3aO!BmQMhO1G3aO%<QQ`O'#I}O%<fQ`O,5@{O%<nQpO,5@{OOQ!0Lb1G3b1G3bOOQ[7+$V7+$VO@iQ`O7+$VO9kQ!0LrO7+$VO%<yQ`O7+$VO%[QlO1G6jO%[QlO1G6kO%=OQ!0LrO1G6jO%=YQlO1G3iO%=aQ`O1G3iO%=fQlO1G3iOOQ[7+)R7+)RO9kQ!0LrO7+)]O`QlO7+)_OOQ['#Kf'#KfOOQ['#JQ'#JQO%=mQlO,5>^OOQ[,5>^,5>^O%[QlO'#HsO%=zQ`O'#HuOOQ[,5>d,5>dO9ZQ`O,5>dOOQ[,5>f,5>fOOQ[7+)h7+)hOOQ[7+)n7+)nOOQ[7+)r7+)rOOQ[7+)t7+)tO%>PQpO1G5zO%>kQ?MtO1G0xO%>uQ`O1G0xOOQO1G/q1G/qO%?QQ?MtO1G/qO>wQ`O1G/qO!(yQlO'#DkOOQO,5>},5>}OOQO-E<a-E<aOOQO,5?T,5?TOOQO-E<g-E<gO!BeQpO1G/qOOQO-E<c-E<cOOQ!0Ln1G0Z1G0ZOOQ!0Lf7+%s7+%sO#'cQ`O7+%sOOQ!0Lf7+&^7+&^O>wQ`O7+&^O!BeQpO7+&^OOQO7+%v7+%vO$?{Q!0MxO7+&VOOQO7+&V7+&VO%[QlO7+&VO%?[Q!0LrO7+&VO!BYQ!0LrO7+%vO!BeQpO7+%vO%?gQ!0LrO7+&VO%?uQ!0MxO7++pO%[QlO7++pO%@VQ`O7++oO%@VQ`O7++oOOQO1G4q1G4qO9ZQ`O1G4qO%@_Q`O1G4qOOQS7+%{7+%{O#'cQ`O<<LOO4UQ!fO<<LOO%@mQ`O<<LOOOQ[<<LO<<LOO!&iQMhO<<LOO%[QlO<<LOO%@uQ`O<<LOO%AQQ!0MzO,5?_O%C]Q!0MzO,5?aO%EhQ!0MzO1G2_O%GyQ!0MzO1G2rO%JUQ!0MzO1G2tO%LaQ!fO,5?OO%[QlO,5?OOOQO-E<b-E<bO%LkQ`O1G5{OOQ!0Lf<<JS<<JSO%LsQ?MtO1G0sO%NzQ?MtO1G0}O& RQ?MtO1G0}O&#SQ?MtO1G0}O&#ZQ?MtO1G0}O&%[Q?MtO1G0}O&']Q?MtO1G0}O&'dQ?MtO1G0}O&'kQ?MtO1G0}O&)lQ?MtO1G0}O&)sQ?MtO1G0}O&)zQ!0MxO<<JeO&+rQ?MtO1G0}O&,oQ?MvO1G0}O&-rQ?MvO'#JjO&/xQ?MtO1G1bO&0VQ?MtO1G0SO&0aQMjO,5?ROOQO-E<e-E<eO!(yQlO'#FpOOQO'#KX'#KXOOQO1G1t1G1tO&0kQ`O1G1sO&0pQ?MtO,5?YOOOW7+'g7+'gOOOO1G/X1G/XO&0zQ!dO1G4vOOQ!0Lh7+(P7+(PP!&iQMhO,5?[O!+rQMhO7+(bO&1RQ`O,5?ZO9ZQ`O,5?ZOOQO-E<m-E<mO&1aQ`O1G6`O&1aQ`O1G6`O&1iQ`O1G6`O&1tQMjO7+'yO&2UQ!dO,5?]O&2`Q`O,5?]O!&iQMhO,5?]OOQO-E<o-E<oO&2eQ!dO1G6aO&2oQ`O1G6aO&2wQ`O1G2jO!&iQMhO1G2jOOQ!0Lb1G2h1G2hOOQ!0Lb1G2i1G2iO%2qQpO1G2hO!BeQpO1G2hOCfQ`O1G2hOOQ!0Lb1G2p1G2pO&2|QpO1G2hO&3[Q`O1G2jO$)iQ`O1G2iOCfQ`O1G2iO$#^QlO1G2jO&3dQ`O1G2iO&4WQMjO,5?_OOQ!0Lh-E<r-E<rO&4yQMjO,5?aOOQ!0Lh-E<t-E<tO!+rQMhO7++ZOOQ!0Lh1G/a1G/aO&5TQ`O1G/aOOQ!0Lh7+'t7+'tO&5YQMjO7+'{O&5jQMjO7++ZO&5tQMjO7++ZO&6RQ!0MxO<<KWOOQ!0Lf<<KW<<KWO&6uQ`O1G0xO!&iQMhO'#IxO&6zQ`O,5@vO&8|Q!fO<<LOO!&iQMhO1G2mO&9TQ!0LrO1G2mOOQ[<<G{<<G{O!BYQ!0LrO<<G{O&9fQ!0MxO<<IyOOQ!0Lf<<Iy<<IyOOQO,5?j,5?jO&:YQ`O,5?jO&:_Q`O,5?jOOQO-E<|-E<|O&:mQ`O1G6iO&:mQ`O1G6iO9aQ`O1G6iO@iQ`O<<LkOOQ[<<Lk<<LkO&:uQ`O<<LkO9kQ!0LrO<<LkOOQ[<<LW<<LWO%9gQ!0MvO<<LWOOQ[<<LX<<LXO!DfQ`O<<LXO&:zQpO'#IzO&;VQ`O,5@zO!(yQlO,5@zOOQ[1G3V1G3VOOQO'#I|'#I|O9kQ!0LrO'#I|O&;_QpO,5=tOOQ[,5=t,5=tO&;fQpO'#EeO&;mQpO'#GdO&;rQ`O7+(yO&;wQ`O7+(yOOQ[7+(y7+(yO!&iQMhO7+(yO%[QlO7+(yO&<PQ`O7+(yOOQ[7+({7+({O9kQ!0LrO7+({O$#yQ`O7+({O9UQ`O7+({O!BeQpO7+({O&<[Q`O,5?iOOQO-E<{-E<{OOQO'#H]'#H]O&<gQ`O1G6gO9kQ!0LrO<<GqOOQ[<<Gq<<GqO@iQ`O<<GqO&<oQ`O7+,UO&<tQ`O7+,VO%[QlO7+,UO%[QlO7+,VOOQ[7+)T7+)TO&<yQ`O7+)TO&=OQlO7+)TO&=VQ`O7+)TOOQ[<<Lw<<LwOOQ[<<Ly<<LyOOQ[-E=O-E=OOOQ[1G3x1G3xO&=[Q`O,5>_OOQ[,5>a,5>aO&=aQ`O1G4OO9ZQ`O7+&dO!(yQlO7+&dOOQO7+%]7+%]O&=fQ?MtO1G6XO>wQ`O7+%]OOQ!0Lf<<I_<<I_OOQ!0Lf<<Ix<<IxO>wQ`O<<IxOOQO<<Iq<<IqO$?{Q!0MxO<<IqO%[QlO<<IqOOQO<<Ib<<IbO!BYQ!0LrO<<IbO&=pQ!0LrO<<IqO&={Q!0MxO<= [O&>]Q`O<= ZOOQO7+*]7+*]O9ZQ`O7+*]OOQ[ANAjANAjO&>eQ!fOANAjO!&iQMhOANAjO#'cQ`OANAjO4UQ!fOANAjO&>lQ`OANAjO%[QlOANAjO&>tQ!0MzO7+'yO&AVQ!0MzO,5?_O&CbQ!0MzO,5?aO&EmQ!0MzO7+'{O&HOQ!fO1G4jO&HYQ?MtO7+&_O&J^Q?MvO,5=WO&LeQ?MvO,5=YO&LuQ?MvO,5=WO&MVQ?MvO,5=YO&MgQ?MvO,59sO' mQ?MvO,5<jO'#pQ?MvO,5<lO'&UQ?MvO,5<zO''zQ?MtO7+'jO'(XQ?MtO7+'lO'(fQ`O,5<[OOQO7+'_7+'_OOQ!0Lh7+*b7+*bO'(kQMjO<<K|OOQO1G4u1G4uO'(rQ`O1G4uO'(}Q`O1G4uO')]Q`O7++zO')]Q`O7++zO!&iQMhO1G4wO')eQ!dO1G4wO')oQ`O7++{O')wQ`O7+(UO'*SQ!dO7+(UOOQ!0Lb7+(S7+(SOOQ!0Lb7+(T7+(TO!BeQpO7+(SOCfQ`O7+(SO'*^Q`O7+(UO!&iQMhO7+(UO$)iQ`O7+(TO'*cQ`O7+(UOCfQ`O7+(TO'*kQMjO<<NuOOQ!0Lh7+${7+${O!+rQMhO<<NuO'*uQ!dO,5?dOOQO-E<v-E<vO'+PQ!0MvO7+(XO!&iQMhO7+(XOOQ[AN=gAN=gO9aQ`O1G5UOOQO1G5U1G5UO'+aQ`O1G5UO'+fQ`O7+,TO'+fQ`O7+,TO9kQ!0LrOANBVO@iQ`OANBVOOQ[ANBVANBVOOQ[ANArANArOOQ[ANAsANAsO'+nQ`O,5?fOOQO-E<x-E<xO'+yQ?MtO1G6fOOQO,5?h,5?hOOQO-E<z-E<zOOQ[1G3`1G3`O',TQ`O,5=OOOQ[<<Le<<LeO!&iQMhO<<LeO&;rQ`O<<LeO',YQ`O<<LeO%[QlO<<LeOOQ[<<Lg<<LgO9kQ!0LrO<<LgO$#yQ`O<<LgO9UQ`O<<LgO',bQpO1G5TO',mQ`O7+,ROOQ[AN=]AN=]O9kQ!0LrOAN=]OOQ[<= p<= pOOQ[<= q<= qO',uQ`O<= pO',zQ`O<= qOOQ[<<Lo<<LoO'-PQ`O<<LoO'-UQlO<<LoOOQ[1G3y1G3yO>wQ`O7+)jO'-]Q`O<<JOO'-hQ?MtO<<JOOOQO<<Hw<<HwOOQ!0LfAN?dAN?dOOQOAN?]AN?]O$?{Q!0MxOAN?]OOQOAN>|AN>|O%[QlOAN?]OOQO<<Mw<<MwOOQ[G27UG27UO!&iQMhOG27UO#'cQ`OG27UO'-rQ!fOG27UO4UQ!fOG27UO'-yQ`OG27UO'.RQ?MtO<<JeO'.`Q?MvO1G2_O'0UQ?MvO,5?_O'2XQ?MvO,5?aO'4[Q?MvO1G2rO'6_Q?MvO1G2tO'8bQ?MtO<<KWO'8oQ?MtO<<IyOOQO1G1v1G1vO!+rQMhOANAhOOQO7+*a7+*aO'8|Q`O7+*aO'9XQ`O<= fO'9aQ!dO7+*cOOQ!0Lb<<Kp<<KpO$)iQ`O<<KpOCfQ`O<<KpO'9kQ`O<<KpO!&iQMhO<<KpOOQ!0Lb<<Kn<<KnO!BeQpO<<KnO'9vQ!dO<<KpOOQ!0Lb<<Ko<<KoO':QQ`O<<KpO!&iQMhO<<KpO$)iQ`O<<KoO':VQMjOANDaO':aQ!0MvO<<KsOOQO7+*p7+*pO9aQ`O7+*pO':qQ`O<= oOOQ[G27qG27qO9kQ!0LrOG27qO!(yQlO1G5QO':yQ`O7+,QO';RQ`O1G2jO&;rQ`OANBPOOQ[ANBPANBPO!&iQMhOANBPO';WQ`OANBPOOQ[ANBRANBRO9kQ!0LrOANBRO$#yQ`OANBROOQO'#H^'#H^OOQO7+*o7+*oOOQ[G22wG22wOOQ[ANE[ANE[OOQ[ANE]ANE]OOQ[ANBZANBZO';`Q`OANBZOOQ[<<MU<<MUO!(yQlOAN?jOOQOG24wG24wO$?{Q!0MxOG24wO#'cQ`OLD,pOOQ[LD,pLD,pO!&iQMhOLD,pO';eQ!fOLD,pO';lQ?MvO7+'yO'=bQ?MvO,5?_O'?eQ?MvO,5?aO'AhQ?MvO7+'{O'C^QMjOG27SOOQO<<M{<<M{OOQ!0LbANA[ANA[O$)iQ`OANA[OCfQ`OANA[O'CnQ!dOANA[OOQ!0LbANAYANAYO'CuQ`OANA[O!&iQMhOANA[O'DQQ!dOANA[OOQ!0LbANAZANAZOOQO<<N[<<N[OOQ[LD-]LD-]O'D[Q?MtO7+*lOOQO'#Ge'#GeOOQ[G27kG27kO&;rQ`OG27kO!&iQMhOG27kOOQ[G27mG27mO9kQ!0LrOG27mOOQ[G27uG27uO'DfQ?MtOG25UOOQOLD*cLD*cOOQ[!$(![!$(![O#'cQ`O!$(![O!&iQMhO!$(![O'DpQ!0MzOG27SOOQ!0LbG26vG26vO$)iQ`OG26vO'GRQ`OG26vOCfQ`OG26vO'G^Q!dOG26vO!&iQMhOG26vOOQ[LD-VLD-VO&;rQ`OLD-VOOQ[LD-XLD-XOOQ[!)9Ev!)9EvO#'cQ`O!)9EvOOQ!0LbLD,bLD,bO$)iQ`OLD,bOCfQ`OLD,bO'GeQ`OLD,bO'GpQ!dOLD,bOOQ[!$(!q!$(!qOOQ[!.K;b!.K;bO'GwQ?MvOG27SOOQ!0Lb!$( |!$( |O$)iQ`O!$( |OCfQ`O!$( |O'ImQ`O!$( |OOQ!0Lb!)9Eh!)9EhO$)iQ`O!)9EhOCfQ`O!)9EhOOQ!0Lb!.K;S!.K;SO$)iQ`O!.K;SOOQ!0Lb!4/0n!4/0nO!(yQlO'#DxO1PQ`O'#EVO'IxQ!fO'#JpO'JPQ!L^O'#DtO'JWQlO'#D|O'J_Q!fO'#CiO'LuQ!fO'#CiO!(yQlO'#EOO'MVQlO,5;XO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO'#InO( YQ`O,5<hO!(yQlO,5;cO( bQMhO,5;cO(!{QMhO,5;cO!(yQlO,5;vO!&iQMhO'#GlO( bQMhO'#GlO!&iQMhO'#GnO( bQMhO'#GnO1SQ`O'#DXO1SQ`O'#DXO!&iQMhO'#GOO( bQMhO'#GOO!&iQMhO'#GQO( bQMhO'#GQO!&iQMhO'#G`O( bQMhO'#G`O!(yQlO,5:hO(#SQpO'#D]O(#^QpO'#JtO!(yQlO,5@mO'MVQlO1G0sO(#hQ?MtO'#CiO!(yQlO1G2OO!&iQMhO'#IsO( bQMhO'#IsO!&iQMhO'#IuO( bQMhO'#IuO(#rQ!dO'#CrO!&iQMhO,5<sO( bQMhO,5<sO'MVQlO1G2QO!(yQlO7+&yO!&iQMhO1G2_O( bQMhO1G2_O!&iQMhO'#IsO( bQMhO'#IsO!&iQMhO'#IuO( bQMhO'#IuO!&iQMhO1G2aO( bQMhO1G2aO'MVQlO7+'lO'MVQlO7+&_O!&iQMhOANAhO( bQMhOANAhO($VQ`O'#EmO($[Q`O'#EmO($dQ`O'#F[O($iQ`O'#EwO($nQ`O'#KRO($yQ`O'#KPO(%UQ`O,5;XO(%ZQMjO,5<dO(%bQ`O'#GXO(%gQ`O'#GXO(%lQ`O,5<fO(%tQ`O,5;XO(%|Q?MtO1G1_O(&TQ`O,5<sO(&YQ`O,5<sO(&_Q`O,5<uO(&dQ`O,5<uO(&iQ`O1G2QO(&nQ`O1G0sO(&sQMjO<<K|O(&zQMjO<<K|O7eQMhO'#F{O9UQ`O'#FzOAdQ`O'#ElO!(yQlO,5;sO!3^Q`O'#GXO!3^Q`O'#GXO!3^Q`O'#GZO!3^Q`O'#GZO!+rQMhO7+(bO!+rQMhO7+(bO%-ZQ!dO1G2vO%-ZQ!dO1G2vO!&iQMhO,5=[O!&iQMhO,5=[",stateData:"((P~O'zOS'{OSTOS'|RQ~OPYOQYOSfOY!VOaqOdzOeyOj!POnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]XO!guO!jZO!mYO!nYO!oYO!qvO!swO!vxO!z]O$V|O$miO%g}O%i!QO%k!OO%l!OO%m!OO%p!RO%r!SO%u!TO%v!TO%x!UO&U!WO&[!XO&^!YO&`!ZO&b![O&e!]O&k!^O&q!_O&s!`O&u!aO&w!bO&y!cO(RSO(TTO(WUO(_VO(m[O~OWtO~P`OPYOQYOSfOd!jOe!iOnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]!eO!guO!jZO!mYO!nYO!oYO!qvO!s!gO!v!hO$V!kO$miO(R!dO(TTO(WUO(_VO(m[O~Oa!wOq!nO!Q!oO!`!yO!a!vO!b!vO!z;wO#R!pO#S!pO#T!xO#U!pO#V!pO#Y!zO#Z!zO(S!lO(TTO(WUO(c!mO(m!sO~O'|!{O~OP]XR]X[]Xa]Xp]X!O]X!Q]X!Z]X!j]X!n]X#P]X#Q]X#^]X#ifX#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#w]X#y]X#z]X$P]X'x]X(_]X(p]X(w]X(x]X~O!e%QX~P(qO_!}O(T#PO(U!}O(V#PO~O_#QO(V#PO(W#PO(X#QO~Ov#SO!S#TO(`#TO(a#VO~OPYOQYOSfOd!jOe!iOnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]!eO!guO!jZO!mYO!nYO!oYO!qvO!s!gO!v!hO$V!kO$miO(R;{O(TTO(WUO(_VO(m[O~O!Y#ZO!Z#WO!W(fP!W(tP~P+}O![#cO~P`OPYOQYOSfOd!jOe!iOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]!eO!guO!jZO!mYO!nYO!oYO!qvO!s!gO!v!hO$V!kO$miO(TTO(WUO(_VO(m[O~On#mO!Y#iO!z]O#g#lO#h#iO(R;|O!i(qP~P.iO!j#oO(R#nO~O!v#sO!z]O%g#tO~O#i#uO~O!e#vO#i#uO~OP$[OR#zO[$cOp$aO!O#yO!Q#{O!Z$_O!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO#u$SO#w$UO#y$WO#z$XO(_VO(p$YO(w#|O(x#}O~Oa(dX'x(dX'u(dX!i(dX!W(dX!](dX%h(dX!e(dX~P1qO#Q$dO#^$eO$P$eOP(eXR(eX[(eXp(eX!O(eX!Q(eX!Z(eX!j(eX!n(eX#P(eX#l(eX#m(eX#n(eX#o(eX#p(eX#q(eX#r(eX#s(eX#t(eX#u(eX#w(eX#y(eX#z(eX(_(eX(p(eX(w(eX(x(eX!](eX%h(eX~Oa(eX'x(eX'u(eX!W(eX!i(eXt(eX!e(eX~P4UO#^$eO~O$[$hO$^$gO$e$mO~OSfO!]$nO$h$oO$j$qO~Oh%VOj%cOn%WOp%XOq$tOr$tOx%YOz%ZO|%[O!Q${O!]$|O!g%aO!j$xO#h%bO$V%_O$s%]O$u%^O$x%`O(R$sO(TTO(WUO(_$uO(w$}O(x%POg([P~O!j%dO~O!Q%gO!]%hO(R%fO~O!e%lO~Oa%mO'x%mO~O!O%qO~P%[O(S!lO~P%[O%m%uO~P%[Oh%VO!j%dO(R%fO(S!lO~Oe%|O!j%dO(R%fO~O#t$RO~O!O&RO!]&OO!j&QO%i&UO(R%fO(S!lO(TTO(WUO`)UP~O!v#sO~O%r&WO!Q)QX!])QX(R)QX~O(R&XO~Oj!PO!s&^O%i!QO%k!OO%l!OO%m!OO%p!RO%r!SO%u!TO%v!TO~Od&cOe&bO!v&`O%g&aO%z&_O~P<POd&fOeyOj!PO!]&eO!s&^O!vxO!z]O%g}O%k!OO%l!OO%m!OO%p!RO%r!SO%u!TO%v!TO%x!UO~Ob&iO#^&lO%i&gO(S!lO~P=UO!j&mO!s&qO~O!j#oO~O!]XO~Oa%mO'v&yO'x%mO~Oa%mO'v&|O'x%mO~Oa%mO'v'OO'x%mO~O'u]X!W]Xt]X!i]X&Y]X!]]X%h]X!e]X~P(qO!`']O!a'UO!b'UO(S!lO(TTO(WUO~Oq'SO!Q'RO!Y'VO(c'QO![(gP![(vP~P@]Ol'`O!]'^O(R%fO~Oe'eO!j%dO(R%fO~O!O&RO!j&QO~Oq!nO!Q!oO!z;wO#R!pO#S!pO#U!pO#V!pO(S!lO(TTO(WUO(c!mO(m!sO~O!`'kO!a'jO!b'jO#T!pO#Y'lO#Z'lO~PAwOa%mOh%VO!e#vO!j%dO'x%mO(p'nO~O!n'rO#^'pO~PCVOq!nO!Q!oO(TTO(WUO(c!mO(m!sO~O!]XOq(kX!Q(kX!`(kX!a(kX!b(kX!z(kX#R(kX#S(kX#T(kX#U(kX#V(kX#Y(kX#Z(kX(S(kX(T(kX(W(kX(c(kX(m(kX~O!a'jO!b'jO(S!lO~PCuO'}'vO(O'vO(P'xO~O_!}O(T'zO(U!}O(V'zO~O_#QO(V'zO(W'zO(X#QO~Ot'|O~P%[Ov#SO!S#TO(`#TO(a(PO~O!Y(RO!W'UX!W'[X!Z'UX!Z'[X~P+}O!Z(TO!W(fX~OP$[OR#zO[$cOp$aO!O#yO!Q#{O!Z(TO!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO#u$SO#w$UO#y$WO#z$XO(_VO(p$YO(w#|O(x#}O~O!W(fX~PGpO!W(YO~O!W(sX!Z(sX!e(sX!i(sX(p(sX~O#^(sX#i#bX![(sX~PIsO#^(ZO!W(uX!Z(uX~O!Z([O!W(tX~O!W(_O~O#^$eO~PIsO![(`O~P`OR#zO!O#yO!Q#{O!j#xO(_VOP!la[!lap!la!Z!la!n!la#P!la#l!la#m!la#n!la#o!la#p!la#q!la#r!la#s!la#t!la#u!la#w!la#y!la#z!la(p!la(w!la(x!la~Oa!la'x!la'u!la!W!la!i!lat!la!]!la%h!la!e!la~PKZO!i(aO~O!e#vO#^(bO(p'nO!Z(rXa(rX'x(rX~O!i(rX~PMvO!Q%gO!]%hO!z]O#g(gO#h(fO(R%fO~O!Z(hO!i(qX~O!i(jO~O!Q%gO!]%hO#h(fO(R%fO~OP(eXR(eX[(eXp(eX!O(eX!Q(eX!Z(eX!j(eX!n(eX#P(eX#l(eX#m(eX#n(eX#o(eX#p(eX#q(eX#r(eX#s(eX#t(eX#u(eX#w(eX#y(eX#z(eX(_(eX(p(eX(w(eX(x(eX~O!e#vO!i(eX~P! dOR(lO!O(kO!j#xO#Q$dO!z!ya!Q!ya~O!v!ya%g!ya!]!ya#g!ya#h!ya(R!ya~P!#eO!v(pO~OPYOQYOSfOd!jOe!iOnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]XO!guO!jZO!mYO!nYO!oYO!qvO!s!gO!v!hO$V!kO$miO(R!dO(TTO(WUO(_VO(m[O~Oh%VOn%WOp%XOq$tOr$tOx%YOz%ZO|<eO!Q${O!]$|O!g=vO!j$xO#h<kO$V%_O$s<gO$u<iO$x%`O(R(tO(TTO(WUO(_$uO(w$}O(x%PO~O#i(vO~O!Y(xO!i(iP~P%[O(c(zO(m[O~O!Q(|O!j#xO(c(zO(m[O~OP;vOQ;vOSfOd=rOe!iOnkOp;vOqkOrkOxkOz;vO|;vO!QWO!UkO!VkO!]!eO!g;yO!jZO!m;vO!n;vO!o;vO!q;zO!s;}O!v!hO$V!kO$m=pO(R)ZO(TTO(WUO(_VO(m[O~O!Z$_Oa$pa'x$pa'u$pa!i$pa!W$pa!]$pa%h$pa!e$pa~Oj)bO~P!&iOh%VOn%WOp%XOq$tOr$tOx%YOz%ZO|%[O!Q${O!]$|O!g%aO!j$xO#h%bO$V%_O$s%]O$u%^O$x%`O(R(tO(TTO(WUO(_$uO(w$}O(x%PO~Og(nP~P!+rO!O)gO!e)fO!]$]X$Y$]X$[$]X$^$]X$e$]X~O!e)fO!](yX$Y(yX$[(yX$^(yX$e(yX~O!O)gO~P!-{O!O)gO!](yX$Y(yX$[(yX$^(yX$e(yX~O!])iO$Y)mO$[)hO$^)hO$e)nO~O!Y)qO~P!(yO$[$hO$^$gO$e)uO~Ol$yX!O$yX#Q$yX'w$yX(w$yX(x$yX~OgkXg$yXlkX!ZkX#^kX~P!/qOv)wO(`)xO(a)zO~Ol*TO!O)|O'w)}O(w$}O(x%PO~Og){O~P!0uOg*UO~Oh%VOn%WOp%XOq$tOr$tOx%YOz%ZO|<eO!Q*WO!]*XO!g=vO!j$xO#h<kO$V%_O$s<gO$u<iO$x%`O(TTO(WUO(_$uO(w$}O(x%PO~O!Y*[O(R*VO!i(|P~P!1dO#i*^O~O!j*_O~Oh%VOn%WOp%XOq$tOr$tOx%YOz%ZO|<eO!Q${O!]$|O!g=vO!j$xO#h<kO$V%_O$s<gO$u<iO$x%`O(R*aO(TTO(WUO(_$uO(w$}O(x%PO~O!Y*dO!W(}P~P!3cOp*pOq!nO!Q*fO!`*nO!a*hO!b*hO!j*_O#Y*oO%_*jO(S!lO(TTO(WUO(c!mO~O![*mO~P!5WO#Q$dOl(^X!O(^X'w(^X(w(^X(x(^X!Z(^X#^(^X~Og(^X#}(^X~P!6YOl*uO#^*tOg(]X!Z(]X~O!Z*vOg([X~Oj%cO(R&XOg([P~Oq*yO~O!j+OO~O(R(tO~On+TO!Q%gO!Y#iO!]%hO!z]O#g#lO#h#iO(R%fO!i(qP~O!e#vO#i+UO~O!Q%gO!Y+WO!Z([O!]%hO(R%fO!W(tP~Oq'YO!Q+YO!Y+XO(TTO(WUO(c(zO~O![(vP~P!9]O!Z+ZOa)RX'x)RX~OP$[OR#zO[$cOp$aO!O#yO!Q#{O!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO#u$SO#w$UO#y$WO#z$XO(_VO(p$YO(w#|O(x#}O~Oa!ha!Z!ha'x!ha'u!ha!W!ha!i!hat!ha!]!ha%h!ha!e!ha~P!:TOR#zO!O#yO!Q#{O!j#xO(_VOP!pa[!pap!pa!Z!pa!n!pa#P!pa#l!pa#m!pa#n!pa#o!pa#p!pa#q!pa#r!pa#s!pa#t!pa#u!pa#w!pa#y!pa#z!pa(p!pa(w!pa(x!pa~Oa!pa'x!pa'u!pa!W!pa!i!pat!pa!]!pa%h!pa!e!pa~P!<kOR#zO!O#yO!Q#{O!j#xO(_VOP!ra[!rap!ra!Z!ra!n!ra#P!ra#l!ra#m!ra#n!ra#o!ra#p!ra#q!ra#r!ra#s!ra#t!ra#u!ra#w!ra#y!ra#z!ra(p!ra(w!ra(x!ra~Oa!ra'x!ra'u!ra!W!ra!i!rat!ra!]!ra%h!ra!e!ra~P!?ROh%VOl+dO!]'^O%h+cO~O!e+fOa(ZX!](ZX'x(ZX!Z(ZX~Oa%mO!]XO'x%mO~Oh%VO!j%dO~Oh%VO!j%dO(R%fO~O!e#vO#i(vO~Ob+qO%i+rO(R+nO(TTO(WUO![)VP~O!Z+sO`)UX~O[+wO~O`+xO~O!]&OO(R%fO(S!lO`)UP~Oh%VO#^+}O~Oh%VOl,QO!]$|O~O!],SO~O!O,UO!]XO~O%m%uO~O!v,ZO~Oe,`O~Ob,aO(R#nO(TTO(WUO![)TP~Oe%|O~O%i!QO(R&XO~P=UO[,fO`,eO~OPYOQYOSfOdzOeyOnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!guO!jZO!mYO!nYO!oYO!qvO!vxO!z]O$miO%g}O(TTO(WUO(_VO(m[O~O!]!eO!s!gO$V!kO(R!dO~P!FRO`,eOa%mO'x%mO~OPYOQYOSfOd!jOe!iOnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]!eO!guO!jZO!mYO!nYO!oYO!qvO!v!hO$V!kO$miO(R!dO(TTO(WUO(_VO(m[O~Oa,kOj!OO!swO%k!OO%l!OO%m!OO~P!HkO!j&mO~O&[,qO~O!],sO~O&m,uO&o,vOP&jaQ&jaS&jaY&jaa&jad&jae&jaj&jan&jap&jaq&jar&jax&jaz&ja|&ja!Q&ja!U&ja!V&ja!]&ja!g&ja!j&ja!m&ja!n&ja!o&ja!q&ja!s&ja!v&ja!z&ja$V&ja$m&ja%g&ja%i&ja%k&ja%l&ja%m&ja%p&ja%r&ja%u&ja%v&ja%x&ja&U&ja&[&ja&^&ja&`&ja&b&ja&e&ja&k&ja&q&ja&s&ja&u&ja&w&ja&y&ja'u&ja(R&ja(T&ja(W&ja(_&ja(m&ja![&ja&c&jab&ja&h&ja~O(R,{O~Oh!cX!Z!PX![!PX!e!PX!e!cX!j!cX#^!PX~O!Z!cX![!cX~P# qO!e-QO#^-POh(hX!Z#fX![#fX!e(hX!j(hX~O!Z(hX![(hX~P#!dOh%VO!e-SO!j%dO!Z!_X![!_X~Oq!nO!Q!oO(TTO(WUO(c!mO~OP;vOQ;vOSfOd=rOe!iOnkOp;vOqkOrkOxkOz;vO|;vO!QWO!UkO!VkO!]!eO!g;yO!jZO!m;vO!n;vO!o;vO!q;zO!s;}O!v!hO$V!kO$m=pO(TTO(WUO(_VO(m[O~O(R<rO~P##yO!Z-WO![(gX~O![-YO~O!e-QO#^-PO!Z#fX![#fX~O!Z-ZO![(vX~O![-]O~O!a-^O!b-^O(S!lO~P##hO![-aO~P'_Ol-dO!]'^O~O!W-iO~Oq!ya!`!ya!a!ya!b!ya#R!ya#S!ya#T!ya#U!ya#V!ya#Y!ya#Z!ya(S!ya(T!ya(W!ya(c!ya(m!ya~P!#eO!n-nO#^-lO~PCVO!a-pO!b-pO(S!lO~PCuOa%mO#^-lO'x%mO~Oa%mO!e#vO#^-lO'x%mO~Oa%mO!e#vO!n-nO#^-lO'x%mO(p'nO~O'}'vO(O'vO(P-uO~Ot-vO~O!W'Ua!Z'Ua~P!:TO!Y-zO!W'UX!Z'UX~P%[O!Z(TO!W(fa~O!W(fa~PGpO!Z([O!W(ta~O!Q%gO!Y.OO!]%hO(R%fO!W'[X!Z'[X~O#^.QO!Z(ra!i(raa(ra'x(ra~O!e#vO~P#,PO!Z(hO!i(qa~O!Q%gO!]%hO#h.UO(R%fO~On.ZO!Q%gO!Y.WO!]%hO!z]O#g.YO#h.WO(R%fO!Z'_X!i'_X~OR._O!j#xO~Oh%VOl.bO!]'^O%h.aO~Oa#ai!Z#ai'x#ai'u#ai!W#ai!i#ait#ai!]#ai%h#ai!e#ai~P!:TOl=|O!O)|O'w)}O(w$}O(x%PO~O#i#]aa#]a#^#]a'x#]a!Z#]a!i#]a!]#]a!W#]a~P#.{O#i(^XP(^XR(^X[(^Xa(^Xp(^X!Q(^X!j(^X!n(^X#P(^X#l(^X#m(^X#n(^X#o(^X#p(^X#q(^X#r(^X#s(^X#t(^X#u(^X#w(^X#y(^X#z(^X'x(^X(_(^X(p(^X!i(^X!W(^X'u(^Xt(^X!](^X%h(^X!e(^X~P!6YO!Z.oO!i(iX~P!:TO!i.rO~O!W.tO~OP$[OR#zO!O#yO!Q#{O!j#xO!n$[O(_VO[#kia#kip#ki!Z#ki#P#ki#m#ki#n#ki#o#ki#p#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki'x#ki(p#ki(w#ki(x#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~O#l#ki~P#2kO#l$OO~P#2kOP$[OR#zOp$aO!O#yO!Q#{O!j#xO!n$[O#l$OO#m$PO#n$PO#o$PO(_VO[#kia#ki!Z#ki#P#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki'x#ki(p#ki(w#ki(x#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~O#p#ki~P#5YO#p$QO~P#5YOP$[OR#zO[$cOp$aO!O#yO!Q#{O!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO(_VOa#ki!Z#ki#w#ki#y#ki#z#ki'x#ki(p#ki(w#ki(x#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~O#u#ki~P#7wOP$[OR#zO[$cOp$aO!O#yO!Q#{O!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO#u$SO(_VO(x#}Oa#ki!Z#ki#y#ki#z#ki'x#ki(p#ki(w#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~O#w$UO~P#:_O#w#ki~P#:_O#u$SO~P#7wOP$[OR#zO[$cOp$aO!O#yO!Q#{O!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO#u$SO#w$UO(_VO(w#|O(x#}Oa#ki!Z#ki#z#ki'x#ki(p#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~O#y#ki~P#=TO#y$WO~P#=TOP]XR]X[]Xp]X!O]X!Q]X!j]X!n]X#P]X#Q]X#^]X#ifX#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#w]X#y]X#z]X$P]X(_]X(p]X(w]X(x]X!Z]X![]X~O#}]X~P#?rOP$[OR#zO[<_Op<]O!O#yO!Q#{O!j#xO!n$[O#P<SO#l<PO#m<QO#n<QO#o<QO#p<RO#q<SO#r<SO#s<^O#t<SO#u<TO#w<VO#y<XO#z<YO(_VO(p$YO(w#|O(x#}O~O#}.vO~P#BPO#Q$dO#^<`O$P<`O#}(eX![(eX~P! dOa'ba!Z'ba'x'ba'u'ba!i'ba!W'bat'ba!]'ba%h'ba!e'ba~P!:TO[#kia#kip#ki!Z#ki#P#ki#p#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki'x#ki(p#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~OP$[OR#zO!O#yO!Q#{O!j#xO!n$[O#l$OO#m$PO#n$PO#o$PO(_VO(w#ki(x#ki~P#EROl=|O!O)|O'w)}O(w$}O(x%POP#kiR#ki!Q#ki!j#ki!n#ki#l#ki#m#ki#n#ki#o#ki(_#ki~P#ERO!Z.zOg(nX~P!0uOg.|O~Oa$Oi!Z$Oi'x$Oi'u$Oi!W$Oi!i$Oit$Oi!]$Oi%h$Oi!e$Oi~P!:TO$[.}O$^.}O~O$[/OO$^/OO~O!e)fO#^/PO!]$bX$Y$bX$[$bX$^$bX$e$bX~O!Y/QO~O!])iO$Y/SO$[)hO$^)hO$e/TO~O!Z<ZO![(dX~P#BPO![/UO~O!e)fO$e(yX~O$e/WO~Ot/XO~P!&iOv)wO(`)xO(a/[O~O!Q/_O~O(w$}Ol%`a!O%`a'w%`a(x%`a!Z%`a#^%`a~Og%`a#}%`a~P#LTO(x%POl%ba!O%ba'w%ba(w%ba!Z%ba#^%ba~Og%ba#}%ba~P#LvO!ZfX!efX!ifX!i$yX(pfX~P!/qO!Y/hO!Z([O(R/gO!W(tP!W(}P~P!1dOp*pO!`*nO!a*hO!b*hO!j*_O#Y*oO%_*jO(S!lO(TTO(WUO~Oq<oO!Q/iO!Y+XO![*mO(c<nO![(vP~P#NaO!i/jO~P#.{O!Z/kO!e#vO(p'nO!i(|X~O!i/pO~O!Q%gO!Y*[O!]%hO(R%fO!i(|P~O#i/rO~O!W$yX!Z$yX!e%QX~P!/qO!Z/sO!W(}X~P#.{O!e/uO~O!W/wO~OnkO(R/xO~P.iOh%VOp/}O!e#vO!j%dO(p'nO~O!e+fO~Oa%mO!Z0RO'x%mO~O![0TO~P!5WO!a0UO!b0UO(S!lO~P##hOq!nO!Q0VO(TTO(WUO(c!mO~O#Y0XO~Og%`a!Z%`a#^%`a#}%`a~P!0uOg%ba!Z%ba#^%ba#}%ba~P!0uOj%cO(R&XOg'kX!Z'kX~O!Z*vOg([a~Og0bO~OR0cO!O0cO!Q0dO#Q$dOl{a'w{a(w{a(x{a!Z{a#^{a~Og{a#}{a~P$&dO!O)|O'w)}Ol$ra(w$ra(x$ra!Z$ra#^$ra~Og$ra#}$ra~P$'`O!O)|O'w)}Ol$ta(w$ta(x$ta!Z$ta#^$ta~Og$ta#}$ta~P$(RO#i0gO~Og%Sa!Z%Sa#^%Sa#}%Sa~P!0uOl0iO#^0hOg(]a!Z(]a~O!e#vO~O#i0lO~O!Z+ZOa)Ra'x)Ra~OR#zO!O#yO!Q#{O!j#xO(_VOP!pi[!pip!pi!Z!pi!n!pi#P!pi#l!pi#m!pi#n!pi#o!pi#p!pi#q!pi#r!pi#s!pi#t!pi#u!pi#w!pi#y!pi#z!pi(p!pi(w!pi(x!pi~Oa!pi'x!pi'u!pi!W!pi!i!pit!pi!]!pi%h!pi!e!pi~P$*OOh%VOp%XOq$tOr$tOx%YOz%ZO|<eO!Q${O!]$|O!g=vO!j$xO#h<kO$V%_O$s<gO$u<iO$x%`O(TTO(WUO(_$uO(w$}O(x%PO~On0vO%[0wO(R0tO~P$,fO!e+fOa(Za!](Za'x(Za!Z(Za~O#i0|O~O[]X!ZfX![fX~O!Z0}O![)VX~O![1PO~O[1QO~Ob1SO(R+nO(TTO(WUO~O!]&OO(R%fO`'sX!Z'sX~O!Z+sO`)Ua~O!i1VO~P!:TO[1YO~O`1ZO~O#^1^O~Ol1aO!]$|O~O(c(zO![)SP~Oh%VOl1jO!]1gO%h1iO~O[1tO!Z1rO![)TX~O![1uO~O`1wOa%mO'x%mO~O(R#nO(TTO(WUO~O#Q$dO#^$eO$P$eOP(eXR(eX[(eXp(eX!O(eX!Q(eX!Z(eX!j(eX!n(eX#P(eX#l(eX#m(eX#n(eX#o(eX#p(eX#q(eX#r(eX#s(eX#u(eX#w(eX#y(eX#z(eX(_(eX(p(eX(w(eX(x(eX~O#t1zO&Y1{Oa(eX~P$2PO#^$eO#t1zO&Y1{O~Oa1}O~P%[Oa2PO~O&c2SOP&aiQ&aiS&aiY&aia&aid&aie&aij&ain&aip&aiq&air&aix&aiz&ai|&ai!Q&ai!U&ai!V&ai!]&ai!g&ai!j&ai!m&ai!n&ai!o&ai!q&ai!s&ai!v&ai!z&ai$V&ai$m&ai%g&ai%i&ai%k&ai%l&ai%m&ai%p&ai%r&ai%u&ai%v&ai%x&ai&U&ai&[&ai&^&ai&`&ai&b&ai&e&ai&k&ai&q&ai&s&ai&u&ai&w&ai&y&ai'u&ai(R&ai(T&ai(W&ai(_&ai(m&ai![&aib&ai&h&ai~Ob2YO![2WO&h2XO~P`O!]XO!j2[O~O&o,vOP&jiQ&jiS&jiY&jia&jid&jie&jij&jin&jip&jiq&jir&jix&jiz&ji|&ji!Q&ji!U&ji!V&ji!]&ji!g&ji!j&ji!m&ji!n&ji!o&ji!q&ji!s&ji!v&ji!z&ji$V&ji$m&ji%g&ji%i&ji%k&ji%l&ji%m&ji%p&ji%r&ji%u&ji%v&ji%x&ji&U&ji&[&ji&^&ji&`&ji&b&ji&e&ji&k&ji&q&ji&s&ji&u&ji&w&ji&y&ji'u&ji(R&ji(T&ji(W&ji(_&ji(m&ji![&ji&c&jib&ji&h&ji~O!W2bO~O!Z!_a![!_a~P#BPOq!nO!Q!oO!Y2hO(c!mO!Z'VX!['VX~P@]O!Z-WO![(ga~O!Z']X![']X~P!9]O!Z-ZO![(va~O![2oO~P'_Oa%mO#^2xO'x%mO~Oa%mO!e#vO#^2xO'x%mO~Oa%mO!e#vO!n2|O#^2xO'x%mO(p'nO~Oa%mO'x%mO~P!:TO!Z$_Ot$pa~O!W'Ui!Z'Ui~P!:TO!Z(TO!W(fi~O!Z([O!W(ti~O!W(ui!Z(ui~P!:TO!Z(ri!i(ria(ri'x(ri~P!:TO#^3OO!Z(ri!i(ria(ri'x(ri~O!Z(hO!i(qi~O!Q%gO!]%hO!z]O#g3TO#h3SO(R%fO~O!Q%gO!]%hO#h3SO(R%fO~Ol3[O!]'^O%h3ZO~Oh%VOl3[O!]'^O%h3ZO~O#i%`aP%`aR%`a[%`aa%`ap%`a!Q%`a!j%`a!n%`a#P%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#t%`a#u%`a#w%`a#y%`a#z%`a'x%`a(_%`a(p%`a!i%`a!W%`a'u%`at%`a!]%`a%h%`a!e%`a~P#LTO#i%baP%baR%ba[%baa%bap%ba!Q%ba!j%ba!n%ba#P%ba#l%ba#m%ba#n%ba#o%ba#p%ba#q%ba#r%ba#s%ba#t%ba#u%ba#w%ba#y%ba#z%ba'x%ba(_%ba(p%ba!i%ba!W%ba'u%bat%ba!]%ba%h%ba!e%ba~P#LvO#i%`aP%`aR%`a[%`aa%`ap%`a!Q%`a!Z%`a!j%`a!n%`a#P%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#t%`a#u%`a#w%`a#y%`a#z%`a'x%`a(_%`a(p%`a!i%`a!W%`a'u%`a#^%`at%`a!]%`a%h%`a!e%`a~P#.{O#i%baP%baR%ba[%baa%bap%ba!Q%ba!Z%ba!j%ba!n%ba#P%ba#l%ba#m%ba#n%ba#o%ba#p%ba#q%ba#r%ba#s%ba#t%ba#u%ba#w%ba#y%ba#z%ba'x%ba(_%ba(p%ba!i%ba!W%ba'u%ba#^%bat%ba!]%ba%h%ba!e%ba~P#.{O#i{aP{a[{aa{ap{a!j{a!n{a#P{a#l{a#m{a#n{a#o{a#p{a#q{a#r{a#s{a#t{a#u{a#w{a#y{a#z{a'x{a(_{a(p{a!i{a!W{a'u{at{a!]{a%h{a!e{a~P$&dO#i$raP$raR$ra[$raa$rap$ra!Q$ra!j$ra!n$ra#P$ra#l$ra#m$ra#n$ra#o$ra#p$ra#q$ra#r$ra#s$ra#t$ra#u$ra#w$ra#y$ra#z$ra'x$ra(_$ra(p$ra!i$ra!W$ra'u$rat$ra!]$ra%h$ra!e$ra~P$'`O#i$taP$taR$ta[$taa$tap$ta!Q$ta!j$ta!n$ta#P$ta#l$ta#m$ta#n$ta#o$ta#p$ta#q$ta#r$ta#s$ta#t$ta#u$ta#w$ta#y$ta#z$ta'x$ta(_$ta(p$ta!i$ta!W$ta'u$tat$ta!]$ta%h$ta!e$ta~P$(RO#i%SaP%SaR%Sa[%Saa%Sap%Sa!Q%Sa!Z%Sa!j%Sa!n%Sa#P%Sa#l%Sa#m%Sa#n%Sa#o%Sa#p%Sa#q%Sa#r%Sa#s%Sa#t%Sa#u%Sa#w%Sa#y%Sa#z%Sa'x%Sa(_%Sa(p%Sa!i%Sa!W%Sa'u%Sa#^%Sat%Sa!]%Sa%h%Sa!e%Sa~P#.{Oa#aq!Z#aq'x#aq'u#aq!W#aq!i#aqt#aq!]#aq%h#aq!e#aq~P!:TO!Y3dO!Z'WX!i'WX~P%[O!Z.oO!i(ia~O!Z.oO!i(ia~P!:TO!W3gO~O#}!la![!la~PKZO#}!ha!Z!ha![!ha~P#BPO#}!pa![!pa~P!<kO#}!ra![!ra~P!?ROg'ZX!Z'ZX~P!+rO!Z.zOg(na~OSfO!]3{O$c3|O~O![4QO~Ot4RO~P#.{Oa$lq!Z$lq'x$lq'u$lq!W$lq!i$lqt$lq!]$lq%h$lq!e$lq~P!:TO!W4TO~P!&iO!Q4UO~O!O)|O'w)}O(x%POl'ga(w'ga!Z'ga#^'ga~Og'ga#}'ga~P%+uO!O)|O'w)}Ol'ia(w'ia(x'ia!Z'ia#^'ia~Og'ia#}'ia~P%,hO(p$YO~P#.{O!WfX!W$yX!ZfX!Z$yX!e%QX#^fX~P!/qO(R<xO~P!1dO!Q%gO!Y4XO!]%hO(R%fO!Z'cX!i'cX~O!Z/kO!i(|a~O!Z/kO!e#vO!i(|a~O!Z/kO!e#vO(p'nO!i(|a~Og${i!Z${i#^${i#}${i~P!0uO!Y4aO!W'eX!Z'eX~P!3cO!Z/sO!W(}a~O!Z/sO!W(}a~P#.{OP]XR]X[]Xp]X!O]X!Q]X!W]X!Z]X!j]X!n]X#P]X#Q]X#^]X#ifX#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#w]X#y]X#z]X$P]X(_]X(p]X(w]X(x]X~O!e%XX#t%XX~P%0XO!e#vO#t4fO~Oh%VO!e#vO!j%dO~Oh%VOp4kO!j%dO(p'nO~Op4pO!e#vO(p'nO~Oq!nO!Q4qO(TTO(WUO(c!mO~O(w$}Ol%`i!O%`i'w%`i(x%`i!Z%`i#^%`i~Og%`i#}%`i~P%3xO(x%POl%bi!O%bi'w%bi(w%bi!Z%bi#^%bi~Og%bi#}%bi~P%4kOg(]i!Z(]i~P!0uO#^4wOg(]i!Z(]i~P!0uO!i4zO~Oa$nq!Z$nq'x$nq'u$nq!W$nq!i$nqt$nq!]$nq%h$nq!e$nq~P!:TO!W5QO~O!Z5RO!])OX~P#.{Oa]Xa$yX!]]X!]$yX%]]X'x]X'x$yX!Z]X!Z$yX~P!/qO%]5UOa%Za!]%Za'x%Za!Z%Za~OlmX!OmX'wmX(wmX(xmX~P%7nOn5VO(R#nO~Ob5]O%i5^O(R+nO(TTO(WUO!Z'rX!['rX~O!Z0}O![)Va~O[5bO~O`5cO~Oa%mO'x%mO~P#.{O!Z5kO#^5mO![)SX~O![5nO~Op5tOq!nO!Q*fO!`!yO!a!vO!b!vO!z;wO#R!pO#S!pO#T!pO#U!pO#V!pO#Y5sO#Z!zO(S!lO(TTO(WUO(c!mO(m!sO~O![5rO~P%:ROl5yO!]1gO%h5xO~Oh%VOl5yO!]1gO%h5xO~Ob6QO(R#nO(TTO(WUO!Z'qX!['qX~O!Z1rO![)Ta~O(TTO(WUO(c6SO~O`6WO~O#t6ZO&Y6[O~PMvO!i6]O~P%[Oa6_O~Oa6_O~P%[Ob2YO![6dO&h2XO~P`O!e6fO~O!e6hOh(hi!Z(hi![(hi!e(hi!j(hip(hi(p(hi~O!Z#fi![#fi~P#BPO#^6iO!Z#fi![#fi~O!Z!_i![!_i~P#BPOa%mO#^6rO'x%mO~Oa%mO!e#vO#^6rO'x%mO~O!Z(rq!i(rqa(rq'x(rq~P!:TO!Z(hO!i(qq~O!Q%gO!]%hO#h6yO(R%fO~O!]'^O%h6|O~Ol7QO!]'^O%h6|O~O#i'gaP'gaR'ga['gaa'gap'ga!Q'ga!j'ga!n'ga#P'ga#l'ga#m'ga#n'ga#o'ga#p'ga#q'ga#r'ga#s'ga#t'ga#u'ga#w'ga#y'ga#z'ga'x'ga(_'ga(p'ga!i'ga!W'ga'u'gat'ga!]'ga%h'ga!e'ga~P%+uO#i'iaP'iaR'ia['iaa'iap'ia!Q'ia!j'ia!n'ia#P'ia#l'ia#m'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#w'ia#y'ia#z'ia'x'ia(_'ia(p'ia!i'ia!W'ia'u'iat'ia!]'ia%h'ia!e'ia~P%,hO#i${iP${iR${i[${ia${ip${i!Q${i!Z${i!j${i!n${i#P${i#l${i#m${i#n${i#o${i#p${i#q${i#r${i#s${i#t${i#u${i#w${i#y${i#z${i'x${i(_${i(p${i!i${i!W${i'u${i#^${it${i!]${i%h${i!e${i~P#.{O#i%`iP%`iR%`i[%`ia%`ip%`i!Q%`i!j%`i!n%`i#P%`i#l%`i#m%`i#n%`i#o%`i#p%`i#q%`i#r%`i#s%`i#t%`i#u%`i#w%`i#y%`i#z%`i'x%`i(_%`i(p%`i!i%`i!W%`i'u%`it%`i!]%`i%h%`i!e%`i~P%3xO#i%biP%biR%bi[%bia%bip%bi!Q%bi!j%bi!n%bi#P%bi#l%bi#m%bi#n%bi#o%bi#p%bi#q%bi#r%bi#s%bi#t%bi#u%bi#w%bi#y%bi#z%bi'x%bi(_%bi(p%bi!i%bi!W%bi'u%bit%bi!]%bi%h%bi!e%bi~P%4kO!Z'Wa!i'Wa~P!:TO!Z.oO!i(ii~O#}#ai!Z#ai![#ai~P#BPOP$[OR#zO!O#yO!Q#{O!j#xO!n$[O(_VO[#kip#ki#P#ki#m#ki#n#ki#o#ki#p#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki#}#ki(p#ki(w#ki(x#ki!Z#ki![#ki~O#l#ki~P%MQO#l<PO~P%MQOP$[OR#zOp<]O!O#yO!Q#{O!j#xO!n$[O#l<PO#m<QO#n<QO#o<QO(_VO[#ki#P#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki#}#ki(p#ki(w#ki(x#ki!Z#ki![#ki~O#p#ki~P& YO#p<RO~P& YOP$[OR#zO[<_Op<]O!O#yO!Q#{O!j#xO!n$[O#P<SO#l<PO#m<QO#n<QO#o<QO#p<RO#q<SO#r<SO#s<^O#t<SO(_VO#w#ki#y#ki#z#ki#}#ki(p#ki(w#ki(x#ki!Z#ki![#ki~O#u#ki~P&#bOP$[OR#zO[<_Op<]O!O#yO!Q#{O!j#xO!n$[O#P<SO#l<PO#m<QO#n<QO#o<QO#p<RO#q<SO#r<SO#s<^O#t<SO#u<TO(_VO(x#}O#y#ki#z#ki#}#ki(p#ki(w#ki!Z#ki![#ki~O#w<VO~P&%cO#w#ki~P&%cO#u<TO~P&#bOP$[OR#zO[<_Op<]O!O#yO!Q#{O!j#xO!n$[O#P<SO#l<PO#m<QO#n<QO#o<QO#p<RO#q<SO#r<SO#s<^O#t<SO#u<TO#w<VO(_VO(w#|O(x#}O#z#ki#}#ki(p#ki!Z#ki![#ki~O#y#ki~P&'rO#y<XO~P&'rOa#{y!Z#{y'x#{y'u#{y!W#{y!i#{yt#{y!]#{y%h#{y!e#{y~P!:TO[#kip#ki#P#ki#p#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki#}#ki(p#ki!Z#ki![#ki~OP$[OR#zO!O#yO!Q#{O!j#xO!n$[O#l<PO#m<QO#n<QO#o<QO(_VO(w#ki(x#ki~P&*nOl=}O!O)|O'w)}O(w$}O(x%POP#kiR#ki!Q#ki!j#ki!n#ki#l#ki#m#ki#n#ki#o#ki(_#ki~P&*nO#Q$dOP(^XR(^X[(^Xl(^Xp(^X!O(^X!Q(^X!j(^X!n(^X#P(^X#l(^X#m(^X#n(^X#o(^X#p(^X#q(^X#r(^X#s(^X#t(^X#u(^X#w(^X#y(^X#z(^X#}(^X'w(^X(_(^X(p(^X(w(^X(x(^X!Z(^X![(^X~O#}$Oi!Z$Oi![$Oi~P#BPO#}!pi![!pi~P$*OOg'Za!Z'Za~P!0uO![7dO~O!Z'ba!['ba~P#BPO!W7eO~P#.{O!e#vO(p'nO!Z'ca!i'ca~O!Z/kO!i(|i~O!Z/kO!e#vO!i(|i~Og${q!Z${q#^${q#}${q~P!0uO!W'ea!Z'ea~P#.{O!e7lO~O!Z/sO!W(}i~P#.{O!Z/sO!W(}i~O!W7oO~Oh%VOp7tO!j%dO(p'nO~O!e#vO#t7vO~Op7yO!e#vO(p'nO~O!O)|O'w)}O(x%POl'ha(w'ha!Z'ha#^'ha~Og'ha#}'ha~P&3oO!O)|O'w)}Ol'ja(w'ja(x'ja!Z'ja#^'ja~Og'ja#}'ja~P&4bO!W7{O~Og$}q!Z$}q#^$}q#}$}q~P!0uOg(]q!Z(]q~P!0uO#^7|Og(]q!Z(]q~P!0uOa$ny!Z$ny'x$ny'u$ny!W$ny!i$nyt$ny!]$ny%h$ny!e$ny~P!:TO!e6hO~O!Z5RO!])Oa~O!]'^OP$SaR$Sa[$Sap$Sa!O$Sa!Q$Sa!Z$Sa!j$Sa!n$Sa#P$Sa#l$Sa#m$Sa#n$Sa#o$Sa#p$Sa#q$Sa#r$Sa#s$Sa#t$Sa#u$Sa#w$Sa#y$Sa#z$Sa(_$Sa(p$Sa(w$Sa(x$Sa~O%h6|O~P&7SO%]8QOa%Zi!]%Zi'x%Zi!Z%Zi~Oa#ay!Z#ay'x#ay'u#ay!W#ay!i#ayt#ay!]#ay%h#ay!e#ay~P!:TO[8SO~Ob8UO(R+nO(TTO(WUO~O!Z0}O![)Vi~O`8YO~O(c(zO!Z'nX!['nX~O!Z5kO![)Sa~O![8cO~P%:RO(m!sO~P$$oO#Y8dO~O!]1gO~O!]1gO%h8fO~Ol8iO!]1gO%h8fO~O[8nO!Z'qa!['qa~O!Z1rO![)Ti~O!i8rO~O!i8sO~O!i8vO~O!i8vO~P%[Oa8xO~O!e8yO~O!i8zO~O!Z(ui![(ui~P#BPOa%mO#^9SO'x%mO~O!Z(ry!i(rya(ry'x(ry~P!:TO!Z(hO!i(qy~O%h9VO~P&7SO!]'^O%h9VO~O#i${qP${qR${q[${qa${qp${q!Q${q!Z${q!j${q!n${q#P${q#l${q#m${q#n${q#o${q#p${q#q${q#r${q#s${q#t${q#u${q#w${q#y${q#z${q'x${q(_${q(p${q!i${q!W${q'u${q#^${qt${q!]${q%h${q!e${q~P#.{O#i'haP'haR'ha['haa'hap'ha!Q'ha!j'ha!n'ha#P'ha#l'ha#m'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#w'ha#y'ha#z'ha'x'ha(_'ha(p'ha!i'ha!W'ha'u'hat'ha!]'ha%h'ha!e'ha~P&3oO#i'jaP'jaR'ja['jaa'jap'ja!Q'ja!j'ja!n'ja#P'ja#l'ja#m'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#w'ja#y'ja#z'ja'x'ja(_'ja(p'ja!i'ja!W'ja'u'jat'ja!]'ja%h'ja!e'ja~P&4bO#i$}qP$}qR$}q[$}qa$}qp$}q!Q$}q!Z$}q!j$}q!n$}q#P$}q#l$}q#m$}q#n$}q#o$}q#p$}q#q$}q#r$}q#s$}q#t$}q#u$}q#w$}q#y$}q#z$}q'x$}q(_$}q(p$}q!i$}q!W$}q'u$}q#^$}qt$}q!]$}q%h$}q!e$}q~P#.{O!Z'Wi!i'Wi~P!:TO#}#aq!Z#aq![#aq~P#BPO(w$}OP%`aR%`a[%`ap%`a!Q%`a!j%`a!n%`a#P%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#t%`a#u%`a#w%`a#y%`a#z%`a#}%`a(_%`a(p%`a!Z%`a![%`a~Ol%`a!O%`a'w%`a(x%`a~P&HgO(x%POP%baR%ba[%bap%ba!Q%ba!j%ba!n%ba#P%ba#l%ba#m%ba#n%ba#o%ba#p%ba#q%ba#r%ba#s%ba#t%ba#u%ba#w%ba#y%ba#z%ba#}%ba(_%ba(p%ba!Z%ba![%ba~Ol%ba!O%ba'w%ba(w%ba~P&JnOl=}O!O)|O'w)}O(x%PO~P&HgOl=}O!O)|O'w)}O(w$}O~P&JnOR0cO!O0cO!Q0dO#Q$dOP{a[{al{ap{a!j{a!n{a#P{a#l{a#m{a#n{a#o{a#p{a#q{a#r{a#s{a#t{a#u{a#w{a#y{a#z{a#}{a'w{a(_{a(p{a(w{a(x{a!Z{a![{a~O!O)|O'w)}OP$raR$ra[$ral$rap$ra!Q$ra!j$ra!n$ra#P$ra#l$ra#m$ra#n$ra#o$ra#p$ra#q$ra#r$ra#s$ra#t$ra#u$ra#w$ra#y$ra#z$ra#}$ra(_$ra(p$ra(w$ra(x$ra!Z$ra![$ra~O!O)|O'w)}OP$taR$ta[$tal$tap$ta!Q$ta!j$ta!n$ta#P$ta#l$ta#m$ta#n$ta#o$ta#p$ta#q$ta#r$ta#s$ta#t$ta#u$ta#w$ta#y$ta#z$ta#}$ta(_$ta(p$ta(w$ta(x$ta!Z$ta![$ta~Ol=}O!O)|O'w)}O(w$}O(x%PO~OP%SaR%Sa[%Sap%Sa!Q%Sa!j%Sa!n%Sa#P%Sa#l%Sa#m%Sa#n%Sa#o%Sa#p%Sa#q%Sa#r%Sa#s%Sa#t%Sa#u%Sa#w%Sa#y%Sa#z%Sa#}%Sa(_%Sa(p%Sa!Z%Sa![%Sa~P'%sO#}$lq!Z$lq![$lq~P#BPO#}$nq!Z$nq![$nq~P#BPO![9dO~O#}9eO~P!0uO!e#vO!Z'ci!i'ci~O!e#vO(p'nO!Z'ci!i'ci~O!Z/kO!i(|q~O!W'ei!Z'ei~P#.{O!Z/sO!W(}q~Op9lO!e#vO(p'nO~O[9nO!W9mO~P#.{O!W9mO~O!e#vO#t9tO~Og(]y!Z(]y~P!0uO!Z'la!]'la~P#.{Oa%Zq!]%Zq'x%Zq!Z%Zq~P#.{O[9yO~O!Z0}O![)Vq~O#^9}O!Z'na!['na~O!Z5kO![)Si~P#BPO!Q:PO~O!]1gO%h:SO~O(TTO(WUO(c:XO~O!Z1rO![)Tq~O!i:[O~O!i:]O~O!i:^O~O!i:^O~P%[O#^:aO!Z#fy![#fy~O!Z#fy![#fy~P#BPO%h:fO~P&7SO!]'^O%h:fO~O#}#{y!Z#{y![#{y~P#BPOP${iR${i[${ip${i!Q${i!j${i!n${i#P${i#l${i#m${i#n${i#o${i#p${i#q${i#r${i#s${i#t${i#u${i#w${i#y${i#z${i#}${i(_${i(p${i!Z${i![${i~P'%sO!O)|O'w)}O(x%POP'gaR'ga['gal'gap'ga!Q'ga!j'ga!n'ga#P'ga#l'ga#m'ga#n'ga#o'ga#p'ga#q'ga#r'ga#s'ga#t'ga#u'ga#w'ga#y'ga#z'ga#}'ga(_'ga(p'ga(w'ga!Z'ga!['ga~O!O)|O'w)}OP'iaR'ia['ial'iap'ia!Q'ia!j'ia!n'ia#P'ia#l'ia#m'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#w'ia#y'ia#z'ia#}'ia(_'ia(p'ia(w'ia(x'ia!Z'ia!['ia~O(w$}OP%`iR%`i[%`il%`ip%`i!O%`i!Q%`i!j%`i!n%`i#P%`i#l%`i#m%`i#n%`i#o%`i#p%`i#q%`i#r%`i#s%`i#t%`i#u%`i#w%`i#y%`i#z%`i#}%`i'w%`i(_%`i(p%`i(x%`i!Z%`i![%`i~O(x%POP%biR%bi[%bil%bip%bi!O%bi!Q%bi!j%bi!n%bi#P%bi#l%bi#m%bi#n%bi#o%bi#p%bi#q%bi#r%bi#s%bi#t%bi#u%bi#w%bi#y%bi#z%bi#}%bi'w%bi(_%bi(p%bi(w%bi!Z%bi![%bi~O#}$ny!Z$ny![$ny~P#BPO#}#ay!Z#ay![#ay~P#BPO!e#vO!Z'cq!i'cq~O!Z/kO!i(|y~O!W'eq!Z'eq~P#.{Op:pO!e#vO(p'nO~O[:tO!W:sO~P#.{O!W:sO~Og(]!R!Z(]!R~P!0uOa%Zy!]%Zy'x%Zy!Z%Zy~P#.{O!Z0}O![)Vy~O!Z5kO![)Sq~O(R:zO~O!]1gO%h:}O~O!i;QO~O%h;VO~P&7SOP${qR${q[${qp${q!Q${q!j${q!n${q#P${q#l${q#m${q#n${q#o${q#p${q#q${q#r${q#s${q#t${q#u${q#w${q#y${q#z${q#}${q(_${q(p${q!Z${q![${q~P'%sO!O)|O'w)}O(x%POP'haR'ha['hal'hap'ha!Q'ha!j'ha!n'ha#P'ha#l'ha#m'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#w'ha#y'ha#z'ha#}'ha(_'ha(p'ha(w'ha!Z'ha!['ha~O!O)|O'w)}OP'jaR'ja['jal'jap'ja!Q'ja!j'ja!n'ja#P'ja#l'ja#m'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#w'ja#y'ja#z'ja#}'ja(_'ja(p'ja(w'ja(x'ja!Z'ja!['ja~OP$}qR$}q[$}qp$}q!Q$}q!j$}q!n$}q#P$}q#l$}q#m$}q#n$}q#o$}q#p$}q#q$}q#r$}q#s$}q#t$}q#u$}q#w$}q#y$}q#z$}q#}$}q(_$}q(p$}q!Z$}q![$}q~P'%sOg%d!Z!Z%d!Z#^%d!Z#}%d!Z~P!0uO!W;ZO~P#.{Op;[O!e#vO(p'nO~O[;^O!W;ZO~P#.{O!Z'nq!['nq~P#BPO!Z#f!Z![#f!Z~P#BPO#i%d!ZP%d!ZR%d!Z[%d!Za%d!Zp%d!Z!Q%d!Z!Z%d!Z!j%d!Z!n%d!Z#P%d!Z#l%d!Z#m%d!Z#n%d!Z#o%d!Z#p%d!Z#q%d!Z#r%d!Z#s%d!Z#t%d!Z#u%d!Z#w%d!Z#y%d!Z#z%d!Z'x%d!Z(_%d!Z(p%d!Z!i%d!Z!W%d!Z'u%d!Z#^%d!Zt%d!Z!]%d!Z%h%d!Z!e%d!Z~P#.{Op;fO!e#vO(p'nO~O!W;gO~P#.{Op;nO!e#vO(p'nO~O!W;oO~P#.{OP%d!ZR%d!Z[%d!Zp%d!Z!Q%d!Z!j%d!Z!n%d!Z#P%d!Z#l%d!Z#m%d!Z#n%d!Z#o%d!Z#p%d!Z#q%d!Z#r%d!Z#s%d!Z#t%d!Z#u%d!Z#w%d!Z#y%d!Z#z%d!Z#}%d!Z(_%d!Z(p%d!Z!Z%d!Z![%d!Z~P'%sOp;rO!e#vO(p'nO~Ot(dX~P1qO!O%qO~P!(yO(S!lO~P!(yO!WfX!ZfX#^fX~P%0XOP]XR]X[]Xp]X!O]X!Q]X!Z]X!ZfX!j]X!n]X#P]X#Q]X#^]X#^fX#ifX#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#w]X#y]X#z]X$P]X(_]X(p]X(w]X(x]X~O!efX!i]X!ifX(pfX~P'JlOP;vOQ;vOSfOd=rOe!iOnkOp;vOqkOrkOxkOz;vO|;vO!QWO!UkO!VkO!]XO!g;yO!jZO!m;vO!n;vO!o;vO!q;zO!s;}O!v!hO$V!kO$m=pO(R)ZO(TTO(WUO(_VO(m[O~O!Z<ZO![$pa~Oh%VOn%WOp%XOq$tOr$tOx%YOz%ZO|<fO!Q${O!]$|O!g=wO!j$xO#h<lO$V%_O$s<hO$u<jO$x%`O(R(tO(TTO(WUO(_$uO(w$}O(x%PO~Oj)bO~P( bOp!cX(p!cX~P# qOp(hX(p(hX~P#!dO![]X![fX~P'JlO!WfX!W$yX!ZfX!Z$yX#^fX~P!/qO#i<OO~O!e#vO#i<OO~O#^<`O~O#t<SO~O#^<pO!Z(uX![(uX~O#^<`O!Z(sX![(sX~O#i<qO~Og<sO~P!0uO#i<yO~O#i<zO~O!e#vO#i<{O~O!e#vO#i<qO~O#}<|O~P#BPO#i<}O~O#i=OO~O#i=TO~O#i=UO~O#i=VO~O#i=WO~O#}=XO~P!0uO#}=YO~P!0uO#Q#R#S#U#V#Y#g#h#s$m$s$u$x%[%]%g%h%i%p%r%u%v%x%z~'|T#m!V'z(S#nq#l#op!O'{$['{(R$^(c~",goto:"$8f)ZPPPPPP)[PP)_P)pP+Q/VPPPP6aPP6wPP<oP@cP@yP@yPPP@yPCRP@yP@yP@yPCVPC[PCyPHsPPPHwPPPPHwKzPPPLQLrPHwPHwPP! QHwPPPHwPHwP!#XHwP!&o!'t!'}P!(q!(u!(q!,SPPPPPPP!,s!'tPP!-T!.uP!2RHwHw!2W!5d!:Q!:Q!>PPPP!>XHwPPPPPPPPPP!AhP!BuPPHw!DWPHwPHwHwHwHwHwPHw!EjP!HtP!KzP!LO!LY!L^!L^P!HqP!Lb!LbP# hP# lHwPHw# r#$wCV@yP@yP@y@yP#&U@y@y#(h@y#+`@y#-l@y@y#.[#0p#0p#0u#1O#0p#1ZPP#0pP@y#1s@y#5r@y@y6aPPP#9wPPP#:b#:bP#:bP#:x#:bPP#;OP#:uP#:u#;c#:u#;}#<T#<W)_#<Z)_P#<b#<b#<bP)_P)_P)_P)_PP)_P#<h#<kP#<k)_P#<oP#<rP)_P)_P)_P)_P)_P)_)_PP#<x#=O#=Z#=a#=g#=m#=s#>R#>X#>c#>i#>s#>y#?Z#?a#@R#@e#@k#@q#AP#Af#CZ#Ci#Cp#E[#Ej#G[#Gj#Gp#Gv#G|#HW#H^#Hd#Hn#IQ#IWPPPPPPPPPPP#I^PPPPPPP#JR#MY#Nr#Ny$ RPPP$&mP$&v$)o$0Y$0]$0`$1_$1b$1i$1qP$1w$1zP$2h$2l$3d$4r$4w$5_PP$5d$5j$5n$5q$5u$5y$6u$7^$7u$7y$7|$8P$8V$8Y$8^$8bR!|RoqOXst!Z#d%l&p&r&s&u,n,s2S2VY!vQ'^-`1g5qQ%svQ%{yQ&S|Q&h!VS'U!e-WQ'd!iS'j!r!yU*h$|*X*lQ+l%|Q+y&UQ,_&bQ-^']Q-h'eQ-p'kQ0U*nQ1q,`R<m;z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9SS#q];w!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU*{%[<e<fQ+q&OQ,a&eQ,h&mQ0r+dQ0u+fQ1S+rQ1y,fQ3W.bQ5V0wQ5]0}Q6Q1rQ7O3[Q8U5^R9Y7Q'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s!S!nQ!r!v!y!z$|'U']'^'j'k'l*h*l*n*o-W-^-`-p0U0X1g5q5s%[$ti#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q&V|Q'S!eS'Y%h-ZQ+q&OQ,a&eQ0f+OQ1S+rQ1X+xQ1x,eQ1y,fQ5]0}Q5f1ZQ6Q1rQ6T1tQ6U1wQ8U5^Q8X5cQ8q6WQ9|8YQ:Y8nR<o*XrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR,c&i&z^OPXYstuvwz!Z!`!g!j!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=r=s[#]WZ#W#Z'V(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ%vxQ%zyS&P|&UQ&]!TQ'a!hQ'c!iQ(o#sS+k%{%|Q+o&OQ,Y&`Q,^&bS-g'd'eQ.d(pQ0{+lQ1R+rQ1T+sQ1W+wQ1l,ZS1p,_,`Q2t-hQ5[0}Q5`1QQ5e1YQ6P1qQ8T5^Q8W5bQ9x8SR:w9y!U$zi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y!^%xy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pQ+e%vQ,O&YQ,R&ZQ,]&bQ.c(oQ1k,YU1o,^,_,`Q3].dQ5z1lS6O1p1qQ8m6P#f=t#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o=u<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YW%Ti%V*v=pS&Y!Q&gQ&Z!RQ&[!SQ+S%cR+|&W%]%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}T)x$u)yV*{%[<e<fW'Y!e%h*X-ZS({#y#zQ+`%qQ+v&RS.](k(lQ1b,SQ4x0cR8^5k'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s$i$^c#Y#e%p%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.w.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gT#TV#U'RkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ'W!eR2i-W!W!nQ!e!r!v!y!z$|'U']'^'j'k'l*X*h*l*n*o-W-^-`-p0U0X1g5q5sR1d,UnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&w!^Q't!xS(q#u<OQ+i%yQ,W&]Q,X&_Q-e'bQ-r'mS.m(v<qS0k+U<{Q0y+jQ1f,VQ2Z,uQ2],vQ2e-RQ2r-fQ2u-jS5P0l=VQ5W0zS5Z0|=WQ6j2gQ6n2sQ6s2zQ8R5XQ8}6lQ9O6oQ9R6tR:`8z$d$]c#Y#e%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gS(m#p'gQ(}#zS+_%p.wS.^(l(nR3U._'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS#q];wQ&r!XQ&s!YQ&u![Q&v!]R2R,qQ'_!hQ+b%vQ-c'aS.`(o+eQ2p-bW3Y.c.d0q0sQ6m2qW6z3V3X3]5TU9U6{6}7PU:e9W9X9ZS;T:d:gQ;b;UR;j;cU!wQ'^-`T5o1g5q!Q_OXZ`st!V!Z#d#h%d%l&g&i&p&r&s&u(h,n,s.V2S2V]!pQ!r'^-`1g5qT#q];w%^{OPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS({#y#zS.](k(l!s=^$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU$fd)],hS(n#p'gU*s%R(u3vU0e*z.i7]Q5T0rQ6{3WQ9X7OR:g9Ym!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sQ'r!uS(d#g1|S-n'i'uQ/n*ZQ/{*gQ2|-qQ4]/oQ4i/}Q4j0OQ4o0WQ7h4WS7s4k4mS7w4p4rQ9g7iQ9k7oQ9p7tQ9u7yS:o9l9mS;Y:p:sS;e;Z;[S;m;f;gS;q;n;oR;t;rQ#wbQ'q!uS(c#g1|S(e#m+TQ+V%eQ+g%wQ+m%}U-m'i'r'uQ.R(dQ/m*ZQ/|*gQ0P*iQ0x+hQ1m,[S2y-n-qQ3R.ZS4[/n/oQ4e/yS4h/{0WQ4l0QQ5|1nQ6u2|Q7g4WQ7k4]U7r4i4o4rQ7u4nQ8k5}S9f7h7iQ9j7oQ9r7wQ9s7xQ:V8lQ:m9gS:n9k9mQ:v9uQ;P:WS;X:o:sS;d;Y;ZS;l;e;gS;p;m;oQ;s;qQ;u;tQ=a=[Q=l=eR=m=fV!wQ'^-`%^aOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS#wz!j!r=Z$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=a=r%^bOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SQ%ej!^%wy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pS%}z!jQ+h%xQ,[&bW1n,],^,_,`U5}1o1p1qS8l6O6PQ:W8m!r=[$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ=e=qR=f=r%QeOPXYstuvw!Z!`!g!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SY#bWZ#W#Z(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ,i&m!p=]$Z$n)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=`'VU'Z!e%h*XR2k-Z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9S!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ,h&mQ0r+dQ3W.bQ7O3[R9Y7Q!b$Tc#Y%p(Q(W(r(w)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!P<U)[)o-U.w2c2f3h3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!f$Vc#Y%p(Q(W(r(w)U)V)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!T<W)[)o-U.w2c2f3h3n3o3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!^$Zc#Y%p(Q(W(r(w)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;xQ4V/fz=s)[)o-U.w2c2f3h3w4P6k7W7a7b8`8|9[9b9c:y;R=gQ=x=zR=y={'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS$oh$pR3|/P'XgOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$kf$qQ$ifS)h$l)lR)t$qT$jf$qT)j$l)l'XhOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$oh$pQ$rhR)s$p%^jOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9S!s=q$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s#glOPXZst!Z!`!o#S#d#o#{$n%l&i&l&m&p&r&s&u&y'R'`(|)q*f+Y+d,k,n,s-d.b/Q/i0V0d1j1z1{1}2P2S2V2X3[3{4q5y6Z6[6_7Q8i8x!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}Q+P%`Q/^)|o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!U$yi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yQ*`$zU*i$|*X*lQ+Q%aQ0Q*j#f=c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n=d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YQ=h=tQ=i=uQ=j=vR=k=w!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YnoOXst!Z#d%l&p&r&s&u,n,s2S2VS*c${*WQ,|&|Q,}'OR4`/s%[%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q,P&ZQ1`,RQ5i1_R8]5jV*k$|*X*lU*k$|*X*lT5p1g5qS/y*f/iQ4n0VT7x4q:PQ+g%wQ0P*iQ0x+hQ1m,[Q5|1nQ8k5}Q:V8lR;P:W!U%Oi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yx*P$v)c*Q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=oS0Y*q0Z#f<a#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<b<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!d<t(s)a*Y*b.e.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={`<u3u7X7[7`9]:h:k;kS=P.g3aT=Q7Z9`!U%Qi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y|*R$v)c*S*q+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=oS0[*r0]#f<c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!h<v(s)a*Y*b.f.g.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={d<w3u7Y7Z7`9]9^:h:i:k;kS=R.h3bT=S7[9arnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ&d!UR,k&mrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR&d!UQ,T&[R1[+|snOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ1h,YS5w1k1lU8e5u5v5zS:R8g8hS:{:Q:TQ;_:|R;i;`Q&k!VR,d&gR6T1tR:Y8nS&P|&UR1T+sQ&p!WR,n&qR,t&vT2T,s2VR,x&wQ,w&wR2^,xQ'w!{R-t'wSsOtQ#dXT%os#dQ#OTR'y#OQ#RUR'{#RQ)y$uR/Z)yQ#UVR(O#UQ#XWU(U#X(V-{Q(V#YR-{(WQ-X'WR2j-XQ.p(wS3e.p3fR3f.qQ-`'^R2n-`Y!rQ'^-`1g5qR'h!rQ.{)cR3z.{U#_W%g*WU(]#_(^-|Q(^#`R-|(XQ-['ZR2l-[t`OXst!V!Z#d%l&g&i&p&r&s&u,n,s2S2VS#hZ%dU#r`#h.VR.V(hQ(i#jQ.S(eW.[(i.S3P6wQ3P.TR6w3QQ)l$lR/R)lQ$phR)r$pQ$`cU)_$`-w<[Q-w;xR<[)oQ/l*ZW4Y/l4Z7j9hU4Z/m/n/oS7j4[4]R9h7k$e*O$v(s)a)c*Y*b*q*r*|*}+R.g.h.j.k.l/Y/b/d/f/q/v0^0_0p1]3^3_3`3u3y4S4^4_4c4s4u4{4|4}5h7R7S7T7U7Z7[7^7_7`7f7m7p7z7}8P9]9^9_9i9q9v9w:h:i:j:k:l:q:u;W;];h;k=b=n=o=z={Q/t*bU4b/t4d7nQ4d/vR7n4cS*l$|*XR0S*lx*Q$v)c*q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=o!d.e(s)a*Y*b.g.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/c*Q.e7Xa7X3u7Z7[7`9]:h:k;kQ0Z*qQ3a.gU4t0Z3a9`R9`7Z|*S$v)c*q*r+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=o!h.f(s)a*Y*b.g.h.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/e*S.f7Ye7Y3u7Z7[7`9]9^:h:i:k;kQ0]*rQ3b.hU4v0]3b9aR9a7[Q*w%UR0a*wQ5S0pR8O5SQ+[%jR0o+[Q5l1bS8_5l:OR:O8`Q,V&]R1e,VQ5q1gR8b5qQ1s,aS6R1s8oR8o6TQ1O+oW5_1O5a8V9zQ5a1RQ8V5`R9z8WQ+t&PR1U+tQ2V,sR6c2VYrOXst#dQ&t!ZQ+^%lQ,m&pQ,o&rQ,p&sQ,r&uQ2Q,nS2T,s2VR6b2SQ%npQ&x!_Q&{!aQ&}!bQ'P!cQ'o!uQ+]%kQ+i%yQ+{&VQ,c&kQ,z&zW-k'i'q'r'uQ-r'mQ0R*kQ0y+jS1v,d,gQ2_,yQ2`,|Q2a,}Q2u-jW2w-m-n-q-sQ5W0zQ5d1XQ5g1]Q5{1mQ6V1xQ6a2RU6p2v2y2|Q6s2zQ8R5XQ8Z5fQ8[5hQ8a5pQ8j5|Q8p6US9P6q6uQ9R6tQ9{8XQ:U8kQ:Z8qQ:b9QQ:x9|Q;O:VQ;S:cR;a;PQ%yyQ'b!iQ'm!uU+j%z%{%|Q-R'TU-f'c'd'eS-j'i'sQ/z*gS0z+k+lQ2g-TS2s-g-hQ2z-oS4g/{0OQ5X0{Q6l2mQ6o2tQ6t2{U7q4i4j4mQ9o7sR:r9pS$wi=pR*x%VU%Ui%V=pR0`*vQ$viS(s#v+fS)a$b$cQ)c$dQ*Y$xS*b${*WQ*q%OQ*r%QQ*|%]Q*}%^Q+R%bQ.g<aQ.h<cQ.j<gQ.k<iQ.l<kQ/Y)wQ/b*PQ/d*RQ/f*TQ/q*^S/v*d/hQ0^*tQ0_*ul0p+c,Q.a1a1i3Z5x6|8f9V:S:f:};VQ1]+}Q3^<tQ3_<vQ3`<yS3u<^<_Q3y.zS4S/_4UQ4^/rQ4_/sQ4c/uQ4s0YQ4u0[Q4{0gQ4|0hQ4}0iQ5h1^Q7R<}Q7S=PQ7T=RQ7U=TQ7Z<bQ7[<dQ7^<hQ7_<jQ7`<lQ7f4VQ7m4aQ7p4fQ7z4wQ7}5RQ8P5UQ9]<zQ9^<uQ9_<wQ9i7lQ9q7vQ9v7|Q9w8QQ:h=OQ:i=QQ:j=SQ:k=UQ:l9eQ:q9nQ:u9tQ;W=XQ;]:tQ;h;^Q;k=YQ=b=pQ=n=xQ=o=yQ=z=|R={=}Q*z%[Q.i<eR7]<fnpOXst!Z#d%l&p&r&s&u,n,s2S2VQ!fPS#fZ#oQ&z!`W'f!o*f0V4qQ'}#SQ)O#{Q)p$nS,g&i&lQ,l&mQ,y&yS-O'R/iQ-b'`Q.s(|Q/V)qQ0m+YQ0s+dQ2O,kQ2q-dQ3X.bQ4O/QQ4y0dQ5v1jQ6X1zQ6Y1{Q6^1}Q6`2PQ6e2XQ7P3[Q7c3{Q8h5yQ8t6ZQ8u6[Q8w6_Q9Z7QQ:T8iR:_8x#[cOPXZst!Z!`!o#d#o#{%l&i&l&m&p&r&s&u&y'R'`(|*f+Y+d,k,n,s-d.b/i0V0d1j1z1{1}2P2S2V2X3[4q5y6Z6[6_7Q8i8xQ#YWQ#eYQ%puQ%rvS%tw!gS(Q#W(TQ(W#ZQ(r#uQ(w#xQ)P$OQ)Q$PQ)R$QQ)S$RQ)T$SQ)U$TQ)V$UQ)W$VQ)X$WQ)Y$XQ)[$ZQ)^$_Q)`$aQ)e$eW)o$n)q/Q3{Q+a%sQ+u&QS-U'V2hQ-s'pS-x(R-zQ-}(ZQ.P(bQ.n(vQ.q(xQ.u;vQ.w;yQ.x;zQ.y;}Q/]){Q0j+UQ2c-PQ2f-SQ2v-lQ2}.QQ3c.oQ3h<OQ3i<PQ3j<QQ3k<RQ3l<SQ3m<TQ3n<UQ3o<VQ3p<WQ3q<XQ3r<YQ3s.vQ3t<]Q3w<`Q3x<mQ4P<ZQ5O0lQ5Y0|Q6k<pQ6q2xQ6v3OQ7V3dQ7W<qQ7a<sQ7b<{Q8`5mQ8|6iQ9Q6rQ9[<|Q9b=VQ9c=WQ:c9SQ:y9}Q;R:aQ;x#SR=g=sR#[WR'X!el!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sS'T!e-WU*g$|*X*lS-T'U']S0O*h*nQ0W*oQ2m-^Q4m0UR4r0XR(y#xQ!fQT-_'^-`]!qQ!r'^-`1g5qQ#p]R'g;wR)d$dY!uQ'^-`1g5qQ'i!rS's!v!yS'u!z5sS-o'j'kQ-q'lR2{-pT#kZ%dS#jZ%dS%jm,jU(e#h#i#lS.T(f(gQ.X(hQ0n+ZQ3Q.UU3R.V.W.YS6x3S3TR9T6yd#^W#W#Z%g(R([*W+W.O/hr#gZm#h#i#l%d(f(g(h+Z.U.V.W.Y3S3T6yS*Z$x*_Q/o*[Q1|,jQ2d-QQ4W/kQ6g2[Q7i4XQ8{6hT=_'V+XV#aW%g*WU#`W%g*WS(S#W([U(X#Z+W/hS-V'V+XT-y(R.OV'[!e%h*XQ$lfR)v$qT)k$l)lR3}/PT*]$x*_T*e${*WQ0q+cQ1_,QQ3V.aQ5j1aQ5u1iQ6}3ZQ8g5xQ9W6|Q:Q8fQ:d9VQ:|:SQ;U:fQ;`:}R;c;VnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&j!VR,c&gtmOXst!U!V!Z#d%l&g&p&r&s&u,n,s2S2VR,j&mT%km,jR1c,SR,b&eQ&T|R+z&UR+p&OT&n!W&qT&o!W&qT2U,s2V",nodeNames:"⚠ ArithOp ArithOp ?. JSXStartTag LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > < TypeParamList const TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewTarget new NewExpression ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression TypeArgList CompareOp < declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies in CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression InstantiationExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast < ArrowFunction TypeParamList SequenceExpression InstantiationExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate asserts is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem",maxTerm:378,context:s,nodeProps:[["isolate",-8,5,6,14,35,37,49,51,53,""],["group",-26,9,17,19,66,206,210,214,215,217,220,223,233,235,241,243,245,247,250,256,262,264,266,268,270,272,273,"Statement",-34,13,14,30,33,34,40,49,52,53,55,60,68,70,74,78,80,82,83,108,109,118,119,135,138,140,141,142,143,144,146,147,166,168,170,"Expression",-23,29,31,35,39,41,43,172,174,176,177,179,180,181,183,184,185,187,188,189,200,202,204,205,"Type",-3,86,101,107,"ClassItem"],["openedBy",23,"<",36,"InterpolationStart",54,"[",58,"{",71,"(",159,"JSXStartCloseTag"],["closedBy",-2,24,167,">",38,"InterpolationEnd",48,"]",59,"}",72,")",164,"JSXEndTag"]],propSources:[f],skippedNodes:[0,5,6,276],repeatNodeCount:37,tokenData:"$Fq07[R!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#:O!R![#<_![!]#I_!]!^#Jk!^!_#Ku!_!`$![!`!a$$v!a!b$*T!b!c$,r!c!}Er!}#O$-|#O#P$/W#P#Q$4o#Q#R$5y#R#SEr#S#T$7W#T#o$8b#o#p$<r#p#q$=h#q#r$>x#r#s$@U#s$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$I|Er$I|$I}$Dk$I}$JO$Dk$JO$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr(n%d_$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$h&j(X!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU(X!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$h&j(UpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU(UpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX(Up(X!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z07[+rq$h&j(Up(X!b'z0/lOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z07[.ST(V#S$h&j'{0/lO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c07[.n_$h&j(Up(X!b'{0/lOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)3p/x`$h&j!n),Q(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW1V`#u(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW2d_#u(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At3l_(T':f$h&j(X!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k(^4r_$h&j(X!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k&z5vX$h&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q&z6jT$c`$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c`6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y`7bO$c``7eP;=`<%l6y&z7kP;=`<%l5q(^7w]$c`$h&j(X!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!r8uZ(X!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p!r9oU$c`(X!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!r:UP;=`<%l8p(^:[P;=`<%l4k%9[:hh$h&j(Up(X!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__WS$h&j(Up(X!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]WS$h&j(X!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXWS$h&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSWSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWWS(X!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]WS$h&j(UpOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWWS(UpOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYWS(Up(X!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S%9[C}i$h&j(m%1l(Up(X!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr%9[EoP;=`<%lCr07[FRk$h&j(Up(X!b$[#t(R,2j(c$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$h&j(Up(X!b$[#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv07[JPP;=`<%lEr(KWJ_`$h&j(Up(X!b#n(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWKl_$h&j$P(Ch(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,#xLva(x+JY$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWNW`$h&j#y(Ch(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At! c_(W';W$h&j(UpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b'l!!i_$h&j(UpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b&z!#mX$h&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h`!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y`!$oP;=`<%l!$Y&z!$uP;=`<%l!#h'l!%R]$c`$h&j(UpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r!Q!&PZ(UpOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z!Q!&yU$c`(UpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r!Q!'`P;=`<%l!%z'l!'fP;=`<%l!!b/5|!'t_!j/.^$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&U!)O_!i!Lf$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!n!*[b$h&j(Up(X!b(S%&f#o(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW!+o`$h&j(Up(X!b#l(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;x!,|`$h&j(Up(X!bp+4YOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,$U!.Z_!Z+Jf$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!/ec$h&j(Up(X!b!O.2^OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!0ya$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!2Z_!Y!L^$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!3eg$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!5Vg$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!6wc$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!8_c$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!9uf$h&j(Up(X!b#m(ChOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcxz!;Zz{#-}{!P!;Z!P!Q#/d!Q!^!;Z!^!_#(i!_!`#7S!`!a#8i!a!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z?O!;fb$h&j(Up(X!b!V7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z>^!<w`$h&j(X!b!V7`OY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eq!Q!^!<n!^!_!Gr!_!}!<n!}#O!KS#O#P!Dy#P#o!<n#o#p!Gr#p;'S!<n;'S;=`!L]<%lO!<n<z!>Q^$h&j!V7`OY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@c!_!}!=y!}#O!CW#O#P!Dy#P#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!?Td$h&j!V7`O!^&c!_#W&c#W#X!>|#X#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#k!>|#k#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&c7`!@hX!V7`OY!@cZ!P!@c!P!Q!AT!Q!}!@c!}#O!Ar#O#P!Bq#P;'S!@c;'S;=`!CQ<%lO!@c7`!AYW!V7`#W#X!AT#Z#[!AT#]#^!AT#a#b!AT#g#h!AT#i#j!AT#j#k!AT#m#n!AT7`!AuVOY!ArZ#O!Ar#O#P!B[#P#Q!@c#Q;'S!Ar;'S;=`!Bk<%lO!Ar7`!B_SOY!ArZ;'S!Ar;'S;=`!Bk<%lO!Ar7`!BnP;=`<%l!Ar7`!BtSOY!@cZ;'S!@c;'S;=`!CQ<%lO!@c7`!CTP;=`<%l!@c<z!C][$h&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#O!CW#O#P!DR#P#Q!=y#Q#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DWX$h&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DvP;=`<%l!CW<z!EOX$h&jOY!=yYZ&cZ!^!=y!^!_!@c!_#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!EnP;=`<%l!=y>^!Ezl$h&j(X!b!V7`OY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#W&}#W#X!Eq#X#Z&}#Z#[!Eq#[#]&}#]#^!Eq#^#a&}#a#b!Eq#b#g&}#g#h!Eq#h#i&}#i#j!Eq#j#k!Eq#k#m&}#m#n!Eq#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}8r!GyZ(X!b!V7`OY!GrZw!Grwx!@cx!P!Gr!P!Q!Hl!Q!}!Gr!}#O!JU#O#P!Bq#P;'S!Gr;'S;=`!J|<%lO!Gr8r!Hse(X!b!V7`OY'}Zw'}x#O'}#P#W'}#W#X!Hl#X#Z'}#Z#[!Hl#[#]'}#]#^!Hl#^#a'}#a#b!Hl#b#g'}#g#h!Hl#h#i'}#i#j!Hl#j#k!Hl#k#m'}#m#n!Hl#n;'S'};'S;=`(f<%lO'}8r!JZX(X!bOY!JUZw!JUwx!Arx#O!JU#O#P!B[#P#Q!Gr#Q;'S!JU;'S;=`!Jv<%lO!JU8r!JyP;=`<%l!JU8r!KPP;=`<%l!Gr>^!KZ^$h&j(X!bOY!KSYZ&cZw!KSwx!CWx!^!KS!^!_!JU!_#O!KS#O#P!DR#P#Q!<n#Q#o!KS#o#p!JU#p;'S!KS;'S;=`!LV<%lO!KS>^!LYP;=`<%l!KS>^!L`P;=`<%l!<n=l!Ll`$h&j(Up!V7`OY!LcYZ&cZr!Lcrs!=ys!P!Lc!P!Q!Mn!Q!^!Lc!^!_# o!_!}!Lc!}#O#%P#O#P!Dy#P#o!Lc#o#p# o#p;'S!Lc;'S;=`#&Y<%lO!Lc=l!Mwl$h&j(Up!V7`OY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#W(r#W#X!Mn#X#Z(r#Z#[!Mn#[#](r#]#^!Mn#^#a(r#a#b!Mn#b#g(r#g#h!Mn#h#i(r#i#j!Mn#j#k!Mn#k#m(r#m#n!Mn#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r8Q# vZ(Up!V7`OY# oZr# ors!@cs!P# o!P!Q#!i!Q!}# o!}#O#$R#O#P!Bq#P;'S# o;'S;=`#$y<%lO# o8Q#!pe(Up!V7`OY)rZr)rs#O)r#P#W)r#W#X#!i#X#Z)r#Z#[#!i#[#])r#]#^#!i#^#a)r#a#b#!i#b#g)r#g#h#!i#h#i)r#i#j#!i#j#k#!i#k#m)r#m#n#!i#n;'S)r;'S;=`*Z<%lO)r8Q#$WX(UpOY#$RZr#$Rrs!Ars#O#$R#O#P!B[#P#Q# o#Q;'S#$R;'S;=`#$s<%lO#$R8Q#$vP;=`<%l#$R8Q#$|P;=`<%l# o=l#%W^$h&j(UpOY#%PYZ&cZr#%Prs!CWs!^#%P!^!_#$R!_#O#%P#O#P!DR#P#Q!Lc#Q#o#%P#o#p#$R#p;'S#%P;'S;=`#&S<%lO#%P=l#&VP;=`<%l#%P=l#&]P;=`<%l!Lc?O#&kn$h&j(Up(X!b!V7`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#W%Z#W#X#&`#X#Z%Z#Z#[#&`#[#]%Z#]#^#&`#^#a%Z#a#b#&`#b#g%Z#g#h#&`#h#i%Z#i#j#&`#j#k#&`#k#m%Z#m#n#&`#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z9d#(r](Up(X!b!V7`OY#(iZr#(irs!Grsw#(iwx# ox!P#(i!P!Q#)k!Q!}#(i!}#O#+`#O#P!Bq#P;'S#(i;'S;=`#,`<%lO#(i9d#)th(Up(X!b!V7`OY*gZr*grs'}sw*gwx)rx#O*g#P#W*g#W#X#)k#X#Z*g#Z#[#)k#[#]*g#]#^#)k#^#a*g#a#b#)k#b#g*g#g#h#)k#h#i*g#i#j#)k#j#k#)k#k#m*g#m#n#)k#n;'S*g;'S;=`+Z<%lO*g9d#+gZ(Up(X!bOY#+`Zr#+`rs!JUsw#+`wx#$Rx#O#+`#O#P!B[#P#Q#(i#Q;'S#+`;'S;=`#,Y<%lO#+`9d#,]P;=`<%l#+`9d#,cP;=`<%l#(i?O#,o`$h&j(Up(X!bOY#,fYZ&cZr#,frs!KSsw#,fwx#%Px!^#,f!^!_#+`!_#O#,f#O#P!DR#P#Q!;Z#Q#o#,f#o#p#+`#p;'S#,f;'S;=`#-q<%lO#,f?O#-tP;=`<%l#,f?O#-zP;=`<%l!;Z07[#.[b$h&j(Up(X!b'|0/l!V7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z07[#/o_$h&j(Up(X!bT0/lOY#/dYZ&cZr#/drs#0nsw#/dwx#4Ox!^#/d!^!_#5}!_#O#/d#O#P#1p#P#o#/d#o#p#5}#p;'S#/d;'S;=`#6|<%lO#/d06j#0w]$h&j(X!bT0/lOY#0nYZ&cZw#0nwx#1px!^#0n!^!_#3R!_#O#0n#O#P#1p#P#o#0n#o#p#3R#p;'S#0n;'S;=`#3x<%lO#0n05W#1wX$h&jT0/lOY#1pYZ&cZ!^#1p!^!_#2d!_#o#1p#o#p#2d#p;'S#1p;'S;=`#2{<%lO#1p0/l#2iST0/lOY#2dZ;'S#2d;'S;=`#2u<%lO#2d0/l#2xP;=`<%l#2d05W#3OP;=`<%l#1p01O#3YW(X!bT0/lOY#3RZw#3Rwx#2dx#O#3R#O#P#2d#P;'S#3R;'S;=`#3r<%lO#3R01O#3uP;=`<%l#3R06j#3{P;=`<%l#0n05x#4X]$h&j(UpT0/lOY#4OYZ&cZr#4Ors#1ps!^#4O!^!_#5Q!_#O#4O#O#P#1p#P#o#4O#o#p#5Q#p;'S#4O;'S;=`#5w<%lO#4O00^#5XW(UpT0/lOY#5QZr#5Qrs#2ds#O#5Q#O#P#2d#P;'S#5Q;'S;=`#5q<%lO#5Q00^#5tP;=`<%l#5Q05x#5zP;=`<%l#4O01p#6WY(Up(X!bT0/lOY#5}Zr#5}rs#3Rsw#5}wx#5Qx#O#5}#O#P#2d#P;'S#5};'S;=`#6v<%lO#5}01p#6yP;=`<%l#5}07[#7PP;=`<%l#/d)3h#7ab$h&j$P(Ch(Up(X!b!V7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;ZAt#8vb$Y#t$h&j(Up(X!b!V7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z'Ad#:Zp$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#U%Z#U#V#?i#V#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#d#Bq#d#l%Z#l#m#Es#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#<jk$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#>j_$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#?rd$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#A]f$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Bzc$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Dbe$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#E|g$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Gpi$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x#Il_!e$b$h&j#})Lv(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#Jv_al$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f#LS^h#)`#P-<U(Up(X!b$m7`OY*gZr*grs'}sw*gwx)rx!P*g!P!Q#MO!Q!^*g!^!_#Mt!_!`$ f!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#MXX$j&j(Up(X!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El#M}Z#p(Ch(Up(X!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#Np!`#O*g#P;'S*g;'S;=`+Z<%lO*g(El#NyX$P(Ch(Up(X!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El$ oX#q(Ch(Up(X!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g*)x$!ga#^*!Y$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$#l!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(K[$#w_#i(Cl$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x$%Vag!*r#q(Ch$e#|$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$&[!`!a$'f!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$&g_#q(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$'qa#p(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$(v!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$)R`#p(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(Kd$*`a(p(Ct$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!a%Z!a!b$+e!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$+p`$h&j#z(Ch(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`$,}_!z$Ip$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f$.X_!Q0,v$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$/]Z$h&jO!^$0O!^!_$0f!_#i$0O#i#j$0k#j#l$0O#l#m$2^#m#o$0O#o#p$0f#p;'S$0O;'S;=`$4i<%lO$0O(n$0VT_#S$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$0kO_#S(n$0p[$h&jO!Q&c!Q![$1f![!^&c!_!c&c!c!i$1f!i#T&c#T#Z$1f#Z#o&c#o#p$3|#p;'S&c;'S;=`&w<%lO&c(n$1kZ$h&jO!Q&c!Q![$2^![!^&c!_!c&c!c!i$2^!i#T&c#T#Z$2^#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$2cZ$h&jO!Q&c!Q![$3U![!^&c!_!c&c!c!i$3U!i#T&c#T#Z$3U#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3ZZ$h&jO!Q&c!Q![$0O![!^&c!_!c&c!c!i$0O!i#T&c#T#Z$0O#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$4PR!Q![$4Y!c!i$4Y#T#Z$4Y#S$4]S!Q![$4Y!c!i$4Y#T#Z$4Y#q#r$0f(n$4lP;=`<%l$0O#1[$4z_!W#)l$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$6U`#w(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;p$7c_$h&j(Up(X!b(_+4QOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$8qk$h&j(Up(X!b(R,2j$^#t(c$I[OY%ZYZ&cZr%Zrs&}st%Ztu$8buw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$8b![!^%Z!^!_*g!_!c%Z!c!}$8b!}#O%Z#O#P&c#P#R%Z#R#S$8b#S#T%Z#T#o$8b#o#p*g#p$g%Z$g;'S$8b;'S;=`$<l<%lO$8b+d$:qk$h&j(Up(X!b$^#tOY%ZYZ&cZr%Zrs&}st%Ztu$:fuw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$:f![!^%Z!^!_*g!_!c%Z!c!}$:f!}#O%Z#O#P&c#P#R%Z#R#S$:f#S#T%Z#T#o$:f#o#p*g#p$g%Z$g;'S$:f;'S;=`$<f<%lO$:f+d$<iP;=`<%l$:f07[$<oP;=`<%l$8b#Jf$<{X!]#Hb(Up(X!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g,#x$=sa(w+JY$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$+e#q;'S%Z;'S;=`+a<%lO%Z)>v$?V_![(CdtBr$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z?O$@a_!o7`$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$Aq|$h&j(Up(X!b'z0/l$[#t(R,2j(c$I[OX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr07[$D|k$h&j(Up(X!b'{0/l$[#t(R,2j(c$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr",tokenizers:[l,h,c,u,2,3,4,5,6,7,8,9,10,11,12,13,14,a,new n.LocalTokenGroup("$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOv~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!S~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(a~~",141,338),new n.LocalTokenGroup("j~RQYZXz{^~^O(O~~aP!P!Qd~iO(P~~",25,321)],topRules:{Script:[0,7],SingleExpression:[1,274],SingleClassItem:[2,275]},dialects:{jsx:0,ts:15091},dynamicPrecedences:{78:1,80:1,92:1,168:1,198:1},specialized:[{term:325,get:e=>p[e]||-1},{term:341,get:e=>O[e]||-1},{term:93,get:e=>m[e]||-1}],tokenPrec:15116});t.parser=g},1827:(e,t,i)=>{"use strict";var n=i(2696);class r{constructor(e,t,i,n,r,o,s,a,l,h=0,c){this.p=e,this.stack=t,this.state=i,this.reducePos=n,this.pos=r,this.score=o,this.buffer=s,this.bufferBase=a,this.curContext=l,this.lookAhead=h,this.parent=c}toString(){return`[${this.stack.filter(((e,t)=>t%3==0)).concat(this.state)}]@${this.pos}${this.score?"!"+this.score:""}`}static start(e,t,i=0){let n=e.parser.context;return new r(e,[],t,i,i,0,[],0,n?new o(n,n.start):null,0,null)}get context(){return this.curContext?this.curContext.context:null}pushState(e,t){this.stack.push(this.state,t,this.bufferBase+this.buffer.length),this.state=e}reduce(e){var t;let i=e>>19,n=65535&e,{parser:r}=this.p,o=this.reducePos<this.pos-25;o&&this.setLookAhead(this.pos);let s=r.dynamicPrecedence(n);if(s&&(this.score+=s),0==i)return this.pushState(r.getGoto(this.state,n,!0),this.reducePos),n<r.minRepeatTerm&&this.storeNode(n,this.reducePos,this.reducePos,o?8:4,!0),void this.reduceContext(n,this.reducePos);let a=this.stack.length-3*(i-1)-(262144&e?6:0),l=a?this.stack[a-2]:this.p.ranges[0].from,h=this.reducePos-l;h>=2e3&&!(null===(t=this.p.parser.nodeSet.types[n])||void 0===t?void 0:t.isAnonymous)&&(l==this.p.lastBigReductionStart?(this.p.bigReductionCount++,this.p.lastBigReductionSize=h):this.p.lastBigReductionSize<h&&(this.p.bigReductionCount=1,this.p.lastBigReductionStart=l,this.p.lastBigReductionSize=h));let c=a?this.stack[a-1]:0,d=this.bufferBase+this.buffer.length-c;if(n<r.minRepeatTerm||131072&e){let e=r.stateFlag(this.state,1)?this.pos:this.reducePos;this.storeNode(n,l,e,d+4,!0)}if(262144&e)this.state=this.stack[a];else{let e=this.stack[a-3];this.state=r.getGoto(e,n,!0)}for(;this.stack.length>a;)this.stack.pop();this.reduceContext(n,l)}storeNode(e,t,i,n=4,r=!1){if(0==e&&(!this.stack.length||this.stack[this.stack.length-1]<this.buffer.length+this.bufferBase)){let e=this,n=this.buffer.length;if(0==n&&e.parent&&(n=e.bufferBase-e.parent.bufferBase,e=e.parent),n>0&&0==e.buffer[n-4]&&e.buffer[n-1]>-1){if(t==i)return;if(e.buffer[n-2]>=t)return void(e.buffer[n-2]=i)}}if(r&&this.pos!=i){let r=this.buffer.length;if(r>0&&0!=this.buffer[r-4]){let e=!1;for(let t=r;t>0&&this.buffer[t-2]>i;t-=4)if(this.buffer[t-1]>=0){e=!0;break}if(e)for(;r>0&&this.buffer[r-2]>i;)this.buffer[r]=this.buffer[r-4],this.buffer[r+1]=this.buffer[r-3],this.buffer[r+2]=this.buffer[r-2],this.buffer[r+3]=this.buffer[r-1],r-=4,n>4&&(n-=4)}this.buffer[r]=e,this.buffer[r+1]=t,this.buffer[r+2]=i,this.buffer[r+3]=n}else this.buffer.push(e,t,i,n)}shift(e,t,i,n){if(131072&e)this.pushState(65535&e,this.pos);else if(262144&e)this.pos=n,this.shiftContext(t,i),t<=this.p.parser.maxNode&&this.buffer.push(t,i,n,4);else{let r=e,{parser:o}=this.p;(n>this.pos||t<=o.maxNode)&&(this.pos=n,o.stateFlag(r,1)||(this.reducePos=n)),this.pushState(r,i),this.shiftContext(t,i),t<=o.maxNode&&this.buffer.push(t,i,n,4)}}apply(e,t,i,n){65536&e?this.reduce(e):this.shift(e,t,i,n)}useNode(e,t){let i=this.p.reused.length-1;(i<0||this.p.reused[i]!=e)&&(this.p.reused.push(e),i++);let n=this.pos;this.reducePos=this.pos=n+e.length,this.pushState(t,n),this.buffer.push(i,n,this.reducePos,-1),this.curContext&&this.updateContext(this.curContext.tracker.reuse(this.curContext.context,e,this,this.p.stream.reset(this.pos-e.length)))}split(){let e=this,t=e.buffer.length;for(;t>0&&e.buffer[t-2]>e.reducePos;)t-=4;let i=e.buffer.slice(t),n=e.bufferBase+t;for(;e&&n==e.bufferBase;)e=e.parent;return new r(this.p,this.stack.slice(),this.state,this.reducePos,this.pos,this.score,i,n,this.curContext,this.lookAhead,e)}recoverByDelete(e,t){let i=e<=this.p.parser.maxNode;i&&this.storeNode(e,this.pos,t,4),this.storeNode(0,this.pos,t,i?8:4),this.pos=this.reducePos=t,this.score-=190}canShift(e){for(let t=new s(this);;){let i=this.p.parser.stateSlot(t.state,4)||this.p.parser.hasAction(t.state,e);if(0==i)return!1;if(!(65536&i))return!0;t.reduce(i)}}recoverByInsert(e){if(this.stack.length>=300)return[];let t=this.p.parser.nextStates(this.state);if(t.length>8||this.stack.length>=120){let i=[];for(let n,r=0;r<t.length;r+=2)(n=t[r+1])!=this.state&&this.p.parser.hasAction(n,e)&&i.push(t[r],n);if(this.stack.length<120)for(let e=0;i.length<8&&e<t.length;e+=2){let n=t[e+1];i.some(((e,t)=>1&t&&e==n))||i.push(t[e],n)}t=i}let i=[];for(let e=0;e<t.length&&i.length<4;e+=2){let n=t[e+1];if(n==this.state)continue;let r=this.split();r.pushState(n,this.pos),r.storeNode(0,r.pos,r.pos,4,!0),r.shiftContext(t[e],this.pos),r.reducePos=this.pos,r.score-=200,i.push(r)}return i}forceReduce(){let{parser:e}=this.p,t=e.stateSlot(this.state,5);if(!(65536&t))return!1;if(!e.validAction(this.state,t)){let i=t>>19,n=65535&t,r=this.stack.length-3*i;if(r<0||e.getGoto(this.stack[r],n,!1)<0){let e=this.findForcedReduction();if(null==e)return!1;t=e}this.storeNode(0,this.pos,this.pos,4,!0),this.score-=100}return this.reducePos=this.pos,this.reduce(t),!0}findForcedReduction(){let{parser:e}=this.p,t=[],i=(n,r)=>{if(!t.includes(n))return t.push(n),e.allActions(n,(t=>{if(393216&t);else if(65536&t){let i=(t>>19)-r;if(i>1){let n=65535&t,r=this.stack.length-3*i;if(r>=0&&e.getGoto(this.stack[r],n,!1)>=0)return i<<19|65536|n}}else{let e=i(t,r+1);if(null!=e)return e}}))};return i(this.state,0)}forceAll(){for(;!this.p.parser.stateFlag(this.state,2);)if(!this.forceReduce()){this.storeNode(0,this.pos,this.pos,4,!0);break}return this}get deadEnd(){if(3!=this.stack.length)return!1;let{parser:e}=this.p;return 65535==e.data[e.stateSlot(this.state,1)]&&!e.stateSlot(this.state,4)}restart(){this.storeNode(0,this.pos,this.pos,4,!0),this.state=this.stack[0],this.stack.length=0}sameState(e){if(this.state!=e.state||this.stack.length!=e.stack.length)return!1;for(let t=0;t<this.stack.length;t+=3)if(this.stack[t]!=e.stack[t])return!1;return!0}get parser(){return this.p.parser}dialectEnabled(e){return this.p.parser.dialect.flags[e]}shiftContext(e,t){this.curContext&&this.updateContext(this.curContext.tracker.shift(this.curContext.context,e,this,this.p.stream.reset(t)))}reduceContext(e,t){this.curContext&&this.updateContext(this.curContext.tracker.reduce(this.curContext.context,e,this,this.p.stream.reset(t)))}emitContext(){let e=this.buffer.length-1;(e<0||-3!=this.buffer[e])&&this.buffer.push(this.curContext.hash,this.pos,this.pos,-3)}emitLookAhead(){let e=this.buffer.length-1;(e<0||-4!=this.buffer[e])&&this.buffer.push(this.lookAhead,this.pos,this.pos,-4)}updateContext(e){if(e!=this.curContext.context){let t=new o(this.curContext.tracker,e);t.hash!=this.curContext.hash&&this.emitContext(),this.curContext=t}}setLookAhead(e){e>this.lookAhead&&(this.emitLookAhead(),this.lookAhead=e)}close(){this.curContext&&this.curContext.tracker.strict&&this.emitContext(),this.lookAhead>0&&this.emitLookAhead()}}class o{constructor(e,t){this.tracker=e,this.context=t,this.hash=e.strict?e.hash(t):0}}class s{constructor(e){this.start=e,this.state=e.state,this.stack=e.stack,this.base=this.stack.length}reduce(e){let t=65535&e,i=e>>19;0==i?(this.stack==this.start.stack&&(this.stack=this.stack.slice()),this.stack.push(this.state,0,0),this.base+=3):this.base-=3*(i-1);let n=this.start.p.parser.getGoto(this.stack[this.base-3],t,!0);this.state=n}}class a{constructor(e,t,i){this.stack=e,this.pos=t,this.index=i,this.buffer=e.buffer,0==this.index&&this.maybeNext()}static create(e,t=e.bufferBase+e.buffer.length){return new a(e,t,t-e.bufferBase)}maybeNext(){let e=this.stack.parent;null!=e&&(this.index=this.stack.bufferBase-e.bufferBase,this.stack=e,this.buffer=e.buffer)}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}next(){this.index-=4,this.pos-=4,0==this.index&&this.maybeNext()}fork(){return new a(this.stack,this.pos,this.index)}}function l(e,t=Uint16Array){if("string"!=typeof e)return e;let i=null;for(let n=0,r=0;n<e.length;){let o=0;for(;;){let t=e.charCodeAt(n++),i=!1;if(126==t){o=65535;break}t>=92&&t--,t>=34&&t--;let r=t-32;if(r>=46&&(r-=46,i=!0),o+=r,i)break;o*=46}i?i[r++]=o:i=new t(o)}return i}class h{constructor(){this.start=-1,this.value=-1,this.end=-1,this.extended=-1,this.lookAhead=0,this.mask=0,this.context=0}}const c=new h;class d{constructor(e,t){this.input=e,this.ranges=t,this.chunk="",this.chunkOff=0,this.chunk2="",this.chunk2Pos=0,this.next=-1,this.token=c,this.rangeIndex=0,this.pos=this.chunkPos=t[0].from,this.range=t[0],this.end=t[t.length-1].to,this.readNext()}resolveOffset(e,t){let i=this.range,n=this.rangeIndex,r=this.pos+e;for(;r<i.from;){if(!n)return null;let e=this.ranges[--n];r-=i.from-e.to,i=e}for(;t<0?r>i.to:r>=i.to;){if(n==this.ranges.length-1)return null;let e=this.ranges[++n];r+=e.from-i.to,i=e}return r}clipPos(e){if(e>=this.range.from&&e<this.range.to)return e;for(let t of this.ranges)if(t.to>e)return Math.max(e,t.from);return this.end}peek(e){let t,i,n=this.chunkOff+e;if(n>=0&&n<this.chunk.length)t=this.pos+e,i=this.chunk.charCodeAt(n);else{let n=this.resolveOffset(e,1);if(null==n)return-1;if(t=n,t>=this.chunk2Pos&&t<this.chunk2Pos+this.chunk2.length)i=this.chunk2.charCodeAt(t-this.chunk2Pos);else{let e=this.rangeIndex,n=this.range;for(;n.to<=t;)n=this.ranges[++e];this.chunk2=this.input.chunk(this.chunk2Pos=t),t+this.chunk2.length>n.to&&(this.chunk2=this.chunk2.slice(0,n.to-t)),i=this.chunk2.charCodeAt(0)}}return t>=this.token.lookAhead&&(this.token.lookAhead=t+1),i}acceptToken(e,t=0){let i=t?this.resolveOffset(t,-1):this.pos;if(null==i||i<this.token.start)throw new RangeError("Token end out of bounds");this.token.value=e,this.token.end=i}acceptTokenTo(e,t){this.token.value=e,this.token.end=t}getChunk(){if(this.pos>=this.chunk2Pos&&this.pos<this.chunk2Pos+this.chunk2.length){let{chunk:e,chunkPos:t}=this;this.chunk=this.chunk2,this.chunkPos=this.chunk2Pos,this.chunk2=e,this.chunk2Pos=t,this.chunkOff=this.pos-this.chunkPos}else{this.chunk2=this.chunk,this.chunk2Pos=this.chunkPos;let e=this.input.chunk(this.pos),t=this.pos+e.length;this.chunk=t>this.range.to?e.slice(0,this.range.to-this.pos):e,this.chunkPos=this.pos,this.chunkOff=0}}readNext(){return this.chunkOff>=this.chunk.length&&(this.getChunk(),this.chunkOff==this.chunk.length)?this.next=-1:this.next=this.chunk.charCodeAt(this.chunkOff)}advance(e=1){for(this.chunkOff+=e;this.pos+e>=this.range.to;){if(this.rangeIndex==this.ranges.length-1)return this.setDone();e-=this.range.to-this.pos,this.range=this.ranges[++this.rangeIndex],this.pos=this.range.from}return this.pos+=e,this.pos>=this.token.lookAhead&&(this.token.lookAhead=this.pos+1),this.readNext()}setDone(){return this.pos=this.chunkPos=this.end,this.range=this.ranges[this.rangeIndex=this.ranges.length-1],this.chunk="",this.next=-1}reset(e,t){if(t?(this.token=t,t.start=e,t.lookAhead=e+1,t.value=t.extended=-1):this.token=c,this.pos!=e){if(this.pos=e,e==this.end)return this.setDone(),this;for(;e<this.range.from;)this.range=this.ranges[--this.rangeIndex];for(;e>=this.range.to;)this.range=this.ranges[++this.rangeIndex];e>=this.chunkPos&&e<this.chunkPos+this.chunk.length?this.chunkOff=e-this.chunkPos:(this.chunk="",this.chunkOff=0),this.readNext()}return this}read(e,t){if(e>=this.chunkPos&&t<=this.chunkPos+this.chunk.length)return this.chunk.slice(e-this.chunkPos,t-this.chunkPos);if(e>=this.chunk2Pos&&t<=this.chunk2Pos+this.chunk2.length)return this.chunk2.slice(e-this.chunk2Pos,t-this.chunk2Pos);if(e>=this.range.from&&t<=this.range.to)return this.input.read(e,t);let i="";for(let n of this.ranges){if(n.from>=t)break;n.to>e&&(i+=this.input.read(Math.max(n.from,e),Math.min(n.to,t)))}return i}}class u{constructor(e,t){this.data=e,this.id=t}token(e,t){let{parser:i}=t.p;p(this.data,e,t,this.id,i.data,i.tokenPrecTable)}}u.prototype.contextual=u.prototype.fallback=u.prototype.extend=!1;class f{constructor(e,t,i){this.precTable=t,this.elseToken=i,this.data="string"==typeof e?l(e):e}token(e,t){let i=e.pos,n=0;for(;;){let i=e.next<0,r=e.resolveOffset(1,1);if(p(this.data,e,t,0,this.data,this.precTable),e.token.value>-1)break;if(null==this.elseToken)return;if(i||n++,null==r)break;e.reset(r,e.token)}n&&(e.reset(i,e.token),e.acceptToken(this.elseToken,n))}}function p(e,t,i,n,r,o){let s=0,a=1<<n,{dialect:l}=i.p.parser;e:for(;a&e[s];){let i=e[s+1];for(let n=s+3;n<i;n+=2)if((e[n+1]&a)>0){let i=e[n];if(l.allows(i)&&(-1==t.token.value||t.token.value==i||m(i,t.token.value,r,o))){t.acceptToken(i);break}}let n=t.next,h=0,c=e[s+2];if(!(t.next<0&&c>h&&65535==e[i+3*c-3])){for(;h<c;){let r=h+c>>1,o=i+r+(r<<1),a=e[o],l=e[o+1]||65536;if(n<a)c=r;else{if(!(n>=l)){s=e[o+2],t.advance();continue e}h=r+1}}break}s=e[i+3*c-1]}}function O(e,t,i){for(let n,r=t;65535!=(n=e[r]);r++)if(n==i)return r-t;return-1}function m(e,t,i,n){let r=O(i,n,t);return r<0||O(i,n,e)<r}f.prototype.contextual=u.prototype.fallback=u.prototype.extend=!1;const g="undefined"!=typeof process&&process.env&&/\bparse\b/.test(process.env.LOG);let b=null;function w(e,t,i){let r=e.cursor(n.IterMode.IncludeAnonymous);for(r.moveTo(t);;)if(!(i<0?r.childBefore(t):r.childAfter(t)))for(;;){if((i<0?r.to<t:r.from>t)&&!r.type.isError)return i<0?Math.max(0,Math.min(r.to-1,t-25)):Math.min(e.length,Math.max(r.from+1,t+25));if(i<0?r.prevSibling():r.nextSibling())break;if(!r.parent())return i<0?0:e.length}}class y{constructor(e,t){this.fragments=e,this.nodeSet=t,this.i=0,this.fragment=null,this.safeFrom=-1,this.safeTo=-1,this.trees=[],this.start=[],this.index=[],this.nextFragment()}nextFragment(){let e=this.fragment=this.i==this.fragments.length?null:this.fragments[this.i++];if(e){for(this.safeFrom=e.openStart?w(e.tree,e.from+e.offset,1)-e.offset:e.from,this.safeTo=e.openEnd?w(e.tree,e.to+e.offset,-1)-e.offset:e.to;this.trees.length;)this.trees.pop(),this.start.pop(),this.index.pop();this.trees.push(e.tree),this.start.push(-e.offset),this.index.push(0),this.nextStart=this.safeFrom}else this.nextStart=1e9}nodeAt(e){if(e<this.nextStart)return null;for(;this.fragment&&this.safeTo<=e;)this.nextFragment();if(!this.fragment)return null;for(;;){let t=this.trees.length-1;if(t<0)return this.nextFragment(),null;let i=this.trees[t],r=this.index[t];if(r==i.children.length){this.trees.pop(),this.start.pop(),this.index.pop();continue}let o=i.children[r],s=this.start[t]+i.positions[r];if(s>e)return this.nextStart=s,null;if(o instanceof n.Tree){if(s==e){if(s<this.safeFrom)return null;let e=s+o.length;if(e<=this.safeTo){let t=o.prop(n.NodeProp.lookAhead);if(!t||e+t<this.fragment.to)return o}}this.index[t]++,s+o.length>=Math.max(this.safeFrom,e)&&(this.trees.push(o),this.start.push(s),this.index.push(0))}else this.index[t]++,this.nextStart=s+o.length}}}class v{constructor(e,t){this.stream=t,this.tokens=[],this.mainToken=null,this.actions=[],this.tokens=e.tokenizers.map((e=>new h))}getActions(e){let t=0,i=null,{parser:n}=e.p,{tokenizers:r}=n,o=n.stateSlot(e.state,3),s=e.curContext?e.curContext.hash:0,a=0;for(let n=0;n<r.length;n++){if(!(1<<n&o))continue;let l=r[n],h=this.tokens[n];if((!i||l.fallback)&&((l.contextual||h.start!=e.pos||h.mask!=o||h.context!=s)&&(this.updateCachedToken(h,l,e),h.mask=o,h.context=s),h.lookAhead>h.end+25&&(a=Math.max(h.lookAhead,a)),0!=h.value)){let n=t;if(h.extended>-1&&(t=this.addActions(e,h.extended,h.end,t)),t=this.addActions(e,h.value,h.end,t),!l.extend&&(i=h,t>n))break}}for(;this.actions.length>t;)this.actions.pop();return a&&e.setLookAhead(a),i||e.pos!=this.stream.end||(i=new h,i.value=e.p.parser.eofTerm,i.start=i.end=e.pos,t=this.addActions(e,i.value,i.end,t)),this.mainToken=i,this.actions}getMainToken(e){if(this.mainToken)return this.mainToken;let t=new h,{pos:i,p:n}=e;return t.start=i,t.end=Math.min(i+1,n.stream.end),t.value=i==n.stream.end?n.parser.eofTerm:0,t}updateCachedToken(e,t,i){let n=this.stream.clipPos(i.pos);if(t.token(this.stream.reset(n,e),i),e.value>-1){let{parser:t}=i.p;for(let n=0;n<t.specialized.length;n++)if(t.specialized[n]==e.value){let r=t.specializers[n](this.stream.read(e.start,e.end),i);if(r>=0&&i.p.parser.dialect.allows(r>>1)){1&r?e.extended=r>>1:e.value=r>>1;break}}}else e.value=0,e.end=this.stream.clipPos(n+1)}putAction(e,t,i,n){for(let t=0;t<n;t+=3)if(this.actions[t]==e)return n;return this.actions[n++]=e,this.actions[n++]=t,this.actions[n++]=i,n}addActions(e,t,i,n){let{state:r}=e,{parser:o}=e.p,{data:s}=o;for(let e=0;e<2;e++)for(let a=o.stateSlot(r,e?2:1);;a+=3){if(65535==s[a]){if(1!=s[a+1]){0==n&&2==s[a+1]&&(n=this.putAction(P(s,a+2),t,i,n));break}a=P(s,a+2)}s[a]==t&&(n=this.putAction(P(s,a+1),t,i,n))}return n}}class x{constructor(e,t,i,n){this.parser=e,this.input=t,this.ranges=n,this.recovering=0,this.nextStackID=9812,this.minStackPos=0,this.reused=[],this.stoppedAt=null,this.lastBigReductionStart=-1,this.lastBigReductionSize=0,this.bigReductionCount=0,this.stream=new d(t,n),this.tokens=new v(e,this.stream),this.topTerm=e.top[1];let{from:o}=n[0];this.stacks=[r.start(this,e.top[0],o)],this.fragments=i.length&&this.stream.end-o>4*e.bufferLength?new y(i,e.nodeSet):null}get parsedPos(){return this.minStackPos}advance(){let e,t,i=this.stacks,n=this.minStackPos,r=this.stacks=[];if(this.bigReductionCount>300&&1==i.length){let[e]=i;for(;e.forceReduce()&&e.stack.length&&e.stack[e.stack.length-2]>=this.lastBigReductionStart;);this.bigReductionCount=this.lastBigReductionSize=0}for(let o=0;o<i.length;o++){let s=i[o];for(;;){if(this.tokens.mainToken=null,s.pos>n)r.push(s);else{if(this.advanceStack(s,r,i))continue;{e||(e=[],t=[]),e.push(s);let i=this.tokens.getMainToken(s);t.push(i.value,i.end)}}break}}if(!r.length){let t=e&&function(e){let t=null;for(let i of e){let e=i.p.stoppedAt;(i.pos==i.p.stream.end||null!=e&&i.pos>e)&&i.p.parser.stateFlag(i.state,2)&&(!t||t.score<i.score)&&(t=i)}return t}(e);if(t)return g&&console.log("Finish with "+this.stackID(t)),this.stackToTree(t);if(this.parser.strict)throw g&&e&&console.log("Stuck with token "+(this.tokens.mainToken?this.parser.getName(this.tokens.mainToken.value):"none")),new SyntaxError("No parse at "+n);this.recovering||(this.recovering=5)}if(this.recovering&&e){let i=null!=this.stoppedAt&&e[0].pos>this.stoppedAt?e[0]:this.runRecovery(e,t,r);if(i)return g&&console.log("Force-finish "+this.stackID(i)),this.stackToTree(i.forceAll())}if(this.recovering){let e=1==this.recovering?1:3*this.recovering;if(r.length>e)for(r.sort(((e,t)=>t.score-e.score));r.length>e;)r.pop();r.some((e=>e.reducePos>n))&&this.recovering--}else if(r.length>1){e:for(let e=0;e<r.length-1;e++){let t=r[e];for(let i=e+1;i<r.length;i++){let n=r[i];if(t.sameState(n)||t.buffer.length>500&&n.buffer.length>500){if(!((t.score-n.score||t.buffer.length-n.buffer.length)>0)){r.splice(e--,1);continue e}r.splice(i--,1)}}}r.length>12&&r.splice(12,r.length-12)}this.minStackPos=r[0].pos;for(let e=1;e<r.length;e++)r[e].pos<this.minStackPos&&(this.minStackPos=r[e].pos);return null}stopAt(e){if(null!=this.stoppedAt&&this.stoppedAt<e)throw new RangeError("Can't move stoppedAt forward");this.stoppedAt=e}advanceStack(e,t,i){let r=e.pos,{parser:o}=this,s=g?this.stackID(e)+" -> ":"";if(null!=this.stoppedAt&&r>this.stoppedAt)return e.forceReduce()?e:null;if(this.fragments){let t=e.curContext&&e.curContext.tracker.strict,i=t?e.curContext.hash:0;for(let a=this.fragments.nodeAt(r);a;){let r=this.parser.nodeSet.types[a.type.id]==a.type?o.getGoto(e.state,a.type.id):-1;if(r>-1&&a.length&&(!t||(a.prop(n.NodeProp.contextHash)||0)==i))return e.useNode(a,r),g&&console.log(s+this.stackID(e)+` (via reuse of ${o.getName(a.type.id)})`),!0;if(!(a instanceof n.Tree)||0==a.children.length||a.positions[0]>0)break;let l=a.children[0];if(!(l instanceof n.Tree&&0==a.positions[0]))break;a=l}}let a=o.stateSlot(e.state,4);if(a>0)return e.reduce(a),g&&console.log(s+this.stackID(e)+` (via always-reduce ${o.getName(65535&a)})`),!0;if(e.stack.length>=8400)for(;e.stack.length>6e3&&e.forceReduce(););let l=this.tokens.getActions(e);for(let n=0;n<l.length;){let a=l[n++],h=l[n++],c=l[n++],d=n==l.length||!i,u=d?e:e.split(),f=this.tokens.mainToken;if(u.apply(a,h,f?f.start:u.pos,c),g&&console.log(s+this.stackID(u)+` (via ${65536&a?`reduce of ${o.getName(65535&a)}`:"shift"} for ${o.getName(h)} @ ${r}${u==e?"":", split"})`),d)return!0;u.pos>r?t.push(u):i.push(u)}return!1}advanceFully(e,t){let i=e.pos;for(;;){if(!this.advanceStack(e,null,null))return!1;if(e.pos>i)return S(e,t),!0}}runRecovery(e,t,i){let n=null,r=!1;for(let o=0;o<e.length;o++){let s=e[o],a=t[o<<1],l=t[1+(o<<1)],h=g?this.stackID(s)+" -> ":"";if(s.deadEnd){if(r)continue;if(r=!0,s.restart(),g&&console.log(h+this.stackID(s)+" (restarted)"),this.advanceFully(s,i))continue}let c=s.split(),d=h;for(let e=0;c.forceReduce()&&e<10&&(g&&console.log(d+this.stackID(c)+" (via force-reduce)"),!this.advanceFully(c,i));e++)g&&(d=this.stackID(c)+" -> ");for(let e of s.recoverByInsert(a))g&&console.log(h+this.stackID(e)+" (via recover-insert)"),this.advanceFully(e,i);this.stream.end>s.pos?(l==s.pos&&(l++,a=0),s.recoverByDelete(a,l),g&&console.log(h+this.stackID(s)+` (via recover-delete ${this.parser.getName(a)})`),S(s,i)):(!n||n.score<s.score)&&(n=s)}return n}stackToTree(e){return e.close(),n.Tree.build({buffer:a.create(e),nodeSet:this.parser.nodeSet,topID:this.topTerm,maxBufferLength:this.parser.bufferLength,reused:this.reused,start:this.ranges[0].from,length:e.pos-this.ranges[0].from,minRepeatType:this.parser.minRepeatTerm})}stackID(e){let t=(b||(b=new WeakMap)).get(e);return t||b.set(e,t=String.fromCodePoint(this.nextStackID++)),t+e}}function S(e,t){for(let i=0;i<t.length;i++){let n=t[i];if(n.pos==e.pos&&n.sameState(e))return void(t[i].score<e.score&&(t[i]=e))}t.push(e)}class k{constructor(e,t,i){this.source=e,this.flags=t,this.disabled=i}allows(e){return!this.disabled||0==this.disabled[e]}}const A=e=>e;class Q extends n.Parser{constructor(e){if(super(),this.wrappers=[],14!=e.version)throw new RangeError(`Parser version (${e.version}) doesn't match runtime version (14)`);let t=e.nodeNames.split(" ");this.minRepeatTerm=t.length;for(let i=0;i<e.repeatNodeCount;i++)t.push("");let i=Object.keys(e.topRules).map((t=>e.topRules[t][1])),r=[];for(let e=0;e<t.length;e++)r.push([]);function o(e,t,i){r[e].push([t,t.deserialize(String(i))])}if(e.nodeProps)for(let t of e.nodeProps){let e=t[0];"string"==typeof e&&(e=n.NodeProp[e]);for(let i=1;i<t.length;){let n=t[i++];if(n>=0)o(n,e,t[i++]);else{let r=t[i+-n];for(let s=-n;s>0;s--)o(t[i++],e,r);i++}}}this.nodeSet=new n.NodeSet(t.map(((t,o)=>n.NodeType.define({name:o>=this.minRepeatTerm?void 0:t,id:o,props:r[o],top:i.indexOf(o)>-1,error:0==o,skipped:e.skippedNodes&&e.skippedNodes.indexOf(o)>-1})))),e.propSources&&(this.nodeSet=this.nodeSet.extend(...e.propSources)),this.strict=!1,this.bufferLength=n.DefaultBufferLength;let s=l(e.tokenData);this.context=e.context,this.specializerSpecs=e.specialized||[],this.specialized=new Uint16Array(this.specializerSpecs.length);for(let e=0;e<this.specializerSpecs.length;e++)this.specialized[e]=this.specializerSpecs[e].term;this.specializers=this.specializerSpecs.map(C),this.states=l(e.states,Uint32Array),this.data=l(e.stateData),this.goto=l(e.goto),this.maxTerm=e.maxTerm,this.tokenizers=e.tokenizers.map((e=>"number"==typeof e?new u(s,e):e)),this.topRules=e.topRules,this.dialects=e.dialects||{},this.dynamicPrecedences=e.dynamicPrecedences||null,this.tokenPrecTable=e.tokenPrec,this.termNames=e.termNames||null,this.maxNode=this.nodeSet.types.length-1,this.dialect=this.parseDialect(),this.top=this.topRules[Object.keys(this.topRules)[0]]}createParse(e,t,i){let n=new x(this,e,t,i);for(let r of this.wrappers)n=r(n,e,t,i);return n}getGoto(e,t,i=!1){let n=this.goto;if(t>=n[0])return-1;for(let r=n[t+1];;){let t=n[r++],o=1&t,s=n[r++];if(o&&i)return s;for(let i=r+(t>>1);r<i;r++)if(n[r]==e)return s;if(o)return-1}}hasAction(e,t){let i=this.data;for(let n=0;n<2;n++)for(let r,o=this.stateSlot(e,n?2:1);;o+=3){if(65535==(r=i[o])){if(1!=i[o+1]){if(2==i[o+1])return P(i,o+2);break}r=i[o=P(i,o+2)]}if(r==t||0==r)return P(i,o+1)}return 0}stateSlot(e,t){return this.states[6*e+t]}stateFlag(e,t){return(this.stateSlot(e,0)&t)>0}validAction(e,t){return!!this.allActions(e,(e=>e==t||null))}allActions(e,t){let i=this.stateSlot(e,4),n=i?t(i):void 0;for(let i=this.stateSlot(e,1);null==n;i+=3){if(65535==this.data[i]){if(1!=this.data[i+1])break;i=P(this.data,i+2)}n=t(P(this.data,i+1))}return n}nextStates(e){let t=[];for(let i=this.stateSlot(e,1);;i+=3){if(65535==this.data[i]){if(1!=this.data[i+1])break;i=P(this.data,i+2)}if(!(1&this.data[i+2])){let e=this.data[i+1];t.some(((t,i)=>1&i&&t==e))||t.push(this.data[i],e)}}return t}configure(e){let t=Object.assign(Object.create(Q.prototype),this);if(e.props&&(t.nodeSet=this.nodeSet.extend(...e.props)),e.top){let i=this.topRules[e.top];if(!i)throw new RangeError(`Invalid top rule name ${e.top}`);t.top=i}return e.tokenizers&&(t.tokenizers=this.tokenizers.map((t=>{let i=e.tokenizers.find((e=>e.from==t));return i?i.to:t}))),e.specializers&&(t.specializers=this.specializers.slice(),t.specializerSpecs=this.specializerSpecs.map(((i,n)=>{let r=e.specializers.find((e=>e.from==i.external));if(!r)return i;let o=Object.assign(Object.assign({},i),{external:r.to});return t.specializers[n]=C(o),o}))),e.contextTracker&&(t.context=e.contextTracker),e.dialect&&(t.dialect=this.parseDialect(e.dialect)),null!=e.strict&&(t.strict=e.strict),e.wrap&&(t.wrappers=t.wrappers.concat(e.wrap)),null!=e.bufferLength&&(t.bufferLength=e.bufferLength),t}hasWrappers(){return this.wrappers.length>0}getName(e){return this.termNames?this.termNames[e]:String(e<=this.maxNode&&this.nodeSet.types[e].name||e)}get eofTerm(){return this.maxNode+1}get topNode(){return this.nodeSet.types[this.top[1]]}dynamicPrecedence(e){let t=this.dynamicPrecedences;return null==t?0:t[e]||0}parseDialect(e){let t=Object.keys(this.dialects),i=t.map((()=>!1));if(e)for(let n of e.split(" ")){let e=t.indexOf(n);e>=0&&(i[e]=!0)}let n=null;for(let e=0;e<t.length;e++)if(!i[e])for(let i,r=this.dialects[t[e]];65535!=(i=this.data[r++]);)(n||(n=new Uint8Array(this.maxTerm+1)))[i]=1;return new k(e,i,n)}static deserialize(e){return new Q(e)}}function P(e,t){return e[t]|e[t+1]<<16}function C(e){if(e.external){let t=e.extend?1:0;return(i,n)=>e.external(i,n)<<1|t}return e.get}t.ContextTracker=class{constructor(e){this.start=e.start,this.shift=e.shift||A,this.reduce=e.reduce||A,this.reuse=e.reuse||A,this.hash=e.hash||(()=>0),this.strict=!1!==e.strict}},t.ExternalTokenizer=class{constructor(e,t={}){this.token=e,this.contextual=!!t.contextual,this.fallback=!!t.fallback,this.extend=!!t.extend}},t.InputStream=d,t.LRParser=Q,t.LocalTokenGroup=f,t.Stack=r},70:(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(1506),r=i(9064),o=i(2533),s=i(9277),a=i(8539),l=i(591),h=i(4126);const c=[n.lineNumbers(),n.highlightActiveLineGutter(),n.highlightSpecialChars(),s.history(),o.foldGutter(),n.drawSelection(),n.dropCursor(),r.EditorState.allowMultipleSelections.of(!0),o.indentOnInput(),o.syntaxHighlighting(o.defaultHighlightStyle,{fallback:!0}),o.bracketMatching(),l.closeBrackets(),l.autocompletion(),n.rectangularSelection(),n.crosshairCursor(),n.highlightActiveLine(),a.highlightSelectionMatches(),n.keymap.of([...l.closeBracketsKeymap,...s.defaultKeymap,...a.searchKeymap,...s.historyKeymap,...o.foldKeymap,...l.completionKeymap,...h.lintKeymap])],d=[n.highlightSpecialChars(),s.history(),n.drawSelection(),o.syntaxHighlighting(o.defaultHighlightStyle,{fallback:!0}),n.keymap.of([...s.defaultKeymap,...s.historyKeymap])];Object.defineProperty(t,"EditorView",{enumerable:!0,get:function(){return n.EditorView}}),t.basicSetup=c,t.minimalSetup=d},8748:e=>{"use strict";function t(e,i){if("string"==typeof i)e.appendChild(document.createTextNode(i));else if(null==i);else if(null!=i.nodeType)e.appendChild(i);else{if(!Array.isArray(i))throw new RangeError("Unsupported child node: "+i);for(var n=0;n<i.length;n++)t(e,i[n])}}e.exports=function(){var e=arguments[0];"string"==typeof e&&(e=document.createElement(e));var i=1,n=arguments[1];if(n&&"object"==typeof n&&null==n.nodeType&&!Array.isArray(n)){for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)){var o=n[r];"string"==typeof o?e.setAttribute(r,o):null!=o&&(e[r]=o)}i++}for(;i<arguments.length;i++)t(e,arguments[i]);return e}},9172:(e,t)=>{var i="undefined"==typeof Symbol?"__ͼ":Symbol.for("ͼ"),n="undefined"==typeof Symbol?"__styleSet"+Math.floor(1e8*Math.random()):Symbol("styleSet"),r="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:{},o=t.StyleModule=function(e,t){this.rules=[];var i=(t||{}).finish;function n(e){return/^@/.test(e)?[e]:e.split(/,\s*/)}function r(e,t,o,s){var a=[],l=/^@(\w+)\b/.exec(e[0]),h=l&&"keyframes"==l[1];if(l&&null==t)return o.push(e[0]+";");for(var c in t){var d=t[c];if(/&/.test(c))r(c.split(/,\s*/).map((function(t){return e.map((function(e){return t.replace(/&/,e)}))})).reduce((function(e,t){return e.concat(t)})),d,o);else if(d&&"object"==typeof d){if(!l)throw new RangeError("The value of a property ("+c+") should be a primitive value.");r(n(c),d,a,h)}else null!=d&&a.push(c.replace(/_.*/,"").replace(/[A-Z]/g,(function(e){return"-"+e.toLowerCase()}))+": "+d+";")}(a.length||h)&&o.push((!i||l||s?e:e.map(i)).join(", ")+" {"+a.join(" ")+"}")}for(var o in e)r(n(o),e[o],this.rules)};o.prototype.getRules=function(){return this.rules.join("\n")},o.newName=function(){var e=r[i]||1;return r[i]=e+1,"ͼ"+e.toString(36)},o.mount=function(e,t,i){var r=e[n],o=i&&i.nonce;r?o&&r.setNonce(o):r=new a(e,o),r.mount(Array.isArray(t)?t:[t],e)};var s=new Map,a=function(e,t){var i=e.ownerDocument||e,r=i.defaultView;if(!e.head&&e.adoptedStyleSheets&&r.CSSStyleSheet){var o=s.get(i);if(o)return e[n]=o;this.sheet=new r.CSSStyleSheet,s.set(i,this)}else this.styleTag=i.createElement("style"),t&&this.styleTag.setAttribute("nonce",t);this.modules=[],e[n]=this};a.prototype.mount=function(e,t){for(var i=this.sheet,n=0,r=0,o=0;o<e.length;o++){var s=e[o],a=this.modules.indexOf(s);if(a<r&&a>-1&&(this.modules.splice(a,1),r--,a=-1),-1==a){if(this.modules.splice(r++,0,s),i)for(var l=0;l<s.rules.length;l++)i.insertRule(s.rules[l],n++)}else{for(;r<a;)n+=this.modules[r++].rules.length;n+=s.rules.length,r++}}if(i)t.adoptedStyleSheets.indexOf(this.sheet)<0&&(t.adoptedStyleSheets=[this.sheet].concat(t.adoptedStyleSheets));else{for(var h="",c=0;c<this.modules.length;c++)h+=this.modules[c].getRules()+"\n";this.styleTag.textContent=h;var d=t.head||t;this.styleTag.parentNode!=d&&d.insertBefore(this.styleTag,d.firstChild)}},a.prototype.setNonce=function(e){this.styleTag&&this.styleTag.getAttribute("nonce")!=e&&this.styleTag.setAttribute("nonce",e)}},6237:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});for(var i={8:"Backspace",9:"Tab",10:"Enter",12:"NumLock",13:"Enter",16:"Shift",17:"Control",18:"Alt",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",44:"PrintScreen",45:"Insert",46:"Delete",59:";",61:"=",91:"Meta",92:"Meta",106:"*",107:"+",108:",",109:"-",110:".",111:"/",144:"NumLock",145:"ScrollLock",160:"Shift",161:"Shift",162:"Control",163:"Control",164:"Alt",165:"Alt",173:"-",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'"},n={48:")",49:"!",50:"@",51:"#",52:"$",53:"%",54:"^",55:"&",56:"*",57:"(",59:":",61:"+",173:"_",186:":",187:"+",188:"<",189:"_",190:">",191:"?",192:"~",219:"{",220:"|",221:"}",222:'"'},r="undefined"!=typeof navigator&&/Mac/.test(navigator.platform),o="undefined"!=typeof navigator&&/MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent),s=0;s<10;s++)i[48+s]=i[96+s]=String(s);for(s=1;s<=24;s++)i[s+111]="F"+s;for(s=65;s<=90;s++)i[s]=String.fromCharCode(s+32),n[s]=String.fromCharCode(s);for(var a in i)n.hasOwnProperty(a)||(n[a]=i[a]);t.base=i,t.keyName=function(e){var t=!(r&&e.metaKey&&e.shiftKey&&!e.ctrlKey&&!e.altKey||o&&e.shiftKey&&e.key&&1==e.key.length||"Unidentified"==e.key)&&e.key||(e.shiftKey?n:i)[e.keyCode]||e.key||"Unidentified";return"Esc"==t&&(t="Escape"),"Del"==t&&(t="Delete"),"Left"==t&&(t="ArrowLeft"),"Up"==t&&(t="ArrowUp"),"Right"==t&&(t="ArrowRight"),"Down"==t&&(t="ArrowDown"),t},t.shift=n},7749:e=>{"use strict";e.exports=JSON.parse('{"levels":[{"html":"<div class=\\"pokemons\\">\\n    <pikachu />\\n</div>","title":"Catch Pikachu","menuTitle":"1. I choose you!","pokemons":[1],"correctAnswers":[{"css":"pikachu","pokemons":[1]}],"done":false},{"html":"<div class=\\"pokemons\\">\\n    <pikachu />\\n    <charmander />\\n    <pikachu />\\n</div>","title":"Catch 2 Pikachu","menuTitle":"2. Catch more Pikachu","pokemons":[1,3,1],"correctAnswers":[{"css":"pikachu","pokemons":[1]}],"done":false},{"html":"<div class=\\"pokemons\\">\\n    <charmander />\\n    <bulbasaur />\\n    <charmander  id=\\"shiny\\"/>\\n    <pikachu />\\n</div>","title":"Catch Shiny Charmander","menuTitle":"3. Shiny Charmander","pokemons":[3,2,6,1],"correctAnswers":[{"css":"#shiny","pokemons":[6]},{"css":"charmander#shiny","pokemons":[6]}],"done":false},{"html":"<div class=\\"pokemons\\">\\n    <pikachu />\\n    <bulbasaur />\\n    <charmander />\\n    <cage>\\n        <pikachu />\\n    </cage>\\n</div>","title":"Free Pikachu","menuTitle":"4. Free Pikachu","pokemons":[1,2,3,7],"correctAnswers":[{"css":"cage pikachu","pokemons":[7]}],"done":false},{"html":"<div class=\\"pokemons\\">\\n    <pikachu />\\n    <bulbasaur class=\\"tiny\\" />\\n    <bulbasaur />\\n</div>","title":"Catch little Bulbasaur","menuTitle":"5. It\'s tiny!","pokemons":[1,8,2],"correctAnswers":[{"css":".tiny","pokemons":[8]}],"done":false},{"html":"<div class=\\"pokemons\\">\\n    <charmander class=\\"tiny\\" />\\n    <bulbasaur class=\\"tiny\\" />\\n    <charmander class=\\"tiny\\" />\\n    <charmander />\\n</div>","title":"Catch all little Charmander","menuTitle":"6. Catch all tinys\'","pokemons":[9,8,9,3],"correctAnswers":[{"css":"charmander.tiny","pokemons":[9]}],"done":false},{"html":"<div class=\\"pokemons\\">\\n    <cage>\\n        <pikachu class=\\"tiny\\"/>\\n    </cage>\\n    <pikachu />\\n    <cage>\\n        <pikachu class=\\"tiny\\" />\\n    </cage>\\n    <bulbasaur class=\\"tiny\\" />\\n    <cage>\\n        <pikachu />\\n    </cage>\\n</div>","title":"Free all tiny Pikachu in cages","menuTitle":"7. Free all tinys\'","pokemons":[7,10,11,8,11],"correctAnswers":[{"css":"cage pikachu.tiny","pokemons":[11]}],"done":false},{"html":"<div class=\\"pokemons\\">\\n    <charmander class=\\"shiny\\" />\\n    <squirtle class=\\"tiny\\" />\\n    <squirtle />\\n</div>","title":"Catch shiny Charmander and tiny Sqirtle","menuTitle":"8. Combine shiny & tiny","pokemons":[6,12,4],"correctAnswers":[{"css":".tiny, .shiny","pokemons":[6,12]},{"css":".shiny, .tiny","pokemons":[6,12]}],"done":false},{"html":"<div class=\\"pokemons\\">\\n    <bulbasaur />\\n    <charmander />\\n    <bulbasaur />\\n    <squirtle />\\n</div>","title":"Catch first pokemon","menuTitle":"9. Cath first","pokemons":[14,3,2,4],"correctAnswers":[{"css":".pokemons bulbasaur:first-child","pokemons":[14]},{"css":"bulbasaur:first-child","pokemons":[14]},{"css":"div bulbasaur:first-child","pokemons":[14]}],"done":false},{"html":"<div class=\\"pokemons\\">\\n    <pikachu />\\n    <charmander />\\n    <bulbasaur />\\n    <pikachu />\\n</div>","title":"Catch last pokemon","menuTitle":"10. Catch lasts","pokemons":[1,3,2,13],"correctAnswers":[{"css":".pokemons pikachu:last-child","pokemons":[13]},{"css":"pikachu:last-child","pokemons":[13]},{"css":"div pikachu:last-child","pokemons":[13]}],"done":false}]}')}},t={};function i(n){var r=t[n];if(void 0!==r)return r.exports;var o=t[n]={id:n,exports:{}};return e[n].call(o.exports,o,o.exports,i),o.exports}i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),i.nc=void 0,i(8156)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,